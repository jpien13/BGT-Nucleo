
BGT-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f8  08008f30  08008f30  00009f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a128  0800a128  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a128  0800a128  0000b128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a130  0800a130  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a130  0800a130  0000b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a134  0800a134  0000b134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a138  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  200001e0  0800a318  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014a0  0800a318  0000c4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d03  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b6  00000000  00000000  00025f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  000290d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daa  00000000  00000000  0002a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022654  00000000  00000000  0002b0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b56  00000000  00000000  0004d6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d02bb  00000000  00000000  0006424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00134507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c88  00000000  00000000  001345c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001eeb  00000000  00000000  0013a2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000048  00000000  00000000  0013c1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f18 	.word	0x08008f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008f18 	.word	0x08008f18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <bgt60ltr11_spi_read>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_read(uint8_t reg_addr, uint16_t *data) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[3];
    uint8_t rx_data[3] = {0, 0, 0};
 8000ea4:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <bgt60ltr11_spi_read+0x90>)
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	4611      	mov	r1, r2
 8000eae:	8019      	strh	r1, [r3, #0]
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	0c12      	lsrs	r2, r2, #16
 8000eb4:	701a      	strb	r2, [r3, #0]

    /* We send the register address from where we want to read
     * and then we read 2 bytes with dummy data
     */
    tx_data[0] = (uint8_t)((reg_addr << 1) & 0xFE); //  shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (0)
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0; 								// Dummy byte (ignored by radar)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	737b      	strb	r3, [r7, #13]
    tx_data[2] = 0; 								// Dummy byte (ignored by radar)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73bb      	strb	r3, [r7, #14]

    // CS low to start SPI transfer occurs here
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2110      	movs	r1, #16
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f001 fbea 	bl	80026ac <HAL_GPIO_WritePin>
    if(HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, sizeof(tx_data), 100) != HAL_OK) {
 8000ed8:	f107 0208 	add.w	r2, r7, #8
 8000edc:	f107 010c 	add.w	r1, r7, #12
 8000ee0:	2364      	movs	r3, #100	@ 0x64
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <bgt60ltr11_spi_read+0x94>)
 8000ee8:	f002 ffaf 	bl	8003e4a <HAL_SPI_TransmitReceive>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <bgt60ltr11_spi_read+0x6a>
        HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efa:	f001 fbd7 	bl	80026ac <HAL_GPIO_WritePin>
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <bgt60ltr11_spi_read+0x88>
    }
    // CS high to end
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2110      	movs	r1, #16
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0a:	f001 fbcf 	bl	80026ac <HAL_GPIO_WritePin>

    // After transmission, the 16-bit register value is reconstructed from the received bytes:
    *data = ((uint16_t)(rx_data[1] << 8) | (uint16_t)(rx_data[2]));
 8000f0e:	7a7b      	ldrb	r3, [r7, #9]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	7aba      	ldrb	r2, [r7, #10]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08008f30 	.word	0x08008f30
 8000f2c:	200001fc 	.word	0x200001fc

08000f30 <bgt60ltr11_spi_write>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_write(uint8_t reg_addr, uint16_t data){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_data[3];
	uint16_t wrdata = data;
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	81fb      	strh	r3, [r7, #14]

	tx_data[0] = (uint8_t)((reg_addr << 1) | 0x01); // Shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (1)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (uint8_t)((wrdata >> 8) & 0xFF);   // Upper 8 bits of data (MSB first)
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (uint8_t)(wrdata & 0xFF);			// Lower 8 bits of data
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	72bb      	strb	r3, [r7, #10]

    // CS low to start SPI transfer occurs here
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2110      	movs	r1, #16
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f001 fb9e 	bl	80026ac <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, tx_data, sizeof(tx_data)/sizeof(uint8_t), 100) != HAL_OK) {
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	2364      	movs	r3, #100	@ 0x64
 8000f76:	2203      	movs	r2, #3
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <bgt60ltr11_spi_write+0x7c>)
 8000f7a:	f002 fdf0 	bl	8003b5e <HAL_SPI_Transmit>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <bgt60ltr11_spi_write+0x64>
		HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8c:	f001 fb8e 	bl	80026ac <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e006      	b.n	8000fa2 <bgt60ltr11_spi_write+0x72>
	}
	// CS high to end
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9c:	f001 fb86 	bl	80026ac <HAL_GPIO_WritePin>
	return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001fc 	.word	0x200001fc

08000fb0 <bgt60ltr11_HW_reset>:

uint8_t bgt60ltr11_HW_reset(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbc:	f001 fb76 	bl	80026ac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f001 f8bb 	bl	800213c <HAL_Delay>
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f001 fb6d 	bl	80026ac <HAL_GPIO_WritePin>
	return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <bgt60ltr11_soft_reset>:
 *  Resampling can be triggered by setting the reset pin or activating the soft reset by writing the soft_reset
 *  bit (Reg15[15]).
 *  There are 56 Registers according to register overview on page 21
 *  Page 6 https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 */
uint8_t bgt60ltr11_soft_reset(uint8_t wait){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	bgt60ltr11_spi_write(0x0F, (1 << 15));
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f7ff ffa2 	bl	8000f30 <bgt60ltr11_spi_write>
	uint16_t reg56 = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	81fb      	strh	r3, [r7, #14]
	uint16_t reg0 = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	81bb      	strh	r3, [r7, #12]

	if (wait){
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d027      	beq.n	800104a <bgt60ltr11_soft_reset+0x72>
		// wait till init_done in REG56 is set
		for (volatile uint16_t i = 0; i < 2048; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	817b      	strh	r3, [r7, #10]
 8000ffe:	e01d      	b.n	800103c <bgt60ltr11_soft_reset+0x64>
			bgt60ltr11_spi_read(0x38, &reg56);
 8001000:	f107 030e 	add.w	r3, r7, #14
 8001004:	4619      	mov	r1, r3
 8001006:	2038      	movs	r0, #56	@ 0x38
 8001008:	f7ff ff46 	bl	8000e98 <bgt60ltr11_spi_read>
			bgt60ltr11_spi_read(0x00, &reg0);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ff40 	bl	8000e98 <bgt60ltr11_spi_read>
			// check if REG0 has default values and REG56 bit init_done is set
			if (reg0 == 0 && reg56 & (1 << 13)){
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <bgt60ltr11_soft_reset+0x54>
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <bgt60ltr11_soft_reset+0x54>
				return HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	e00f      	b.n	800104c <bgt60ltr11_soft_reset+0x74>
			}
			HAL_Delay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f001 f885 	bl	800213c <HAL_Delay>
		for (volatile uint16_t i = 0; i < 2048; i++){
 8001032:	897b      	ldrh	r3, [r7, #10]
 8001034:	b29b      	uxth	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	817b      	strh	r3, [r7, #10]
 800103c:	897b      	ldrh	r3, [r7, #10]
 800103e:	b29b      	uxth	r3, r3
 8001040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001044:	d3dc      	bcc.n	8001000 <bgt60ltr11_soft_reset+0x28>
		}
		return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <bgt60ltr11_soft_reset+0x74>
	}
	return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <bgt60ltr11_get_RAW_data>:
}

/*
 * Read ADC channel data directly into the provided pointers
 */
uint8_t bgt60ltr11_get_RAW_data(uint16_t *ifi, uint16_t *ifq){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	if (bgt60ltr11_spi_read(0x28, ifi) != HAL_OK) return HAL_ERROR;
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	2028      	movs	r0, #40	@ 0x28
 8001062:	f7ff ff19 	bl	8000e98 <bgt60ltr11_spi_read>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <bgt60ltr11_get_RAW_data+0x1c>
 800106c:	2301      	movs	r3, #1
 800106e:	e009      	b.n	8001084 <bgt60ltr11_get_RAW_data+0x30>
	if (bgt60ltr11_spi_read(0x29, ifq) != HAL_OK) return HAL_ERROR;
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	2029      	movs	r0, #41	@ 0x29
 8001074:	f7ff ff10 	bl	8000e98 <bgt60ltr11_spi_read>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <bgt60ltr11_get_RAW_data+0x2e>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <bgt60ltr11_get_RAW_data+0x30>
	return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <bgt60ltr11_pulsed_mode_init>:

uint8_t bgt60ltr11_pulsed_mode_init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	// Perform soft reset
	if (bgt60ltr11_soft_reset(0) != HAL_OK) return HAL_ERROR;
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ffa1 	bl	8000fd8 <bgt60ltr11_soft_reset>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <bgt60ltr11_pulsed_mode_init+0x14>
 800109c:	2301      	movs	r3, #1
 800109e:	e0e1      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f001 f84b 	bl	800213c <HAL_Delay>

	// Write to each register and check the result

	if (bgt60ltr11_spi_write(0x00, 0x0000) != HAL_OK) return HAL_ERROR;
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ff41 	bl	8000f30 <bgt60ltr11_spi_write>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <bgt60ltr11_pulsed_mode_init+0x2c>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0d5      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f001 f83f 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x01, 0x0000) != HAL_OK) return HAL_ERROR;
 80010be:	2100      	movs	r1, #0
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff ff35 	bl	8000f30 <bgt60ltr11_spi_write>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <bgt60ltr11_pulsed_mode_init+0x44>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0c9      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f001 f833 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x02, 0x2A00) != HAL_OK) return HAL_ERROR;
 80010d6:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff ff28 	bl	8000f30 <bgt60ltr11_spi_write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <bgt60ltr11_pulsed_mode_init+0x5e>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e0bc      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f001 f826 	bl	800213c <HAL_Delay>

	// TODO need to check the value for the REG3

	if (bgt60ltr11_spi_write(0x04, 0x0F3A) != HAL_OK) return HAL_ERROR;
 80010f0:	f640 713a 	movw	r1, #3898	@ 0xf3a
 80010f4:	2004      	movs	r0, #4
 80010f6:	f7ff ff1b 	bl	8000f30 <bgt60ltr11_spi_write>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <bgt60ltr11_pulsed_mode_init+0x78>
 8001100:	2301      	movs	r3, #1
 8001102:	e0af      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f001 f819 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x05, 0x0FB0) != HAL_OK) return HAL_ERROR;
 800110a:	f44f 617b 	mov.w	r1, #4016	@ 0xfb0
 800110e:	2005      	movs	r0, #5
 8001110:	f7ff ff0e 	bl	8000f30 <bgt60ltr11_spi_write>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <bgt60ltr11_pulsed_mode_init+0x92>
 800111a:	2301      	movs	r3, #1
 800111c:	e0a2      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f001 f80c 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x06, 0x6800) != HAL_OK) return HAL_ERROR;
 8001124:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 8001128:	2006      	movs	r0, #6
 800112a:	f7ff ff01 	bl	8000f30 <bgt60ltr11_spi_write>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <bgt60ltr11_pulsed_mode_init+0xac>
 8001134:	2301      	movs	r3, #1
 8001136:	e095      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 ffff 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x07, 0x0557) != HAL_OK) return HAL_ERROR;
 800113e:	f240 5157 	movw	r1, #1367	@ 0x557
 8001142:	2007      	movs	r0, #7
 8001144:	f7ff fef4 	bl	8000f30 <bgt60ltr11_spi_write>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <bgt60ltr11_pulsed_mode_init+0xc6>
 800114e:	2301      	movs	r3, #1
 8001150:	e088      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fff2 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x08, 0x000E) != HAL_OK) return HAL_ERROR;
 8001158:	210e      	movs	r1, #14
 800115a:	2008      	movs	r0, #8
 800115c:	f7ff fee8 	bl	8000f30 <bgt60ltr11_spi_write>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <bgt60ltr11_pulsed_mode_init+0xde>
 8001166:	2301      	movs	r3, #1
 8001168:	e07c      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 ffe6 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x09, 0x00E8) != HAL_OK) return HAL_ERROR;
 8001170:	21e8      	movs	r1, #232	@ 0xe8
 8001172:	2009      	movs	r0, #9
 8001174:	f7ff fedc 	bl	8000f30 <bgt60ltr11_spi_write>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <bgt60ltr11_pulsed_mode_init+0xf6>
 800117e:	2301      	movs	r3, #1
 8001180:	e070      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 ffda 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0A, 0x004F) != HAL_OK) return HAL_ERROR;
 8001188:	214f      	movs	r1, #79	@ 0x4f
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff fed0 	bl	8000f30 <bgt60ltr11_spi_write>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <bgt60ltr11_pulsed_mode_init+0x10e>
 8001196:	2301      	movs	r3, #1
 8001198:	e064      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 ffce 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0C, 0x0000) != HAL_OK) return HAL_ERROR;
 80011a0:	2100      	movs	r1, #0
 80011a2:	200c      	movs	r0, #12
 80011a4:	f7ff fec4 	bl	8000f30 <bgt60ltr11_spi_write>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <bgt60ltr11_pulsed_mode_init+0x126>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e058      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 ffc2 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0D, 0x0000) != HAL_OK) return HAL_ERROR;
 80011b8:	2100      	movs	r1, #0
 80011ba:	200d      	movs	r0, #13
 80011bc:	f7ff feb8 	bl	8000f30 <bgt60ltr11_spi_write>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <bgt60ltr11_pulsed_mode_init+0x13e>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e04c      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 ffb6 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0E, 0x0000) != HAL_OK) return HAL_ERROR;
 80011d0:	2100      	movs	r1, #0
 80011d2:	200e      	movs	r0, #14
 80011d4:	f7ff feac 	bl	8000f30 <bgt60ltr11_spi_write>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <bgt60ltr11_pulsed_mode_init+0x156>
 80011de:	2301      	movs	r3, #1
 80011e0:	e040      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 ffaa 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0F, 0x0000) != HAL_OK) return HAL_ERROR;
 80011e8:	2100      	movs	r1, #0
 80011ea:	200f      	movs	r0, #15
 80011ec:	f7ff fea0 	bl	8000f30 <bgt60ltr11_spi_write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <bgt60ltr11_pulsed_mode_init+0x16e>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e034      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 ff9e 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x22, 0x0000) != HAL_OK) return HAL_ERROR;
 8001200:	2100      	movs	r1, #0
 8001202:	2022      	movs	r0, #34	@ 0x22
 8001204:	f7ff fe94 	bl	8000f30 <bgt60ltr11_spi_write>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <bgt60ltr11_pulsed_mode_init+0x186>
 800120e:	2301      	movs	r3, #1
 8001210:	e028      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f000 ff92 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x23, 0x0000) != HAL_OK) return HAL_ERROR;
 8001218:	2100      	movs	r1, #0
 800121a:	2023      	movs	r0, #35	@ 0x23
 800121c:	f7ff fe88 	bl	8000f30 <bgt60ltr11_spi_write>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <bgt60ltr11_pulsed_mode_init+0x19e>
 8001226:	2301      	movs	r3, #1
 8001228:	e01c      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f000 ff86 	bl	800213c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x24, 0x0000) != HAL_OK) return HAL_ERROR;
 8001230:	2100      	movs	r1, #0
 8001232:	2024      	movs	r0, #36	@ 0x24
 8001234:	f7ff fe7c 	bl	8000f30 <bgt60ltr11_spi_write>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <bgt60ltr11_pulsed_mode_init+0x1b6>
 800123e:	2301      	movs	r3, #1
 8001240:	e010      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f000 ff7a 	bl	800213c <HAL_Delay>
	/*
	// ADC clock EN, bandgap EN, ADC EN
	if (bgt60ltr11_spi_write(0x22, 0x0007) != HAL_OK) return HAL_ERROR;
	HAL_Delay(1);
	*/
	if (bgt60ltr11_spi_write(0x0F, 0x4000) != HAL_OK) return HAL_ERROR;
 8001248:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800124c:	200f      	movs	r0, #15
 800124e:	f7ff fe6f 	bl	8000f30 <bgt60ltr11_spi_write>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <bgt60ltr11_pulsed_mode_init+0x1d0>
 8001258:	2301      	movs	r3, #1
 800125a:	e003      	b.n	8001264 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f000 ff6d 	bl	800213c <HAL_Delay>

	return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}

08001268 <mean_removal_float>:
 *
 * @param [in,out]	data	complex input/output data (float)
 * @param [in]		len		number of complex numbers
 */
static void mean_removal_float(float32_t *data, uint32_t len)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	@ 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	float32_t sum_real = 0.0f, sum_imag = 0.0f;
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]

    // Compute the sum of real and imaginary components
    for (uint32_t i = 0; i < len; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e01b      	b.n	80012bc <mean_removal_float+0x54>
    {
        sum_real += data[2 * i + 0];
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ed97 7a07 	vldr	s14, [r7, #28]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	edc7 7a07 	vstr	s15, [r7, #28]
        sum_imag += data[2 * i + 1];
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	3304      	adds	r3, #4
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80012ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b2:	edc7 7a06 	vstr	s15, [r7, #24]
    for (uint32_t i = 0; i < len; i++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3df      	bcc.n	8001284 <mean_removal_float+0x1c>
    }

    // Compute the mean values
    const float32_t mean_real = sum_real / (float32_t)len;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80012d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d6:	edc7 7a03 	vstr	s15, [r7, #12]
    const float32_t mean_imag = sum_imag / (float32_t)len;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	edc7 7a02 	vstr	s15, [r7, #8]

    // Subtract the mean from each data point
    for (uint32_t i = 0; i < len; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e024      	b.n	8001340 <mean_removal_float+0xd8>
    {
        data[2 * i + 0] -= mean_real;
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	ed93 7a00 	vldr	s14, [r3]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	edd7 7a03 	vldr	s15, [r7, #12]
 800130e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001312:	edc3 7a00 	vstr	s15, [r3]
        data[2 * i + 1] -= mean_imag;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	3304      	adds	r3, #4
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	3304      	adds	r3, #4
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001336:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < len; i++)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	3301      	adds	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3d6      	bcc.n	80012f6 <mean_removal_float+0x8e>
    }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <hanning256_float>:
 *   	data = {real0, imag0, real1, imag1, ..., real127, imag127}
 *
 * @param [in,out]	complex input/output data
 */
static void hanning256_float(float32_t* data)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	    0.918495, 0.925109, 0.931464, 0.937558, 0.943387, 0.948946, 0.954233, 0.959243,
	    0.963976, 0.968426, 0.972592, 0.976471, 0.980061, 0.983359, 0.986364, 0.989074,
	    0.991487, 0.993601, 0.995416, 0.996930, 0.998142, 0.999052, 0.999659, 0.999962,
	};

	for (uint32_t i = 0; i < 128; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e054      	b.n	8001410 <hanning256_float+0xb8>
	{
		const float32_t weight = weights[i];
 8001366:	4a2f      	ldr	r2, [pc, #188]	@ (8001424 <hanning256_float+0xcc>)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60bb      	str	r3, [r7, #8]

		data[2 * i + 0] = weight * data[2 * i + 0];
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	edd7 7a02 	vldr	s15, [r7, #8]
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	edc3 7a00 	vstr	s15, [r3]
		data[2 * i + 1] = weight * data[2 * i + 1];
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	3304      	adds	r3, #4
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	3304      	adds	r3, #4
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b2:	edc3 7a00 	vstr	s15, [r3]

		data[2 * (255 - i) + 0] = weight * data[2 * (255 - i) + 0];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	ed93 7a00 	vldr	s14, [r3]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013da:	edc3 7a00 	vstr	s15, [r3]
		data[2 * (255 - i) + 1] = weight * data[2 * (255 - i) + 1];
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	3304      	adds	r3, #4
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	3304      	adds	r3, #4
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001406:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < 128; i++)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b7f      	cmp	r3, #127	@ 0x7f
 8001414:	d9a7      	bls.n	8001366 <hanning256_float+0xe>
	}
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	08008fec 	.word	0x08008fec

08001428 <fft256_float>:
 *   	data = {real0, imag0, real1, imag1, ..., real127, imag127}
 *
 * @param [in,out]	data	input/output float32_t data
 */
static inline void fft256_float(float32_t* data)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	arm_cfft_f32(&arm_cfft_sR_f32_len256, data, 0, 1);
 8001430:	2301      	movs	r3, #1
 8001432:	2200      	movs	r2, #0
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4803      	ldr	r0, [pc, #12]	@ (8001444 <fft256_float+0x1c>)
 8001438:	f004 fd02 	bl	8005e40 <arm_cfft_f32>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	08009234 	.word	0x08009234

08001448 <hypot_f32>:
 * @param [in]   a    length a
 * @param [in]   b    length b
 * @retval       hypotenuse    sqrt(a*a + b*b)
 */
static float32_t hypot_f32(float32_t a, float32_t b)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001452:	edc7 0a00 	vstr	s1, [r7]
    float32_t a2 = a * a;
 8001456:	edd7 7a01 	vldr	s15, [r7, #4]
 800145a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800145e:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t b2 = b * b;
 8001462:	edd7 7a00 	vldr	s15, [r7]
 8001466:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800146a:	edc7 7a02 	vstr	s15, [r7, #8]
    return sqrtf(a2 + b2);
 800146e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001472:	edd7 7a02 	vldr	s15, [r7, #8]
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	f007 fd29 	bl	8008ed4 <sqrtf>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
}
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <fft256_spectrum>:




void fft256_spectrum(float32_t* data)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	/* remove the mean from the input data */
	mean_removal_float(data, FFT_BUFFER_SIZE);
 8001498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fee3 	bl	8001268 <mean_removal_float>

	/* apply window function */
	hanning256_float(data);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff58 	bl	8001358 <hanning256_float>

	/* compute FFT */
	fft256_float(data);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffbd 	bl	8001428 <fft256_float>

	/* compute spectrum */
	for(uint32_t i = 0; i < 256; i++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e01d      	b.n	80014f0 <fft256_spectrum+0x60>
	{
		const float32_t real = data[2*i+0], imag = data[2*i+1];
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	3304      	adds	r3, #4
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
		data[i] = hypot_f32(real, imag);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	18d4      	adds	r4, r2, r3
 80014d6:	edd7 0a03 	vldr	s1, [r7, #12]
 80014da:	ed97 0a04 	vldr	s0, [r7, #16]
 80014de:	f7ff ffb3 	bl	8001448 <hypot_f32>
 80014e2:	eef0 7a40 	vmov.f32	s15, s0
 80014e6:	edc4 7a00 	vstr	s15, [r4]
	for(uint32_t i = 0; i < 256; i++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2bff      	cmp	r3, #255	@ 0xff
 80014f4:	d9de      	bls.n	80014b4 <fft256_spectrum+0x24>
	}


}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <find_peak_frequency>:
    }
}


void find_peak_frequency(const float32_t *spectrum, uint32_t fft_size, float32_t sampling_rate, float32_t *peak_freq, float32_t *peak_value, float32_t *target_velocity)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	@ 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6178      	str	r0, [r7, #20]
 8001508:	6139      	str	r1, [r7, #16]
 800150a:	ed87 0a03 	vstr	s0, [r7, #12]
 800150e:	60ba      	str	r2, [r7, #8]
 8001510:	607b      	str	r3, [r7, #4]
    float32_t max_value = 0.0f;
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t peak_index = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool first = true;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure fft_size is valid
	if (fft_size == 0 || spectrum == NULL || peak_freq == NULL || peak_value == NULL || target_velocity == NULL) {
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00b      	beq.n	8001540 <find_peak_frequency+0x40>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <find_peak_frequency+0x40>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <find_peak_frequency+0x40>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <find_peak_frequency+0x40>
 800153a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <find_peak_frequency+0x48>
		printf("GOT BAD DATA!!!\r\n");
 8001540:	4845      	ldr	r0, [pc, #276]	@ (8001658 <find_peak_frequency+0x158>)
 8001542:	f005 fd57 	bl	8006ff4 <puts>
		return; // Invalid input, handle error appropriately in production
 8001546:	e084      	b.n	8001652 <find_peak_frequency+0x152>
	}

    for (uint32_t i = 0; i < fft_size; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
 800154c:	e01e      	b.n	800158c <find_peak_frequency+0x8c>
        if (spectrum[i] > max_value || first) {
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4413      	add	r3, r2
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800155e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	d403      	bmi.n	8001570 <find_peak_frequency+0x70>
 8001568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00a      	beq.n	8001586 <find_peak_frequency+0x86>
            max_value = spectrum[i];
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4413      	add	r3, r2
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            peak_index = i;
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
            first = false;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for (uint32_t i = 0; i < fft_size; i++) {
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	3301      	adds	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
 800158c:	6a3a      	ldr	r2, [r7, #32]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3dc      	bcc.n	800154e <find_peak_frequency+0x4e>
        }
    }

    *peak_value = max_value;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001598:	601a      	str	r2, [r3, #0]
    *peak_freq = (sampling_rate * peak_index) / fft_size;
 800159a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	edc3 7a00 	vstr	s15, [r3]
    //*target_velocity = (*peak_freq) *  3.6f *LAMBDA / 2.0f;

    // Handle velocity direction
	float32_t nyquist_freq = sampling_rate / 2.0f; // Nyquist frequency
 80015c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80015c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015cc:	edc7 7a07 	vstr	s15, [r7, #28]
	if (*peak_freq <= nyquist_freq) {
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80015da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	db16      	blt.n	8001612 <find_peak_frequency+0x112>
		// Approaching: positive velocity
		*target_velocity = (*peak_freq) * 3.6f * LAMBDA / 2.0f; // Convert to km/h if needed
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800165c <find_peak_frequency+0x15c>
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001660 <find_peak_frequency+0x160>
 80015f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fa:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001664 <find_peak_frequency+0x164>
 80015fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001602:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800160c:	edc3 7a00 	vstr	s15, [r3]
 8001610:	e01f      	b.n	8001652 <find_peak_frequency+0x152>
	} else {
		// Departing: negative velocity
		float32_t adjusted_freq = sampling_rate - *peak_freq; // Fold frequency into [0, fs/2]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ed97 7a03 	vldr	s14, [r7, #12]
 800161c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001620:	edc7 7a06 	vstr	s15, [r7, #24]
		*target_velocity = -adjusted_freq * 3.6f * LAMBDA / 2.0f; // Negative sign for departing
 8001624:	edd7 7a06 	vldr	s15, [r7, #24]
 8001628:	eef1 7a67 	vneg.f32	s15, s15
 800162c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800165c <find_peak_frequency+0x15c>
 8001630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001634:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001660 <find_peak_frequency+0x160>
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001664 <find_peak_frequency+0x164>
 8001640:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001644:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800164e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001652:	3730      	adds	r7, #48	@ 0x30
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08008f34 	.word	0x08008f34
 800165c:	40666666 	.word	0x40666666
 8001660:	4d8f0d18 	.word	0x4d8f0d18
 8001664:	4fb68a0b 	.word	0x4fb68a0b

08001668 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001670:	1d39      	adds	r1, r7, #4
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	2201      	movs	r2, #1
 8001678:	4803      	ldr	r0, [pc, #12]	@ (8001688 <__io_putchar+0x20>)
 800167a:	f003 fbe9 	bl	8004e50 <HAL_UART_Transmit>
  return ch;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002ac 	.word	0x200002ac

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f000 fcdd 	bl	8002052 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f8a6 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f000 f9b2 	bl	8001a04 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016a0:	f000 f8f4 	bl	800188c <MX_SPI1_Init>
  MX_TIM2_Init();
 80016a4:	f000 f930 	bl	8001908 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80016a8:	f000 f97c 	bl	80019a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2110      	movs	r1, #16
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f000 fffa 	bl	80026ac <HAL_GPIO_WritePin>
  bgt60ltr11_HW_reset();
 80016b8:	f7ff fc7a 	bl	8000fb0 <bgt60ltr11_HW_reset>
  HAL_Delay(100);  // Wait for radar to stabilize
 80016bc:	2064      	movs	r0, #100	@ 0x64
 80016be:	f000 fd3d 	bl	800213c <HAL_Delay>
  if (bgt60ltr11_pulsed_mode_init() != HAL_OK) {
 80016c2:	f7ff fce3 	bl	800108c <bgt60ltr11_pulsed_mode_init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <main+0x44>
	  // Failed to initialize - LED should blink in error handler
	  Error_Handler();
 80016cc:	f000 fa7e 	bl	8001bcc <Error_Handler>
  }
  HAL_Delay(1000);
 80016d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016d4:	f000 fd32 	bl	800213c <HAL_Delay>
  // Test SPI communication
//  if (bgt60ltr11_test() != HAL_OK) {
//	  // SPI test failed
//	  Error_Handler();
//  }
  HAL_TIM_Base_Start_IT(&htim2);
 80016d8:	4835      	ldr	r0, [pc, #212]	@ (80017b0 <main+0x124>)
 80016da:	f002 ff91 	bl	8004600 <HAL_TIM_Base_Start_IT>
  // radar successfully initialized
  radar_initialized = 1;
 80016de:	4b35      	ldr	r3, [pc, #212]	@ (80017b4 <main+0x128>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]

  bool collecting_data = true;
 80016e4:	2301      	movs	r3, #1
 80016e6:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("-\r\n");
 80016e8:	4833      	ldr	r0, [pc, #204]	@ (80017b8 <main+0x12c>)
 80016ea:	f005 fc83 	bl	8006ff4 <puts>
	  if (HAL_GPIO_ReadPin(TD_GPIO_Port, TD_Pin) == GPIO_PIN_RESET) {
 80016ee:	2180      	movs	r1, #128	@ 0x80
 80016f0:	4832      	ldr	r0, [pc, #200]	@ (80017bc <main+0x130>)
 80016f2:	f000 ffc3 	bl	800267c <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10d      	bne.n	8001718 <main+0x8c>
		  // TD = 0
		  if (HAL_GPIO_ReadPin(PD_GPIO_Port, PD_Pin) == GPIO_PIN_SET) {
 80016fc:	2101      	movs	r1, #1
 80016fe:	482f      	ldr	r0, [pc, #188]	@ (80017bc <main+0x130>)
 8001700:	f000 ffbc 	bl	800267c <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d103      	bne.n	8001712 <main+0x86>
			  // PD = 1
			  printf("APPROACHING!!!!!\r\n");
 800170a:	482d      	ldr	r0, [pc, #180]	@ (80017c0 <main+0x134>)
 800170c:	f005 fc72 	bl	8006ff4 <puts>
 8001710:	e002      	b.n	8001718 <main+0x8c>
		  } else {
			  // PD = 0
			  printf("DEPARTING!!!!!\r\n");
 8001712:	482c      	ldr	r0, [pc, #176]	@ (80017c4 <main+0x138>)
 8001714:	f005 fc6e 	bl	8006ff4 <puts>
		  }
	  }
	  printf("radar_init=%u, data_ready=%u\r\n", radar_initialized, data_ready_f);
 8001718:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <main+0x128>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <main+0x13c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	4829      	ldr	r0, [pc, #164]	@ (80017cc <main+0x140>)
 8001726:	f005 fbfd 	bl	8006f24 <iprintf>
	  if (radar_initialized && data_ready_f){
 800172a:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <main+0x128>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d039      	beq.n	80017a6 <main+0x11a>
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <main+0x13c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d035      	beq.n	80017a6 <main+0x11a>
		  //printf("---------------------------------- data ready!\r\n");
		  //if(bgt60ltr11_get_RAW_data(&IFI, &IFQ) == HAL_OK){
		  // printf("IFI: %u, IFQ: %u\r\n", IFI, IFQ);
		  fft256_spectrum(processing_buffer);
 800173a:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <main+0x144>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fea6 	bl	8001490 <fft256_spectrum>
		  // why is sampling_rate = 1000?
		  find_peak_frequency(processing_buffer, FFT_BUFFER_SIZE, 1000, &peak_index, &max_value, &target_velocity);
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <main+0x144>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <main+0x148>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <main+0x14c>)
 800174e:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <main+0x150>)
 8001750:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80017e0 <main+0x154>
 8001754:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001758:	f7ff fed2 	bl	8001500 <find_peak_frequency>
		  data_ready_f = 0;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <main+0x13c>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
		  //sendDataToMonitor(target_velocity);
		  printf("peak_index: %.5f, max_value: %.5f, target_velocity: %.5f\r\n", peak_index, max_value, target_velocity);
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <main+0x150>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	4680      	mov	r8, r0
 800176e:	4689      	mov	r9, r1
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <main+0x14c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	4604      	mov	r4, r0
 800177c:	460d      	mov	r5, r1
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <main+0x148>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fee0 	bl	8000548 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001790:	e9cd 4500 	strd	r4, r5, [sp]
 8001794:	4642      	mov	r2, r8
 8001796:	464b      	mov	r3, r9
 8001798:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <main+0x158>)
 800179a:	f005 fbc3 	bl	8006f24 <iprintf>
		  // Toggle LED to indicate successful reading
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800179e:	2108      	movs	r1, #8
 80017a0:	4806      	ldr	r0, [pc, #24]	@ (80017bc <main+0x130>)
 80017a2:	f000 ff9b 	bl	80026dc <HAL_GPIO_TogglePin>
		  //}
	  }
	  HAL_Delay(100); // small delay between readings
 80017a6:	2064      	movs	r0, #100	@ 0x64
 80017a8:	f000 fcc8 	bl	800213c <HAL_Delay>
	  printf("-\r\n");
 80017ac:	e79c      	b.n	80016e8 <main+0x5c>
 80017ae:	bf00      	nop
 80017b0:	20000260 	.word	0x20000260
 80017b4:	20001348 	.word	0x20001348
 80017b8:	08008f48 	.word	0x08008f48
 80017bc:	48000400 	.word	0x48000400
 80017c0:	08008f4c 	.word	0x08008f4c
 80017c4:	08008f60 	.word	0x08008f60
 80017c8:	20000008 	.word	0x20000008
 80017cc:	08008f70 	.word	0x08008f70
 80017d0:	20000004 	.word	0x20000004
 80017d4:	2000133c 	.word	0x2000133c
 80017d8:	20001334 	.word	0x20001334
 80017dc:	20001338 	.word	0x20001338
 80017e0:	447a0000 	.word	0x447a0000
 80017e4:	08008f90 	.word	0x08008f90

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b096      	sub	sp, #88	@ 0x58
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	2244      	movs	r2, #68	@ 0x44
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fcdc 	bl	80071b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800180a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800180e:	f000 ff8d 	bl	800272c <HAL_PWREx_ControlVoltageScaling>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001818:	f000 f9d8 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181c:	2302      	movs	r3, #2
 800181e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001824:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001826:	2310      	movs	r3, #16
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182a:	2302      	movs	r3, #2
 800182c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800182e:	2302      	movs	r3, #2
 8001830:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001832:	2301      	movs	r3, #1
 8001834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001836:	230a      	movs	r3, #10
 8001838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800183a:	2307      	movs	r3, #7
 800183c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800183e:	2302      	movs	r3, #2
 8001840:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001842:	2302      	movs	r3, #2
 8001844:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4618      	mov	r0, r3
 800184c:	f000 ffc4 	bl	80027d8 <HAL_RCC_OscConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001856:	f000 f9b9 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185a:	230f      	movs	r3, #15
 800185c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185e:	2303      	movs	r3, #3
 8001860:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	2104      	movs	r1, #4
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fbc4 	bl	8003000 <HAL_RCC_ClockConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800187e:	f000 f9a5 	bl	8001bcc <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3758      	adds	r7, #88	@ 0x58
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_SPI1_Init+0x74>)
 8001892:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <MX_SPI1_Init+0x78>)
 8001894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <MX_SPI1_Init+0x74>)
 8001898:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800189c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018c2:	2228      	movs	r2, #40	@ 0x28
 80018c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018da:	2207      	movs	r2, #7
 80018dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018e6:	2208      	movs	r2, #8
 80018e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ec:	f002 f894 	bl	8003a18 <HAL_SPI_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018f6:	f000 f969 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200001fc 	.word	0x200001fc
 8001904:	40013000 	.word	0x40013000

08001908 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <MX_TIM2_Init+0x98>)
 8001928:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800192c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <MX_TIM2_Init+0x98>)
 8001930:	224f      	movs	r2, #79	@ 0x4f
 8001932:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_TIM2_Init+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MX_TIM2_Init+0x98>)
 800193c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001940:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_TIM2_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <MX_TIM2_Init+0x98>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194e:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <MX_TIM2_Init+0x98>)
 8001950:	f002 fdfe 	bl	8004550 <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800195a:	f000 f937 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4619      	mov	r1, r3
 800196a:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <MX_TIM2_Init+0x98>)
 800196c:	f002 ffa3 	bl	80048b6 <HAL_TIM_ConfigClockSource>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001976:	f000 f929 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	@ (80019a0 <MX_TIM2_Init+0x98>)
 8001988:	f003 f990 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001992:	f000 f91b 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000260 	.word	0x20000260

080019a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019aa:	4a15      	ldr	r2, [pc, #84]	@ (8001a00 <MX_USART2_UART_Init+0x5c>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_USART2_UART_Init+0x58>)
 80019e8:	f003 f9e4 	bl	8004db4 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019f2:	f000 f8eb 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002ac 	.word	0x200002ac
 8001a00:	40004400 	.word	0x40004400

08001a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <MX_GPIO_Init+0xb8>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <MX_GPIO_Init+0xb8>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a26:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <MX_GPIO_Init+0xb8>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <MX_GPIO_Init+0xb8>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <MX_GPIO_Init+0xb8>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <MX_GPIO_Init+0xb8>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a52:	f000 fe2b 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2108      	movs	r1, #8
 8001a5a:	4819      	ldr	r0, [pc, #100]	@ (8001ac0 <MX_GPIO_Init+0xbc>)
 8001a5c:	f000 fe26 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a60:	2310      	movs	r3, #16
 8001a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7a:	f000 fc95 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_Pin TD_Pin */
  GPIO_InitStruct.Pin = PD_Pin|TD_Pin;
 8001a7e:	2381      	movs	r3, #129	@ 0x81
 8001a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <MX_GPIO_Init+0xbc>)
 8001a92:	f000 fc89 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a96:	2308      	movs	r3, #8
 8001a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <MX_GPIO_Init+0xbc>)
 8001aae:	f000 fc7b 	bl	80023a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3720      	adds	r7, #32
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000400 	.word	0x48000400

08001ac4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a35      	ldr	r2, [pc, #212]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d163      	bne.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0xd8>
	    {
	        // Ensure we don't overflow the active buffer
	        if (acquired_sample_count < FFT_BUFFER_SIZE)
 8001ad4:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2bff      	cmp	r3, #255	@ 0xff
 8001ada:	d84f      	bhi.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0xb8>
	        {
	            if (bgt60ltr11_get_RAW_data(&IFI, &IFQ) == HAL_OK)
 8001adc:	4933      	ldr	r1, [pc, #204]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001ade:	4834      	ldr	r0, [pc, #208]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001ae0:	f7ff fab8 	bl	8001054 <bgt60ltr11_get_RAW_data>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d142      	bne.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0xac>
	            {
	            	printf("IFI: %u, IFQ: %u\r\n", IFI, IFQ);
 8001aea:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	482f      	ldr	r0, [pc, #188]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001af8:	f005 fa14 	bl	8006f24 <iprintf>
	                // Only store values if they are below the threshold 0x3FC
	                if (IFI <= 0x3FC && IFQ <= 0x3FC)
 8001afc:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 8001b04:	d84a      	bhi.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0xd8>
 8001b06:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 8001b0e:	d845      	bhi.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0xd8>
	                {
	                    // Store radar data into the active buffer
	                    active_buffer[2 * acquired_sample_count + 0] = (float32_t)(IFI >> 2) / 255.0f; // Scale to [0, 1]
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b20:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001bbc <HAL_TIM_PeriodElapsedCallback+0xf8>
 8001b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b34:	edc3 7a00 	vstr	s15, [r3]
	                    active_buffer[2 * acquired_sample_count + 1] = (float32_t)(IFQ >> 2) / 255.0f; // Scale to [0, 1]
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	3304      	adds	r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001bbc <HAL_TIM_PeriodElapsedCallback+0xf8>
 8001b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5e:	edc3 7a00 	vstr	s15, [r3]

	                    acquired_sample_count++; // Increment sample count
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b6c:	801a      	strh	r2, [r3, #0]
	            data_ready_f = 1;
	            // printf("set data ready to true!!\n");
	            acquired_sample_count = 0; // Reset sample count for the new active buffer
	        }
	    }
}
 8001b6e:	e015      	b.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0xd8>
	                error_cnt++;
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b78:	6013      	str	r3, [r2, #0]
}
 8001b7a:	e00f      	b.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0xd8>
	            float32_t *temp = active_buffer;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
	            active_buffer = processing_buffer;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b88:	6013      	str	r3, [r2, #0]
	            processing_buffer = temp;
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6013      	str	r3, [r2, #0]
	            data_ready_f = 1;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
	            acquired_sample_count = 0; // Reset sample count for the new active buffer
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	801a      	strh	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000260 	.word	0x20000260
 8001ba8:	2000134a 	.word	0x2000134a
 8001bac:	20001342 	.word	0x20001342
 8001bb0:	20001340 	.word	0x20001340
 8001bb4:	08008fcc 	.word	0x08008fcc
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	437f0000 	.word	0x437f0000
 8001bc0:	20001344 	.word	0x20001344
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	20000008 	.word	0x20000008

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	480f      	ldr	r0, [pc, #60]	@ (8001c14 <Error_Handler+0x48>)
 8001bd8:	f000 fd80 	bl	80026dc <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001bdc:	2032      	movs	r0, #50	@ 0x32
 8001bde:	f000 faad 	bl	800213c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001be2:	2108      	movs	r1, #8
 8001be4:	480b      	ldr	r0, [pc, #44]	@ (8001c14 <Error_Handler+0x48>)
 8001be6:	f000 fd79 	bl	80026dc <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001bea:	2032      	movs	r0, #50	@ 0x32
 8001bec:	f000 faa6 	bl	800213c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	4808      	ldr	r0, [pc, #32]	@ (8001c14 <Error_Handler+0x48>)
 8001bf4:	f000 fd72 	bl	80026dc <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001bf8:	2032      	movs	r0, #50	@ 0x32
 8001bfa:	f000 fa9f 	bl	800213c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001bfe:	2108      	movs	r1, #8
 8001c00:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <Error_Handler+0x48>)
 8001c02:	f000 fd6b 	bl	80026dc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);  // Longer pause between double-blinks
 8001c06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c0a:	f000 fa97 	bl	800213c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001c0e:	bf00      	nop
 8001c10:	e7e0      	b.n	8001bd4 <Error_Handler+0x8>
 8001c12:	bf00      	nop
 8001c14:	48000400 	.word	0x48000400

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_MspInit+0x44>)
 8001c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c22:	4a0e      	ldr	r2, [pc, #56]	@ (8001c5c <HAL_MspInit+0x44>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_MspInit+0x44>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <HAL_MspInit+0x44>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	4a08      	ldr	r2, [pc, #32]	@ (8001c5c <HAL_MspInit+0x44>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_MspInit+0x44>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a17      	ldr	r2, [pc, #92]	@ (8001cdc <HAL_SPI_MspInit+0x7c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d128      	bne.n	8001cd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c82:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <HAL_SPI_MspInit+0x80>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	4a16      	ldr	r2, [pc, #88]	@ (8001ce0 <HAL_SPI_MspInit+0x80>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <HAL_SPI_MspInit+0x80>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_SPI_MspInit+0x80>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <HAL_SPI_MspInit+0x80>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_SPI_MspInit+0x80>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001cb2:	23c2      	movs	r3, #194	@ 0xc2
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd0:	f000 fb6a 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	@ 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40013000 	.word	0x40013000
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf4:	d113      	bne.n	8001d1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_TIM_Base_MspInit+0x44>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001d28 <HAL_TIM_Base_MspInit+0x44>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_TIM_Base_MspInit+0x44>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	201c      	movs	r0, #28
 8001d14:	f000 fb11 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d18:	201c      	movs	r0, #28
 8001d1a:	f000 fb2a 	bl	8002372 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b09e      	sub	sp, #120	@ 0x78
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	2254      	movs	r2, #84	@ 0x54
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f005 fa31 	bl	80071b4 <memset>
  if(huart->Instance==USART2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <HAL_UART_MspInit+0xa8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d136      	bne.n	8001dca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fb6d 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d74:	f7ff ff2a 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001da8:	230c      	movs	r3, #12
 8001daa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db8:	2307      	movs	r3, #7
 8001dba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc6:	f000 faef 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	3778      	adds	r7, #120	@ 0x78
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40004400 	.word	0x40004400
 8001dd8:	40021000 	.word	0x40021000

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <NMI_Handler+0x4>

08001de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <MemManage_Handler+0x4>

08001df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e32:	f000 f963 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <TIM2_IRQHandler+0x10>)
 8001e42:	f002 fc31 	bl	80046a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000260 	.word	0x20000260

08001e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_kill>:

int _kill(int pid, int sig)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e6a:	f005 f9f5 	bl	8007258 <__errno>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2216      	movs	r2, #22
 8001e72:	601a      	str	r2, [r3, #0]
  return -1;
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_exit>:

void _exit (int status)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffe7 	bl	8001e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e92:	bf00      	nop
 8001e94:	e7fd      	b.n	8001e92 <_exit+0x12>

08001e96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e00a      	b.n	8001ebe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ea8:	f3af 8000 	nop.w
 8001eac:	4601      	mov	r1, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	60ba      	str	r2, [r7, #8]
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dbf0      	blt.n	8001ea8 <_read+0x12>
  }

  return len;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e009      	b.n	8001ef6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fbbc 	bl	8001668 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbf1      	blt.n	8001ee2 <_write+0x12>
  }
  return len;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_close>:

int _close(int file)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f30:	605a      	str	r2, [r3, #4]
  return 0;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_isatty>:

int _isatty(int file)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f005 f95a 	bl	8007258 <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000c000 	.word	0x2000c000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	2000134c 	.word	0x2000134c
 8001fd8:	200014a0 	.word	0x200014a0

08001fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <SystemInit+0x20>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <SystemInit+0x20>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002038 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002004:	f7ff ffea 	bl	8001fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002008:	480c      	ldr	r0, [pc, #48]	@ (800203c <LoopForever+0x6>)
  ldr r1, =_edata
 800200a:	490d      	ldr	r1, [pc, #52]	@ (8002040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800200c:	4a0d      	ldr	r2, [pc, #52]	@ (8002044 <LoopForever+0xe>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002020:	4c0a      	ldr	r4, [pc, #40]	@ (800204c <LoopForever+0x16>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202e:	f005 f919 	bl	8007264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002032:	f7ff fb2b 	bl	800168c <main>

08002036 <LoopForever>:

LoopForever:
    b LoopForever
 8002036:	e7fe      	b.n	8002036 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002038:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002044:	0800a138 	.word	0x0800a138
  ldr r2, =_sbss
 8002048:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800204c:	200014a0 	.word	0x200014a0

08002050 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC1_IRQHandler>

08002052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 f961 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002062:	200f      	movs	r0, #15
 8002064:	f000 f80e 	bl	8002084 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e001      	b.n	8002078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002074:	f7ff fdd0 	bl	8001c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002078:	79fb      	ldrb	r3, [r7, #7]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002090:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <HAL_InitTick+0x6c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d023      	beq.n	80020e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002098:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_InitTick+0x70>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <HAL_InitTick+0x6c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f96d 	bl	800238e <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b0f      	cmp	r3, #15
 80020be:	d809      	bhi.n	80020d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c0:	2200      	movs	r2, #0
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f000 f937 	bl	800233a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020cc:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <HAL_InitTick+0x74>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e007      	b.n	80020e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e004      	b.n	80020e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	e001      	b.n	80020e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000014 	.word	0x20000014
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	20000010 	.word	0x20000010

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000014 	.word	0x20000014
 8002120:	20001350 	.word	0x20001350

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20001350 	.word	0x20001350

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000014 	.word	0x20000014

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	@ (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	@ (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	@ (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff29 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff3e 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff8e 	bl	8002278 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff31 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e148      	b.n	800264a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 813a 	beq.w	8002644 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d005      	beq.n	80023e8 <HAL_GPIO_Init+0x40>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d130      	bne.n	800244a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800241e:	2201      	movs	r2, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 0201 	and.w	r2, r3, #1
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b03      	cmp	r3, #3
 8002454:	d017      	beq.n	8002486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d123      	bne.n	80024da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	6939      	ldr	r1, [r7, #16]
 80024d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0203 	and.w	r2, r3, #3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8094 	beq.w	8002644 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251c:	4b52      	ldr	r3, [pc, #328]	@ (8002668 <HAL_GPIO_Init+0x2c0>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002520:	4a51      	ldr	r2, [pc, #324]	@ (8002668 <HAL_GPIO_Init+0x2c0>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6613      	str	r3, [r2, #96]	@ 0x60
 8002528:	4b4f      	ldr	r3, [pc, #316]	@ (8002668 <HAL_GPIO_Init+0x2c0>)
 800252a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002534:	4a4d      	ldr	r2, [pc, #308]	@ (800266c <HAL_GPIO_Init+0x2c4>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800255e:	d00d      	beq.n	800257c <HAL_GPIO_Init+0x1d4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a43      	ldr	r2, [pc, #268]	@ (8002670 <HAL_GPIO_Init+0x2c8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_Init+0x1d0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <HAL_GPIO_Init+0x2cc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_GPIO_Init+0x1cc>
 8002570:	2302      	movs	r3, #2
 8002572:	e004      	b.n	800257e <HAL_GPIO_Init+0x1d6>
 8002574:	2307      	movs	r3, #7
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x1d6>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_GPIO_Init+0x1d6>
 800257c:	2300      	movs	r3, #0
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	f002 0203 	and.w	r2, r2, #3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4093      	lsls	r3, r2
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800258e:	4937      	ldr	r1, [pc, #220]	@ (800266c <HAL_GPIO_Init+0x2c4>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800259c:	4b36      	ldr	r3, [pc, #216]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ea:	4a23      	ldr	r2, [pc, #140]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025f0:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002614:	4a18      	ldr	r2, [pc, #96]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800263e:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f aeaf 	bne.w	80023b8 <HAL_GPIO_Init+0x10>
  }
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000
 800266c:	40010000 	.word	0x40010000
 8002670:	48000400 	.word	0x48000400
 8002674:	48000800 	.word	0x48000800
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e001      	b.n	800269e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	041a      	lsls	r2, r3, #16
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43d9      	mvns	r1, r3
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	400b      	ands	r3, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <HAL_PWREx_GetVoltageRange+0x18>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000

0800272c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800273a:	d130      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800273c:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002748:	d038      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002752:	4a1e      	ldr	r2, [pc, #120]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800275a:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2232      	movs	r2, #50	@ 0x32
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	4a1b      	ldr	r2, [pc, #108]	@ (80027d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002770:	e002      	b.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3b01      	subs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002784:	d102      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f2      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002798:	d110      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e00f      	b.n	80027be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027aa:	d007      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027b4:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f000 bc02 	b.w	8002ff0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ec:	4b96      	ldr	r3, [pc, #600]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f6:	4b94      	ldr	r3, [pc, #592]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80e4 	beq.w	80029d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_RCC_OscConfig+0x4c>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	f040 808b 	bne.w	8002932 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 8087 	bne.w	8002932 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002824:	4b88      	ldr	r3, [pc, #544]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x64>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e3d9      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4b81      	ldr	r3, [pc, #516]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_RCC_OscConfig+0x7e>
 800284c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002854:	e005      	b.n	8002862 <HAL_RCC_OscConfig+0x8a>
 8002856:	4b7c      	ldr	r3, [pc, #496]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002862:	4293      	cmp	r3, r2
 8002864:	d223      	bcs.n	80028ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fd8c 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e3ba      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287a:	4b73      	ldr	r3, [pc, #460]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a72      	ldr	r2, [pc, #456]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b70      	ldr	r3, [pc, #448]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	496d      	ldr	r1, [pc, #436]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002898:	4b6b      	ldr	r3, [pc, #428]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	4968      	ldr	r1, [pc, #416]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
 80028ac:	e025      	b.n	80028fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ae:	4b66      	ldr	r3, [pc, #408]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a65      	ldr	r2, [pc, #404]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b63      	ldr	r3, [pc, #396]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4960      	ldr	r1, [pc, #384]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	495b      	ldr	r1, [pc, #364]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fd4c 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e37a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028fa:	f000 fc81 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b51      	ldr	r3, [pc, #324]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4950      	ldr	r1, [pc, #320]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a4e      	ldr	r2, [pc, #312]	@ (8002a50 <HAL_RCC_OscConfig+0x278>)
 8002918:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800291a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fbb0 	bl	8002084 <HAL_InitTick>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d052      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	e35e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d032      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800293a:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a42      	ldr	r2, [pc, #264]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002946:	f7ff fbed 	bl	8002124 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294e:	f7ff fbe9 	bl	8002124 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e347      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002960:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296c:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b33      	ldr	r3, [pc, #204]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4930      	ldr	r1, [pc, #192]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	492b      	ldr	r1, [pc, #172]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e01a      	b.n	80029d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a28      	ldr	r2, [pc, #160]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ac:	f7ff fbba 	bl	8002124 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b4:	f7ff fbb6 	bl	8002124 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e314      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1dc>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d073      	beq.n	8002aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_OscConfig+0x21c>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d10e      	bne.n	8002a0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d063      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d15f      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e2f1      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x24c>
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e025      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a2c:	d114      	bne.n	8002a58 <HAL_RCC_OscConfig+0x280>
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a02      	ldr	r2, [pc, #8]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	080091ec 	.word	0x080091ec
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	20000010 	.word	0x20000010
 8002a58:	4ba0      	ldr	r3, [pc, #640]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a9f      	ldr	r2, [pc, #636]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b9d      	ldr	r3, [pc, #628]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a9c      	ldr	r2, [pc, #624]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff fb54 	bl	8002124 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7ff fb50 	bl	8002124 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	@ 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e2ae      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	4b92      	ldr	r3, [pc, #584]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2a8>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff fb40 	bl	8002124 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fb3c 	bl	8002124 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e29a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aba:	4b88      	ldr	r3, [pc, #544]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d0>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d060      	beq.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x310>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d116      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	4b7c      	ldr	r3, [pc, #496]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x328>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e277      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b76      	ldr	r3, [pc, #472]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	4973      	ldr	r1, [pc, #460]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	e040      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d023      	beq.n	8002b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fafb 	bl	8002124 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff faf7 	bl	8002124 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e255      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b44:	4b65      	ldr	r3, [pc, #404]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b62      	ldr	r3, [pc, #392]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	495f      	ldr	r1, [pc, #380]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b5d      	ldr	r3, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7ff fad7 	bl	8002124 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff fad3 	bl	8002124 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e231      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8c:	4b53      	ldr	r3, [pc, #332]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff fab2 	bl	8002124 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff faae 	bl	8002124 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e20c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd6:	4b41      	ldr	r3, [pc, #260]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ef      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
 8002be4:	e01b      	b.n	8002c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bec:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7ff fa95 	bl	8002124 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7ff fa91 	bl	8002124 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1ef      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c10:	4b32      	ldr	r3, [pc, #200]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ef      	bne.n	8002bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80a6 	beq.w	8002d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c30:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b27      	ldr	r3, [pc, #156]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	4a26      	ldr	r2, [pc, #152]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c48:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d118      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c70:	f7ff fa58 	bl	8002124 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7ff fa54 	bl	8002124 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1b2      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d8>
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cae:	e029      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d115      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x50c>
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	4a07      	ldr	r2, [pc, #28]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cce:	4a03      	ldr	r2, [pc, #12]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	4a99      	ldr	r2, [pc, #612]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf4:	4b96      	ldr	r3, [pc, #600]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	4a95      	ldr	r2, [pc, #596]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7ff fa0a 	bl	8002124 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7ff fa06 	bl	8002124 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e162      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2a:	4b89      	ldr	r3, [pc, #548]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ed      	beq.n	8002d14 <HAL_RCC_OscConfig+0x53c>
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f9f3 	bl	8002124 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7ff f9ef 	bl	8002124 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e14b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d58:	4b7d      	ldr	r3, [pc, #500]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ed      	bne.n	8002d42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b78      	ldr	r3, [pc, #480]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	4a77      	ldr	r2, [pc, #476]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d03c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d8c:	4b70      	ldr	r3, [pc, #448]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d92:	4a6f      	ldr	r2, [pc, #444]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7ff f9c2 	bl	8002124 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da4:	f7ff f9be 	bl	8002124 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e11c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002db6:	4b66      	ldr	r3, [pc, #408]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <HAL_RCC_OscConfig+0x5cc>
 8002dc4:	e01b      	b.n	8002dfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dc6:	4b62      	ldr	r3, [pc, #392]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dcc:	4a60      	ldr	r2, [pc, #384]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7ff f9a5 	bl	8002124 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dde:	f7ff f9a1 	bl	8002124 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0ff      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df0:	4b57      	ldr	r3, [pc, #348]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ef      	bne.n	8002dde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80f3 	beq.w	8002fee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	f040 80c9 	bne.w	8002fa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e12:	4b4f      	ldr	r3, [pc, #316]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d12c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	3b01      	subs	r3, #1
 8002e32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d123      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d11b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d113      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d06b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d062      	beq.n	8002f4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e86:	4b32      	ldr	r3, [pc, #200]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0ac      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e96:	4b2e      	ldr	r3, [pc, #184]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ea0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea2:	f7ff f93f 	bl	8002124 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7ff f93b 	bl	8002124 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e099      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <HAL_RCC_OscConfig+0x77c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ee2:	0212      	lsls	r2, r2, #8
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0552      	lsls	r2, r2, #21
 8002ef0:	4311      	orrs	r1, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ef6:	0852      	lsrs	r2, r2, #1
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0652      	lsls	r2, r2, #25
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f02:	06d2      	lsls	r2, r2, #27
 8002f04:	430a      	orrs	r2, r1
 8002f06:	4912      	ldr	r1, [pc, #72]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0f      	ldr	r2, [pc, #60]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f18:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f24:	f7ff f8fe 	bl	8002124 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7ff f8fa 	bl	8002124 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e058      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f4a:	e050      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f58:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d144      	bne.n	8002fee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f64:	4b24      	ldr	r3, [pc, #144]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a23      	ldr	r2, [pc, #140]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f70:	4b21      	ldr	r3, [pc, #132]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a20      	ldr	r2, [pc, #128]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f7c:	f7ff f8d2 	bl	8002124 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff f8ce 	bl	8002124 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e02c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f96:	4b18      	ldr	r3, [pc, #96]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x7ac>
 8002fa2:	e024      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d01f      	beq.n	8002fea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7ff f8b5 	bl	8002124 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7ff f8b1 	bl	8002124 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	4905      	ldr	r1, [pc, #20]	@ (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_RCC_OscConfig+0x824>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
 8002fe8:	e001      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	feeefffc 	.word	0xfeeefffc

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0e7      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b75      	ldr	r3, [pc, #468]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b72      	ldr	r3, [pc, #456]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4970      	ldr	r1, [pc, #448]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b6e      	ldr	r3, [pc, #440]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0cf      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b66      	ldr	r3, [pc, #408]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800305c:	429a      	cmp	r2, r3
 800305e:	d908      	bls.n	8003072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b63      	ldr	r3, [pc, #396]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4960      	ldr	r1, [pc, #384]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04c      	beq.n	8003118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b5a      	ldr	r3, [pc, #360]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d121      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0a6      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309e:	4b54      	ldr	r3, [pc, #336]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e09a      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b6:	4b4e      	ldr	r3, [pc, #312]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e08e      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c6:	4b4a      	ldr	r3, [pc, #296]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e086      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b46      	ldr	r3, [pc, #280]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4943      	ldr	r1, [pc, #268]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7ff f81c 	bl	8002124 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7ff f818 	bl	8002124 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e06e      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b3a      	ldr	r3, [pc, #232]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003130:	429a      	cmp	r2, r3
 8003132:	d208      	bcs.n	8003146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b2e      	ldr	r3, [pc, #184]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	492b      	ldr	r1, [pc, #172]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003146:	4b29      	ldr	r3, [pc, #164]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d210      	bcs.n	8003176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	4923      	ldr	r1, [pc, #140]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003164:	4b21      	ldr	r3, [pc, #132]	@ (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e036      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003182:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4918      	ldr	r1, [pc, #96]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a0:	4b13      	ldr	r3, [pc, #76]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4910      	ldr	r1, [pc, #64]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b4:	f000 f824 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	490b      	ldr	r1, [pc, #44]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f4>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	4a09      	ldr	r2, [pc, #36]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f8>)
 80031d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031d4:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_RCC_ClockConfig+0x1fc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe ff53 	bl	8002084 <HAL_InitTick>
 80031de:	4603      	mov	r3, r0
 80031e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80031e2:	7afb      	ldrb	r3, [r7, #11]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40022000 	.word	0x40022000
 80031f0:	40021000 	.word	0x40021000
 80031f4:	080091ec 	.word	0x080091ec
 80031f8:	2000000c 	.word	0x2000000c
 80031fc:	20000010 	.word	0x20000010

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	@ 0x24
 8003204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320e:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003218:	4b3b      	ldr	r3, [pc, #236]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x34>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d121      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d11e      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003234:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003240:	4b31      	ldr	r3, [pc, #196]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e005      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003250:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800325c:	4a2b      	ldr	r2, [pc, #172]	@ (800330c <HAL_RCC_GetSysClockFreq+0x10c>)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d102      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003278:	4b25      	ldr	r3, [pc, #148]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x110>)
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e004      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d101      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003284:	4b23      	ldr	r3, [pc, #140]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x114>)
 8003286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d134      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d003      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0xac>
 80032a4:	e005      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x110>)
 80032a8:	617b      	str	r3, [r7, #20]
      break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ae:	617b      	str	r3, [r7, #20]
      break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	617b      	str	r3, [r7, #20]
      break;
 80032b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b8:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	3301      	adds	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	fb03 f202 	mul.w	r2, r3, r2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032de:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	0e5b      	lsrs	r3, r3, #25
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	3301      	adds	r3, #1
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032f8:	69bb      	ldr	r3, [r7, #24]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	@ 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	08009204 	.word	0x08009204
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000000c 	.word	0x2000000c

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4904      	ldr	r1, [pc, #16]	@ (8003358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	080091fc 	.word	0x080091fc

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003360:	f7ff ffda 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4904      	ldr	r1, [pc, #16]	@ (8003384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	080091fc 	.word	0x080091fc

08003388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003394:	4b2a      	ldr	r3, [pc, #168]	@ (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033a0:	f7ff f9b6 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 80033a4:	6178      	str	r0, [r7, #20]
 80033a6:	e014      	b.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b25      	ldr	r3, [pc, #148]	@ (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	4a24      	ldr	r2, [pc, #144]	@ (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b4:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033c0:	f7ff f9a6 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 80033c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d8:	d10b      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b80      	cmp	r3, #128	@ 0x80
 80033de:	d919      	bls.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80033e4:	d902      	bls.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e6:	2302      	movs	r3, #2
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e013      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033ec:	2301      	movs	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e010      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b80      	cmp	r3, #128	@ 0x80
 80033f6:	d902      	bls.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033f8:	2303      	movs	r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e00a      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b80      	cmp	r3, #128	@ 0x80
 8003402:	d102      	bne.n	800340a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003404:	2302      	movs	r3, #2
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e004      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b70      	cmp	r3, #112	@ 0x70
 800340e:	d101      	bne.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003410:	2301      	movs	r3, #1
 8003412:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 0207 	bic.w	r2, r3, #7
 800341c:	4909      	ldr	r1, [pc, #36]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003424:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	429a      	cmp	r2, r3
 8003430:	d001      	beq.n	8003436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	40022000 	.word	0x40022000

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003450:	2300      	movs	r3, #0
 8003452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003454:	2300      	movs	r3, #0
 8003456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003460:	2b00      	cmp	r3, #0
 8003462:	d031      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800346c:	d01a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800346e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003472:	d814      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003478:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800347c:	d10f      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800347e:	4b5d      	ldr	r3, [pc, #372]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a5c      	ldr	r2, [pc, #368]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348a:	e00c      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f9ce 	bl	8003834 <RCCEx_PLLSAI1_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	74fb      	strb	r3, [r7, #19]
      break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80034a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ac:	4b51      	ldr	r3, [pc, #324]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ba:	494e      	ldr	r1, [pc, #312]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034c2:	e001      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 809e 	beq.w	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034da:	4b46      	ldr	r3, [pc, #280]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f0:	4b40      	ldr	r3, [pc, #256]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	4a3f      	ldr	r2, [pc, #252]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fc:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003508:	2301      	movs	r3, #1
 800350a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350c:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a39      	ldr	r2, [pc, #228]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003518:	f7fe fe04 	bl	8002124 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351e:	e009      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe fe00 	bl	8002124 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d902      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	74fb      	strb	r3, [r7, #19]
        break;
 8003532:	e005      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003534:	4b30      	ldr	r3, [pc, #192]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ef      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d15a      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003546:	4b2b      	ldr	r3, [pc, #172]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01e      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	429a      	cmp	r2, r3
 8003560:	d019      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003562:	4b24      	ldr	r3, [pc, #144]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800356c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800356e:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003574:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800357e:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003584:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800358e:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fdc0 	bl	8002124 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a6:	e00b      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe fdbc 	bl	8002124 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d902      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	74fb      	strb	r3, [r7, #19]
            break;
 80035be:	e006      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ec      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d4:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e2:	4904      	ldr	r1, [pc, #16]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035ea:	e009      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
 80035f0:	e006      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003600:	7c7b      	ldrb	r3, [r7, #17]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b8a      	ldr	r3, [pc, #552]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	4a89      	ldr	r2, [pc, #548]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361e:	4b84      	ldr	r3, [pc, #528]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4980      	ldr	r1, [pc, #512]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003640:	4b7b      	ldr	r3, [pc, #492]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003646:	f023 020c 	bic.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	4978      	ldr	r1, [pc, #480]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003662:	4b73      	ldr	r3, [pc, #460]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	496f      	ldr	r1, [pc, #444]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003684:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003692:	4967      	ldr	r1, [pc, #412]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a6:	4b62      	ldr	r3, [pc, #392]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	495e      	ldr	r1, [pc, #376]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c8:	4b59      	ldr	r3, [pc, #356]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	4956      	ldr	r1, [pc, #344]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ea:	4b51      	ldr	r3, [pc, #324]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	494d      	ldr	r1, [pc, #308]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d028      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800370c:	4b48      	ldr	r3, [pc, #288]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	4945      	ldr	r1, [pc, #276]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372a:	d106      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b40      	ldr	r3, [pc, #256]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a3f      	ldr	r2, [pc, #252]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e011      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003742:	d10c      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f872 	bl	8003834 <RCCEx_PLLSAI1_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d028      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376a:	4b31      	ldr	r3, [pc, #196]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003770:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003778:	492d      	ldr	r1, [pc, #180]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003784:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003788:	d106      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378a:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4a28      	ldr	r2, [pc, #160]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003794:	60d3      	str	r3, [r2, #12]
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f843 	bl	8003834 <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01c      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d6:	4916      	ldr	r1, [pc, #88]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037e6:	d10c      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f820 	bl	8003834 <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800380e:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003814:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381c:	4904      	ldr	r1, [pc, #16]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003824:	7cbb      	ldrb	r3, [r7, #18]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000

08003834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003842:	4b74      	ldr	r3, [pc, #464]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800384e:	4b71      	ldr	r3, [pc, #452]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0203 	and.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d10d      	bne.n	800387a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
       ||
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003866:	4b6b      	ldr	r3, [pc, #428]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
       ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d047      	beq.n	800390a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e044      	b.n	800390a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d018      	beq.n	80038ba <RCCEx_PLLSAI1_Config+0x86>
 8003888:	2b03      	cmp	r3, #3
 800388a:	d825      	bhi.n	80038d8 <RCCEx_PLLSAI1_Config+0xa4>
 800388c:	2b01      	cmp	r3, #1
 800388e:	d002      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0x62>
 8003890:	2b02      	cmp	r3, #2
 8003892:	d009      	beq.n	80038a8 <RCCEx_PLLSAI1_Config+0x74>
 8003894:	e020      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003896:	4b5f      	ldr	r3, [pc, #380]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11d      	bne.n	80038de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a6:	e01a      	b.n	80038de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d116      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b8:	e013      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ba:	4b56      	ldr	r3, [pc, #344]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c6:	4b53      	ldr	r3, [pc, #332]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d6:	e006      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e004      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ee:	4b49      	ldr	r3, [pc, #292]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	430b      	orrs	r3, r1
 8003904:	4943      	ldr	r1, [pc, #268]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003906:	4313      	orrs	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d17c      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003910:	4b40      	ldr	r3, [pc, #256]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a3f      	ldr	r2, [pc, #252]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800391a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fe fc02 	bl	8002124 <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003922:	e009      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003924:	f7fe fbfe 	bl	8002124 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	73fb      	strb	r3, [r7, #15]
        break;
 8003936:	e005      	b.n	8003944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003938:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ef      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d15f      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d110      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003950:	4b30      	ldr	r3, [pc, #192]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003958:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6892      	ldr	r2, [r2, #8]
 8003960:	0211      	lsls	r1, r2, #8
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68d2      	ldr	r2, [r2, #12]
 8003966:	06d2      	lsls	r2, r2, #27
 8003968:	430a      	orrs	r2, r1
 800396a:	492a      	ldr	r1, [pc, #168]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800396c:	4313      	orrs	r3, r2
 800396e:	610b      	str	r3, [r1, #16]
 8003970:	e027      	b.n	80039c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d112      	bne.n	800399e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003978:	4b26      	ldr	r3, [pc, #152]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003980:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	0211      	lsls	r1, r2, #8
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6912      	ldr	r2, [r2, #16]
 800398e:	0852      	lsrs	r2, r2, #1
 8003990:	3a01      	subs	r2, #1
 8003992:	0552      	lsls	r2, r2, #21
 8003994:	430a      	orrs	r2, r1
 8003996:	491f      	ldr	r1, [pc, #124]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	610b      	str	r3, [r1, #16]
 800399c:	e011      	b.n	80039c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	0211      	lsls	r1, r2, #8
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6952      	ldr	r2, [r2, #20]
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0652      	lsls	r2, r2, #25
 80039ba:	430a      	orrs	r2, r1
 80039bc:	4915      	ldr	r1, [pc, #84]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fe fba9 	bl	8002124 <HAL_GetTick>
 80039d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d4:	e009      	b.n	80039ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d6:	f7fe fba5 	bl	8002124 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d902      	bls.n	80039ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	73fb      	strb	r3, [r7, #15]
          break;
 80039e8:	e005      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ef      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039fc:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	4903      	ldr	r1, [pc, #12]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e095      	b.n	8003b56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3a:	d009      	beq.n	8003a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
 8003a42:	e005      	b.n	8003a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe f8f8 	bl	8001c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a90:	d902      	bls.n	8003a98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e002      	b.n	8003a9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003aa6:	d007      	beq.n	8003ab8 <HAL_SPI_Init+0xa0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	ea42 0103 	orr.w	r1, r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	f003 0204 	and.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b088      	sub	sp, #32
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6e:	f7fe fad9 	bl	8002124 <HAL_GetTick>
 8003b72:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	e15c      	b.n	8003e42 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_SPI_Transmit+0x36>
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e154      	b.n	8003e42 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_Transmit+0x48>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e14d      	b.n	8003e42 <HAL_SPI_Transmit+0x2e4>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf8:	d10f      	bne.n	8003c1a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b40      	cmp	r3, #64	@ 0x40
 8003c26:	d007      	beq.n	8003c38 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c40:	d952      	bls.n	8003ce8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_SPI_Transmit+0xf2>
 8003c4a:	8b7b      	ldrh	r3, [r7, #26]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d145      	bne.n	8003cdc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c74:	e032      	b.n	8003cdc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d112      	bne.n	8003caa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c94:	1c9a      	adds	r2, r3, #2
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ca8:	e018      	b.n	8003cdc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003caa:	f7fe fa3b 	bl	8002124 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d803      	bhi.n	8003cc2 <HAL_SPI_Transmit+0x164>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d102      	bne.n	8003cc8 <HAL_SPI_Transmit+0x16a>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0b2      	b.n	8003e42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1c7      	bne.n	8003c76 <HAL_SPI_Transmit+0x118>
 8003ce6:	e083      	b.n	8003df0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_SPI_Transmit+0x198>
 8003cf0:	8b7b      	ldrh	r3, [r7, #26]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d177      	bne.n	8003de6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d912      	bls.n	8003d26 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b02      	subs	r3, #2
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d24:	e05f      	b.n	8003de6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d4c:	e04b      	b.n	8003de6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d12b      	bne.n	8003db4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d912      	bls.n	8003d8c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b02      	subs	r3, #2
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d8a:	e02c      	b.n	8003de6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	7812      	ldrb	r2, [r2, #0]
 8003d98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003db2:	e018      	b.n	8003de6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db4:	f7fe f9b6 	bl	8002124 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d803      	bhi.n	8003dcc <HAL_SPI_Transmit+0x26e>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d102      	bne.n	8003dd2 <HAL_SPI_Transmit+0x274>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e02d      	b.n	8003e42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ae      	bne.n	8003d4e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb65 	bl	80044c4 <SPI_EndRxTxTransaction>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b08a      	sub	sp, #40	@ 0x28
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e5c:	f7fe f962 	bl	8002124 <HAL_GetTick>
 8003e60:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e68:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e78:	7ffb      	ldrb	r3, [r7, #31]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d00c      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x4e>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e84:	d106      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x4a>
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d001      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
 8003e96:	e1f3      	b.n	8004280 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_SPI_TransmitReceive+0x60>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_SPI_TransmitReceive+0x60>
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1e8      	b.n	8004280 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x72>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e1e1      	b.n	8004280 <HAL_SPI_TransmitReceive+0x436>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d003      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2205      	movs	r2, #5
 8003ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	887a      	ldrh	r2, [r7, #2]
 8003efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f1a:	d802      	bhi.n	8003f22 <HAL_SPI_TransmitReceive+0xd8>
 8003f1c:	8abb      	ldrh	r3, [r7, #20]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d908      	bls.n	8003f34 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	e007      	b.n	8003f44 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d007      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f6a:	f240 8083 	bls.w	8004074 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x132>
 8003f76:	8afb      	ldrh	r3, [r7, #22]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d16f      	bne.n	800405c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f80:	881a      	ldrh	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	1c9a      	adds	r2, r3, #2
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa0:	e05c      	b.n	800405c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d11b      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x19e>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d016      	beq.n	8003fe8 <HAL_SPI_TransmitReceive+0x19e>
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d113      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	1c9a      	adds	r2, r3, #2
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d11c      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x1e6>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d016      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	b292      	uxth	r2, r2
 800400e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	1c9a      	adds	r2, r3, #2
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800402c:	2301      	movs	r3, #1
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004030:	f7fe f878 	bl	8002124 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403c:	429a      	cmp	r2, r3
 800403e:	d80d      	bhi.n	800405c <HAL_SPI_TransmitReceive+0x212>
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d009      	beq.n	800405c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e111      	b.n	8004280 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d19d      	bne.n	8003fa2 <HAL_SPI_TransmitReceive+0x158>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d197      	bne.n	8003fa2 <HAL_SPI_TransmitReceive+0x158>
 8004072:	e0e5      	b.n	8004240 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x23a>
 800407c:	8afb      	ldrh	r3, [r7, #22]
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 80d1 	bne.w	8004226 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d912      	bls.n	80040b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b02      	subs	r3, #2
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040b2:	e0b8      	b.n	8004226 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	7812      	ldrb	r2, [r2, #0]
 80040c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040da:	e0a4      	b.n	8004226 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d134      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x30a>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02f      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x30a>
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d12c      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d912      	bls.n	800412a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b02      	subs	r3, #2
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004128:	e012      	b.n	8004150 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d148      	bne.n	80041f4 <HAL_SPI_TransmitReceive+0x3aa>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d042      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d923      	bls.n	80041c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	b292      	uxth	r2, r2
 8004186:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b02      	subs	r3, #2
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d81f      	bhi.n	80041f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	e016      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f103 020c 	add.w	r2, r3, #12
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041f4:	f7fd ff96 	bl	8002124 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004200:	429a      	cmp	r2, r3
 8004202:	d803      	bhi.n	800420c <HAL_SPI_TransmitReceive+0x3c2>
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d102      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x3c8>
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e02c      	b.n	8004280 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f af55 	bne.w	80040dc <HAL_SPI_TransmitReceive+0x292>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	f47f af4e 	bne.w	80040dc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f93d 	bl	80044c4 <SPI_EndRxTxTransaction>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e00e      	b.n	8004280 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800427e:	2300      	movs	r3, #0
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3728      	adds	r7, #40	@ 0x28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004298:	f7fd ff44 	bl	8002124 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042a8:	f7fd ff3c 	bl	8002124 <HAL_GetTick>
 80042ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ae:	4b39      	ldr	r3, [pc, #228]	@ (8004394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	015b      	lsls	r3, r3, #5
 80042b4:	0d1b      	lsrs	r3, r3, #20
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042be:	e054      	b.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d050      	beq.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042c8:	f7fd ff2c 	bl	8002124 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d902      	bls.n	80042de <SPI_WaitFlagStateUntilTimeout+0x56>
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d13d      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042f6:	d111      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004300:	d004      	beq.n	800430c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430a:	d107      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800431a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004324:	d10f      	bne.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e017      	b.n	800438a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3b01      	subs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d19b      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	2000000c 	.word	0x2000000c

08004398 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	@ 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043aa:	f7fd febb 	bl	8002124 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	4413      	add	r3, r2
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80043ba:	f7fd feb3 	bl	8002124 <HAL_GetTick>
 80043be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043c8:	4b3d      	ldr	r3, [pc, #244]	@ (80044c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00da      	lsls	r2, r3, #3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	0d1b      	lsrs	r3, r3, #20
 80043d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043e0:	e060      	b.n	80044a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80043e8:	d107      	bne.n	80043fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d104      	bne.n	80043fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d050      	beq.n	80044a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004402:	f7fd fe8f 	bl	8002124 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440e:	429a      	cmp	r2, r3
 8004410:	d902      	bls.n	8004418 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d13d      	bne.n	8004494 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004426:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004430:	d111      	bne.n	8004456 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443a:	d004      	beq.n	8004446 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004444:	d107      	bne.n	8004456 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004454:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800445e:	d10f      	bne.n	8004480 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800447e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e010      	b.n	80044b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d196      	bne.n	80043e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3728      	adds	r7, #40	@ 0x28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff ff5b 	bl	8004398 <SPI_WaitFifoStateUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e027      	b.n	8004548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	@ 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff fec0 	bl	8004288 <SPI_WaitFlagStateUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e014      	b.n	8004548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff34 	bl	8004398 <SPI_WaitFifoStateUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e000      	b.n	8004548 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e049      	b.n	80045f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd fbb4 	bl	8001ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 fa82 	bl	8004a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e03b      	b.n	8004690 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a19      	ldr	r2, [pc, #100]	@ (800469c <HAL_TIM_Base_Start_IT+0x9c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_TIM_Base_Start_IT+0x4e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004642:	d004      	beq.n	800464e <HAL_TIM_Base_Start_IT+0x4e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a15      	ldr	r2, [pc, #84]	@ (80046a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d115      	bne.n	800467a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004656:	4013      	ands	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b06      	cmp	r3, #6
 800465e:	d015      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x8c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004666:	d011      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	e008      	b.n	800468c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e000      	b.n	800468e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40014000 	.word	0x40014000
 80046a4:	00010007 	.word	0x00010007

080046a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d020      	beq.n	800470c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0202 	mvn.w	r2, #2
 80046dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f9b2 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9a4 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f9b5 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d020      	beq.n	8004758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0204 	mvn.w	r2, #4
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f98c 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f97e 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f98f 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d020      	beq.n	80047a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01b      	beq.n	80047a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0208 	mvn.w	r2, #8
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2204      	movs	r2, #4
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f966 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f958 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f969 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d020      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01b      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2208      	movs	r2, #8
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f940 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f932 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f943 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0201 	mvn.w	r2, #1
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fd f958 	bl	8001ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800483a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 faa5 	bl	8004d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fa9d 	bl	8004da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00c      	beq.n	800488a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8fd 	bl	8004a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f06f 0220 	mvn.w	r2, #32
 80048a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa65 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_ConfigClockSource+0x1c>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e0b6      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x18a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490e:	d03e      	beq.n	800498e <HAL_TIM_ConfigClockSource+0xd8>
 8004910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004914:	f200 8087 	bhi.w	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800491c:	f000 8086 	beq.w	8004a2c <HAL_TIM_ConfigClockSource+0x176>
 8004920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004924:	d87f      	bhi.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 8004926:	2b70      	cmp	r3, #112	@ 0x70
 8004928:	d01a      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0xaa>
 800492a:	2b70      	cmp	r3, #112	@ 0x70
 800492c:	d87b      	bhi.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 800492e:	2b60      	cmp	r3, #96	@ 0x60
 8004930:	d050      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0x11e>
 8004932:	2b60      	cmp	r3, #96	@ 0x60
 8004934:	d877      	bhi.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 8004936:	2b50      	cmp	r3, #80	@ 0x50
 8004938:	d03c      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0xfe>
 800493a:	2b50      	cmp	r3, #80	@ 0x50
 800493c:	d873      	bhi.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d058      	beq.n	80049f4 <HAL_TIM_ConfigClockSource+0x13e>
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	d86f      	bhi.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 8004946:	2b30      	cmp	r3, #48	@ 0x30
 8004948:	d064      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x15e>
 800494a:	2b30      	cmp	r3, #48	@ 0x30
 800494c:	d86b      	bhi.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 800494e:	2b20      	cmp	r3, #32
 8004950:	d060      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x15e>
 8004952:	2b20      	cmp	r3, #32
 8004954:	d867      	bhi.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d05c      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x15e>
 800495a:	2b10      	cmp	r3, #16
 800495c:	d05a      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x15e>
 800495e:	e062      	b.n	8004a26 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004970:	f000 f97c 	bl	8004c6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004982:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
      break;
 800498c:	e04f      	b.n	8004a2e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800499e:	f000 f965 	bl	8004c6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049b0:	609a      	str	r2, [r3, #8]
      break;
 80049b2:	e03c      	b.n	8004a2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c0:	461a      	mov	r2, r3
 80049c2:	f000 f8d9 	bl	8004b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2150      	movs	r1, #80	@ 0x50
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f932 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 80049d2:	e02c      	b.n	8004a2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e0:	461a      	mov	r2, r3
 80049e2:	f000 f8f8 	bl	8004bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2160      	movs	r1, #96	@ 0x60
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 f922 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 80049f2:	e01c      	b.n	8004a2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a00:	461a      	mov	r2, r3
 8004a02:	f000 f8b9 	bl	8004b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2140      	movs	r1, #64	@ 0x40
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f912 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 8004a12:	e00c      	b.n	8004a2e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 f909 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 8004a24:	e003      	b.n	8004a2e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a30      	ldr	r2, [pc, #192]	@ (8004b6c <TIM_Base_SetConfig+0xd4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0x20>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab6:	d108      	bne.n	8004aca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a27      	ldr	r2, [pc, #156]	@ (8004b6c <TIM_Base_SetConfig+0xd4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <TIM_Base_SetConfig+0x52>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad8:	d007      	beq.n	8004aea <TIM_Base_SetConfig+0x52>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a24      	ldr	r2, [pc, #144]	@ (8004b70 <TIM_Base_SetConfig+0xd8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_Base_SetConfig+0x52>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <TIM_Base_SetConfig+0xdc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <TIM_Base_SetConfig+0xd4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0xa0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a11      	ldr	r2, [pc, #68]	@ (8004b70 <TIM_Base_SetConfig+0xd8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0xa0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a10      	ldr	r2, [pc, #64]	@ (8004b74 <TIM_Base_SetConfig+0xdc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d103      	bne.n	8004b40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d105      	bne.n	8004b5e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f023 0201 	bic.w	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	611a      	str	r2, [r3, #16]
  }
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40014400 	.word	0x40014400

08004b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0201 	bic.w	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 030a 	bic.w	r3, r3, #10
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f023 0210 	bic.w	r2, r3, #16
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	031b      	lsls	r3, r3, #12
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f043 0307 	orr.w	r3, r3, #7
 8004c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	021a      	lsls	r2, r3, #8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e04f      	b.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a21      	ldr	r2, [pc, #132]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d108      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a14      	ldr	r2, [pc, #80]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2c:	d004      	beq.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a10      	ldr	r2, [pc, #64]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10c      	bne.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40014000 	.word	0x40014000

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e040      	b.n	8004e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc ffa8 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	@ 0x24
 8004de0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fade 	bl	80053bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f8af 	bl	8004f64 <UART_SetConfig>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01b      	b.n	8004e48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb5d 	bl	8005500 <UART_CheckIdleState>
 8004e46:	4603      	mov	r3, r0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	@ 0x28
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d177      	bne.n	8004f58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_UART_Transmit+0x24>
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e070      	b.n	8004f5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2221      	movs	r2, #33	@ 0x21
 8004e84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e86:	f7fd f94d 	bl	8002124 <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_UART_Transmit+0x68>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e003      	b.n	8004ec0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec0:	e02f      	b.n	8004f22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	@ 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fbbf 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e03b      	b.n	8004f5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	881a      	ldrh	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	3302      	adds	r3, #2
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e007      	b.n	8004f10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1c9      	bne.n	8004ec2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2140      	movs	r1, #64	@ 0x40
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fb89 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e005      	b.n	8004f5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b08a      	sub	sp, #40	@ 0x28
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4bb4      	ldr	r3, [pc, #720]	@ (8005264 <UART_SetConfig+0x300>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4aa9      	ldr	r2, [pc, #676]	@ (8005268 <UART_SetConfig+0x304>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4aa0      	ldr	r2, [pc, #640]	@ (800526c <UART_SetConfig+0x308>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d126      	bne.n	800503c <UART_SetConfig+0xd8>
 8004fee:	4ba0      	ldr	r3, [pc, #640]	@ (8005270 <UART_SetConfig+0x30c>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d81b      	bhi.n	8005034 <UART_SetConfig+0xd0>
 8004ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <UART_SetConfig+0xa0>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005015 	.word	0x08005015
 8005008:	08005025 	.word	0x08005025
 800500c:	0800501d 	.word	0x0800501d
 8005010:	0800502d 	.word	0x0800502d
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501a:	e080      	b.n	800511e <UART_SetConfig+0x1ba>
 800501c:	2302      	movs	r3, #2
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e07c      	b.n	800511e <UART_SetConfig+0x1ba>
 8005024:	2304      	movs	r3, #4
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e078      	b.n	800511e <UART_SetConfig+0x1ba>
 800502c:	2308      	movs	r3, #8
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e074      	b.n	800511e <UART_SetConfig+0x1ba>
 8005034:	2310      	movs	r3, #16
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e070      	b.n	800511e <UART_SetConfig+0x1ba>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a8c      	ldr	r2, [pc, #560]	@ (8005274 <UART_SetConfig+0x310>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d138      	bne.n	80050b8 <UART_SetConfig+0x154>
 8005046:	4b8a      	ldr	r3, [pc, #552]	@ (8005270 <UART_SetConfig+0x30c>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d82d      	bhi.n	80050b0 <UART_SetConfig+0x14c>
 8005054:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <UART_SetConfig+0xf8>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005091 	.word	0x08005091
 8005060:	080050b1 	.word	0x080050b1
 8005064:	080050b1 	.word	0x080050b1
 8005068:	080050b1 	.word	0x080050b1
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080050b1 	.word	0x080050b1
 8005074:	080050b1 	.word	0x080050b1
 8005078:	080050b1 	.word	0x080050b1
 800507c:	08005099 	.word	0x08005099
 8005080:	080050b1 	.word	0x080050b1
 8005084:	080050b1 	.word	0x080050b1
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050a9 	.word	0x080050a9
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005096:	e042      	b.n	800511e <UART_SetConfig+0x1ba>
 8005098:	2302      	movs	r3, #2
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e03e      	b.n	800511e <UART_SetConfig+0x1ba>
 80050a0:	2304      	movs	r3, #4
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e03a      	b.n	800511e <UART_SetConfig+0x1ba>
 80050a8:	2308      	movs	r3, #8
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e036      	b.n	800511e <UART_SetConfig+0x1ba>
 80050b0:	2310      	movs	r3, #16
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e032      	b.n	800511e <UART_SetConfig+0x1ba>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6a      	ldr	r2, [pc, #424]	@ (8005268 <UART_SetConfig+0x304>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d12a      	bne.n	8005118 <UART_SetConfig+0x1b4>
 80050c2:	4b6b      	ldr	r3, [pc, #428]	@ (8005270 <UART_SetConfig+0x30c>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d0:	d01a      	beq.n	8005108 <UART_SetConfig+0x1a4>
 80050d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d6:	d81b      	bhi.n	8005110 <UART_SetConfig+0x1ac>
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050dc:	d00c      	beq.n	80050f8 <UART_SetConfig+0x194>
 80050de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e2:	d815      	bhi.n	8005110 <UART_SetConfig+0x1ac>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <UART_SetConfig+0x18c>
 80050e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ec:	d008      	beq.n	8005100 <UART_SetConfig+0x19c>
 80050ee:	e00f      	b.n	8005110 <UART_SetConfig+0x1ac>
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f6:	e012      	b.n	800511e <UART_SetConfig+0x1ba>
 80050f8:	2302      	movs	r3, #2
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fe:	e00e      	b.n	800511e <UART_SetConfig+0x1ba>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005106:	e00a      	b.n	800511e <UART_SetConfig+0x1ba>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510e:	e006      	b.n	800511e <UART_SetConfig+0x1ba>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005116:	e002      	b.n	800511e <UART_SetConfig+0x1ba>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a51      	ldr	r2, [pc, #324]	@ (8005268 <UART_SetConfig+0x304>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d17a      	bne.n	800521e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800512c:	2b08      	cmp	r3, #8
 800512e:	d824      	bhi.n	800517a <UART_SetConfig+0x216>
 8005130:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <UART_SetConfig+0x1d4>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800515d 	.word	0x0800515d
 800513c:	0800517b 	.word	0x0800517b
 8005140:	08005165 	.word	0x08005165
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800516b 	.word	0x0800516b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	0800517b 	.word	0x0800517b
 8005154:	0800517b 	.word	0x0800517b
 8005158:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fe f8e8 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8005160:	61f8      	str	r0, [r7, #28]
        break;
 8005162:	e010      	b.n	8005186 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b44      	ldr	r3, [pc, #272]	@ (8005278 <UART_SetConfig+0x314>)
 8005166:	61fb      	str	r3, [r7, #28]
        break;
 8005168:	e00d      	b.n	8005186 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fe f849 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800516e:	61f8      	str	r0, [r7, #28]
        break;
 8005170:	e009      	b.n	8005186 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005176:	61fb      	str	r3, [r7, #28]
        break;
 8005178:	e005      	b.n	8005186 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005184:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8107 	beq.w	800539c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	429a      	cmp	r2, r3
 800519c:	d305      	bcc.n	80051aa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051b0:	e0f4      	b.n	800539c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2200      	movs	r2, #0
 80051b6:	461c      	mov	r4, r3
 80051b8:	4615      	mov	r5, r2
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	022b      	lsls	r3, r5, #8
 80051c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051c8:	0222      	lsls	r2, r4, #8
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	6849      	ldr	r1, [r1, #4]
 80051ce:	0849      	lsrs	r1, r1, #1
 80051d0:	2000      	movs	r0, #0
 80051d2:	4688      	mov	r8, r1
 80051d4:	4681      	mov	r9, r0
 80051d6:	eb12 0a08 	adds.w	sl, r2, r8
 80051da:	eb43 0b09 	adc.w	fp, r3, r9
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ec:	4650      	mov	r0, sl
 80051ee:	4659      	mov	r1, fp
 80051f0:	f7fb fcda 	bl	8000ba8 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4613      	mov	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005202:	d308      	bcc.n	8005216 <UART_SetConfig+0x2b2>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800520a:	d204      	bcs.n	8005216 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	60da      	str	r2, [r3, #12]
 8005214:	e0c2      	b.n	800539c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800521c:	e0be      	b.n	800539c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005226:	d16a      	bne.n	80052fe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800522c:	2b08      	cmp	r3, #8
 800522e:	d834      	bhi.n	800529a <UART_SetConfig+0x336>
 8005230:	a201      	add	r2, pc, #4	@ (adr r2, 8005238 <UART_SetConfig+0x2d4>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	0800525d 	.word	0x0800525d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	08005285 	.word	0x08005285
 8005244:	0800529b 	.word	0x0800529b
 8005248:	0800528b 	.word	0x0800528b
 800524c:	0800529b 	.word	0x0800529b
 8005250:	0800529b 	.word	0x0800529b
 8005254:	0800529b 	.word	0x0800529b
 8005258:	08005293 	.word	0x08005293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800525c:	f7fe f868 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8005260:	61f8      	str	r0, [r7, #28]
        break;
 8005262:	e020      	b.n	80052a6 <UART_SetConfig+0x342>
 8005264:	efff69f3 	.word	0xefff69f3
 8005268:	40008000 	.word	0x40008000
 800526c:	40013800 	.word	0x40013800
 8005270:	40021000 	.word	0x40021000
 8005274:	40004400 	.word	0x40004400
 8005278:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7fe f86e 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8005280:	61f8      	str	r0, [r7, #28]
        break;
 8005282:	e010      	b.n	80052a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005284:	4b4c      	ldr	r3, [pc, #304]	@ (80053b8 <UART_SetConfig+0x454>)
 8005286:	61fb      	str	r3, [r7, #28]
        break;
 8005288:	e00d      	b.n	80052a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528a:	f7fd ffb9 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800528e:	61f8      	str	r0, [r7, #28]
        break;
 8005290:	e009      	b.n	80052a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005296:	61fb      	str	r3, [r7, #28]
        break;
 8005298:	e005      	b.n	80052a6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d077      	beq.n	800539c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	005a      	lsls	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	441a      	add	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b0f      	cmp	r3, #15
 80052c6:	d916      	bls.n	80052f6 <UART_SetConfig+0x392>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ce:	d212      	bcs.n	80052f6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f023 030f 	bic.w	r3, r3, #15
 80052d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	8afb      	ldrh	r3, [r7, #22]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	8afa      	ldrh	r2, [r7, #22]
 80052f2:	60da      	str	r2, [r3, #12]
 80052f4:	e052      	b.n	800539c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052fc:	e04e      	b.n	800539c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005302:	2b08      	cmp	r3, #8
 8005304:	d827      	bhi.n	8005356 <UART_SetConfig+0x3f2>
 8005306:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <UART_SetConfig+0x3a8>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005331 	.word	0x08005331
 8005310:	08005339 	.word	0x08005339
 8005314:	08005341 	.word	0x08005341
 8005318:	08005357 	.word	0x08005357
 800531c:	08005347 	.word	0x08005347
 8005320:	08005357 	.word	0x08005357
 8005324:	08005357 	.word	0x08005357
 8005328:	08005357 	.word	0x08005357
 800532c:	0800534f 	.word	0x0800534f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005330:	f7fd fffe 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8005334:	61f8      	str	r0, [r7, #28]
        break;
 8005336:	e014      	b.n	8005362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005338:	f7fe f810 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 800533c:	61f8      	str	r0, [r7, #28]
        break;
 800533e:	e010      	b.n	8005362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005340:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <UART_SetConfig+0x454>)
 8005342:	61fb      	str	r3, [r7, #28]
        break;
 8005344:	e00d      	b.n	8005362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005346:	f7fd ff5b 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800534a:	61f8      	str	r0, [r7, #28]
        break;
 800534c:	e009      	b.n	8005362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005352:	61fb      	str	r3, [r7, #28]
        break;
 8005354:	e005      	b.n	8005362 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005360:	bf00      	nop
    }

    if (pclk != 0U)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d019      	beq.n	800539c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	085a      	lsrs	r2, r3, #1
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	441a      	add	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b0f      	cmp	r3, #15
 8005380:	d909      	bls.n	8005396 <UART_SetConfig+0x432>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005388:	d205      	bcs.n	8005396 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e002      	b.n	800539c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3728      	adds	r7, #40	@ 0x28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b6:	bf00      	nop
 80053b8:	00f42400 	.word	0x00f42400

080053bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ba:	d10a      	bne.n	80054d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b098      	sub	sp, #96	@ 0x60
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005510:	f7fc fe08 	bl	8002124 <HAL_GetTick>
 8005514:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d12e      	bne.n	8005582 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005524:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552c:	2200      	movs	r2, #0
 800552e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f88c 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d021      	beq.n	8005582 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800554c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005552:	653b      	str	r3, [r7, #80]	@ 0x50
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800555c:	647b      	str	r3, [r7, #68]	@ 0x44
 800555e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e6      	bne.n	800553e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e062      	b.n	8005648 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d149      	bne.n	8005624 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f856 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03c      	beq.n	8005624 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	623b      	str	r3, [r7, #32]
   return(result);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3308      	adds	r3, #8
 80055fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055fc:	61fa      	str	r2, [r7, #28]
 80055fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	617b      	str	r3, [r7, #20]
   return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e5      	bne.n	80055dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e011      	b.n	8005648 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3758      	adds	r7, #88	@ 0x58
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005660:	e04f      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d04b      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fc fd5b 	bl	8002124 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <UART_WaitOnFlagUntilTimeout+0x30>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e04e      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d037      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b80      	cmp	r3, #128	@ 0x80
 8005696:	d034      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	d031      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d110      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2208      	movs	r2, #8
 80056b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f838 	bl	800572a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2208      	movs	r2, #8
 80056be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e029      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056dc:	d111      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f81e 	bl	800572a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e00f      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	429a      	cmp	r2, r3
 800571e:	d0a0      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800572a:	b480      	push	{r7}
 800572c:	b095      	sub	sp, #84	@ 0x54
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005750:	643b      	str	r3, [r7, #64]	@ 0x40
 8005752:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e6      	bne.n	8005732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	61fb      	str	r3, [r7, #28]
   return(result);
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e5      	bne.n	8005764 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579c:	2b01      	cmp	r3, #1
 800579e:	d118      	bne.n	80057d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057e6:	bf00      	nop
 80057e8:	3754      	adds	r7, #84	@ 0x54
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <arm_cfft_radix8by2_f32>:
 80057f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	ed2d 8b08 	vpush	{d8-d11}
 80057fc:	4607      	mov	r7, r0
 80057fe:	4608      	mov	r0, r1
 8005800:	f8b7 c000 	ldrh.w	ip, [r7]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800580a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800580e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005812:	f000 80b0 	beq.w	8005976 <arm_cfft_radix8by2_f32+0x182>
 8005816:	008c      	lsls	r4, r1, #2
 8005818:	3410      	adds	r4, #16
 800581a:	f100 0310 	add.w	r3, r0, #16
 800581e:	1906      	adds	r6, r0, r4
 8005820:	3210      	adds	r2, #16
 8005822:	4444      	add	r4, r8
 8005824:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005828:	f108 0510 	add.w	r5, r8, #16
 800582c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8005830:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005834:	ed54 4a04 	vldr	s9, [r4, #-16]
 8005838:	ed14 4a03 	vldr	s8, [r4, #-12]
 800583c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005840:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005844:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005848:	ed15 0a02 	vldr	s0, [r5, #-8]
 800584c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8005850:	ed56 6a04 	vldr	s13, [r6, #-16]
 8005854:	ed16 3a03 	vldr	s6, [r6, #-12]
 8005858:	ed13 7a03 	vldr	s14, [r3, #-12]
 800585c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8005860:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005864:	ed16 1a02 	vldr	s2, [r6, #-8]
 8005868:	ed56 1a01 	vldr	s3, [r6, #-4]
 800586c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8005870:	ee37 ba22 	vadd.f32	s22, s14, s5
 8005874:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8005878:	ee33 9a04 	vadd.f32	s18, s6, s8
 800587c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8005880:	ee75 aa00 	vadd.f32	s21, s10, s0
 8005884:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8005888:	ee71 8a06 	vadd.f32	s17, s2, s12
 800588c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8005890:	ed03 ba03 	vstr	s22, [r3, #-12]
 8005894:	ed43 aa02 	vstr	s21, [r3, #-8]
 8005898:	ed03 aa01 	vstr	s20, [r3, #-4]
 800589c:	ed06 8a01 	vstr	s16, [r6, #-4]
 80058a0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80058a4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80058a8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80058ac:	ee37 7a62 	vsub.f32	s14, s14, s5
 80058b0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80058b4:	ee34 4a43 	vsub.f32	s8, s8, s6
 80058b8:	ed52 6a03 	vldr	s13, [r2, #-12]
 80058bc:	ed12 3a04 	vldr	s6, [r2, #-16]
 80058c0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80058c4:	ee27 8a26 	vmul.f32	s16, s14, s13
 80058c8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80058cc:	ee23 2a83 	vmul.f32	s4, s7, s6
 80058d0:	ee64 4a83 	vmul.f32	s9, s9, s6
 80058d4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80058d8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80058dc:	ee64 6a26 	vmul.f32	s13, s8, s13
 80058e0:	ee24 4a03 	vmul.f32	s8, s8, s6
 80058e4:	ee37 7a63 	vsub.f32	s14, s14, s7
 80058e8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80058ec:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80058f0:	ee32 3a08 	vadd.f32	s6, s4, s16
 80058f4:	ed05 7a03 	vstr	s14, [r5, #-12]
 80058f8:	ed05 3a04 	vstr	s6, [r5, #-16]
 80058fc:	ed04 4a04 	vstr	s8, [r4, #-16]
 8005900:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005904:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005908:	ee76 6a41 	vsub.f32	s13, s12, s2
 800590c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8005910:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8005914:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005918:	ed52 5a02 	vldr	s11, [r2, #-8]
 800591c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005920:	ee66 4a87 	vmul.f32	s9, s13, s14
 8005924:	ee25 4a25 	vmul.f32	s8, s10, s11
 8005928:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800592c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005930:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005934:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005938:	ee26 6a25 	vmul.f32	s12, s12, s11
 800593c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005940:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005944:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8005948:	ee37 7a26 	vadd.f32	s14, s14, s13
 800594c:	3310      	adds	r3, #16
 800594e:	4563      	cmp	r3, ip
 8005950:	ed45 5a02 	vstr	s11, [r5, #-8]
 8005954:	f106 0610 	add.w	r6, r6, #16
 8005958:	ed45 7a01 	vstr	s15, [r5, #-4]
 800595c:	f102 0210 	add.w	r2, r2, #16
 8005960:	ed04 6a02 	vstr	s12, [r4, #-8]
 8005964:	ed04 7a01 	vstr	s14, [r4, #-4]
 8005968:	f105 0510 	add.w	r5, r5, #16
 800596c:	f104 0410 	add.w	r4, r4, #16
 8005970:	f47f af5c 	bne.w	800582c <arm_cfft_radix8by2_f32+0x38>
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	b28c      	uxth	r4, r1
 8005978:	4621      	mov	r1, r4
 800597a:	2302      	movs	r3, #2
 800597c:	f000 faf8 	bl	8005f70 <arm_radix8_butterfly_f32>
 8005980:	ecbd 8b08 	vpop	{d8-d11}
 8005984:	4621      	mov	r1, r4
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4640      	mov	r0, r8
 800598a:	2302      	movs	r3, #2
 800598c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005990:	f000 baee 	b.w	8005f70 <arm_radix8_butterfly_f32>

08005994 <arm_cfft_radix8by4_f32>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	ed2d 8b0a 	vpush	{d8-d12}
 800599c:	b08d      	sub	sp, #52	@ 0x34
 800599e:	460d      	mov	r5, r1
 80059a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80059a2:	8801      	ldrh	r1, [r0, #0]
 80059a4:	6842      	ldr	r2, [r0, #4]
 80059a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80059a8:	0849      	lsrs	r1, r1, #1
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	18ee      	adds	r6, r5, r3
 80059ae:	18f0      	adds	r0, r6, r3
 80059b0:	edd0 5a00 	vldr	s11, [r0]
 80059b4:	edd5 7a00 	vldr	s15, [r5]
 80059b8:	ed96 7a00 	vldr	s14, [r6]
 80059bc:	edd0 3a01 	vldr	s7, [r0, #4]
 80059c0:	ed96 4a01 	vldr	s8, [r6, #4]
 80059c4:	ed95 5a01 	vldr	s10, [r5, #4]
 80059c8:	9008      	str	r0, [sp, #32]
 80059ca:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80059ce:	18c7      	adds	r7, r0, r3
 80059d0:	edd7 4a00 	vldr	s9, [r7]
 80059d4:	ed97 3a01 	vldr	s6, [r7, #4]
 80059d8:	9701      	str	r7, [sp, #4]
 80059da:	ee77 6a06 	vadd.f32	s13, s14, s12
 80059de:	462c      	mov	r4, r5
 80059e0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80059e4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80059e8:	ee16 ca90 	vmov	ip, s13
 80059ec:	f844 cb08 	str.w	ip, [r4], #8
 80059f0:	ee75 6a23 	vadd.f32	s13, s10, s7
 80059f4:	edd6 5a01 	vldr	s11, [r6, #4]
 80059f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80059fc:	9404      	str	r4, [sp, #16]
 80059fe:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005a02:	ee74 3a27 	vadd.f32	s7, s8, s15
 8005a06:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005a0a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8005a0e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005a12:	0849      	lsrs	r1, r1, #1
 8005a14:	f102 0e08 	add.w	lr, r2, #8
 8005a18:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005a1c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005a20:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a22:	ee35 4a47 	vsub.f32	s8, s10, s14
 8005a26:	f1a1 0902 	sub.w	r9, r1, #2
 8005a2a:	f8cd e00c 	str.w	lr, [sp, #12]
 8005a2e:	4631      	mov	r1, r6
 8005a30:	ee13 ea90 	vmov	lr, s7
 8005a34:	ee36 6a64 	vsub.f32	s12, s12, s9
 8005a38:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	edc5 5a01 	vstr	s11, [r5, #4]
 8005a42:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005a46:	f841 eb08 	str.w	lr, [r1], #8
 8005a4a:	ee34 5a24 	vadd.f32	s10, s8, s9
 8005a4e:	ee16 ea10 	vmov	lr, s12
 8005a52:	ed86 5a01 	vstr	s10, [r6, #4]
 8005a56:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005a5a:	f844 eb08 	str.w	lr, [r4], #8
 8005a5e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005a62:	edc0 6a01 	vstr	s13, [r0, #4]
 8005a66:	9405      	str	r4, [sp, #20]
 8005a68:	4604      	mov	r4, r0
 8005a6a:	ee17 0a90 	vmov	r0, s15
 8005a6e:	9106      	str	r1, [sp, #24]
 8005a70:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005a74:	f102 0110 	add.w	r1, r2, #16
 8005a78:	46bc      	mov	ip, r7
 8005a7a:	9100      	str	r1, [sp, #0]
 8005a7c:	f847 0b08 	str.w	r0, [r7], #8
 8005a80:	f102 0118 	add.w	r1, r2, #24
 8005a84:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8005a88:	9102      	str	r1, [sp, #8]
 8005a8a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005a8e:	9007      	str	r0, [sp, #28]
 8005a90:	f000 8134 	beq.w	8005cfc <arm_cfft_radix8by4_f32+0x368>
 8005a94:	f102 0920 	add.w	r9, r2, #32
 8005a98:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8005a9c:	9a01      	ldr	r2, [sp, #4]
 8005a9e:	f8dd a000 	ldr.w	sl, [sp]
 8005aa2:	3b0c      	subs	r3, #12
 8005aa4:	4683      	mov	fp, r0
 8005aa6:	4463      	add	r3, ip
 8005aa8:	f105 0e10 	add.w	lr, r5, #16
 8005aac:	f1a4 010c 	sub.w	r1, r4, #12
 8005ab0:	f104 0510 	add.w	r5, r4, #16
 8005ab4:	f1a6 0c0c 	sub.w	ip, r6, #12
 8005ab8:	f1a2 040c 	sub.w	r4, r2, #12
 8005abc:	f106 0010 	add.w	r0, r6, #16
 8005ac0:	3210      	adds	r2, #16
 8005ac2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8005ac6:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005aca:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005ace:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005ad2:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005ad6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8005ada:	ed12 1a01 	vldr	s2, [r2, #-4]
 8005ade:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005ae2:	ee35 4a25 	vadd.f32	s8, s10, s11
 8005ae6:	ee30 6a26 	vadd.f32	s12, s0, s13
 8005aea:	ee37 7a84 	vadd.f32	s14, s15, s8
 8005aee:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005af2:	ee37 7a21 	vadd.f32	s14, s14, s3
 8005af6:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005afa:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8005afe:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005b02:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005b06:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005b0a:	ee78 aa25 	vadd.f32	s21, s16, s11
 8005b0e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b12:	ee70 3a67 	vsub.f32	s7, s0, s15
 8005b16:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8005b1a:	ed94 7a02 	vldr	s14, [r4, #8]
 8005b1e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8005b22:	ed91 ba02 	vldr	s22, [r1, #8]
 8005b26:	edd3 9a02 	vldr	s19, [r3, #8]
 8005b2a:	edd4 2a01 	vldr	s5, [r4, #4]
 8005b2e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8005b32:	ed93 5a01 	vldr	s10, [r3, #4]
 8005b36:	edd1 0a01 	vldr	s1, [r1, #4]
 8005b3a:	ee72 6a07 	vadd.f32	s13, s4, s14
 8005b3e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8005b42:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8005b46:	ee79 4a22 	vadd.f32	s9, s18, s5
 8005b4a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8005b4e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8005b52:	ed8c 7a02 	vstr	s14, [ip, #8]
 8005b56:	ed91 7a01 	vldr	s14, [r1, #4]
 8005b5a:	edd3 8a01 	vldr	s17, [r3, #4]
 8005b5e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8005b62:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8005b66:	ee37 7a28 	vadd.f32	s14, s14, s17
 8005b6a:	ee32 9a60 	vsub.f32	s18, s4, s1
 8005b6e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005b72:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8005b76:	ed1a aa02 	vldr	s20, [sl, #-8]
 8005b7a:	ee73 8a22 	vadd.f32	s17, s6, s5
 8005b7e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8005b82:	ee7a aac1 	vsub.f32	s21, s21, s2
 8005b86:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8005b8a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8005b8e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8005b92:	ee6a aa87 	vmul.f32	s21, s21, s14
 8005b96:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8005b9a:	ee63 ca87 	vmul.f32	s25, s7, s14
 8005b9e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8005ba2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8005ba6:	ee68 8a87 	vmul.f32	s17, s17, s14
 8005baa:	ee73 3aea 	vsub.f32	s7, s7, s21
 8005bae:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005bb2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8005bb6:	ee3b aaca 	vsub.f32	s20, s23, s20
 8005bba:	ee34 4a67 	vsub.f32	s8, s8, s15
 8005bbe:	ee76 6acb 	vsub.f32	s13, s13, s22
 8005bc2:	ee36 6a48 	vsub.f32	s12, s12, s16
 8005bc6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8005bca:	ed00 7a02 	vstr	s14, [r0, #-8]
 8005bce:	ed40 3a01 	vstr	s7, [r0, #-4]
 8005bd2:	edc1 8a01 	vstr	s17, [r1, #4]
 8005bd6:	ed81 aa02 	vstr	s20, [r1, #8]
 8005bda:	ed59 3a04 	vldr	s7, [r9, #-16]
 8005bde:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8005be2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8005be6:	ed59 6a03 	vldr	s13, [r9, #-12]
 8005bea:	ee34 4a61 	vsub.f32	s8, s8, s3
 8005bee:	ee36 6a41 	vsub.f32	s12, s12, s2
 8005bf2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8005bf6:	ee66 9a26 	vmul.f32	s19, s12, s13
 8005bfa:	ee24 9a23 	vmul.f32	s18, s8, s7
 8005bfe:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005c02:	ee24 4a26 	vmul.f32	s8, s8, s13
 8005c06:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005c0a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005c0e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8005c12:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005c16:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005c1a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8005c1e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8005c22:	ee75 6a60 	vsub.f32	s13, s10, s1
 8005c26:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8005c2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005c2e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8005c32:	ed05 6a01 	vstr	s12, [r5, #-4]
 8005c36:	ed84 7a01 	vstr	s14, [r4, #4]
 8005c3a:	ed84 4a02 	vstr	s8, [r4, #8]
 8005c3e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8005c42:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8005c46:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8005c4a:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8005c4e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005c52:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8005c56:	ee67 2a26 	vmul.f32	s5, s14, s13
 8005c5a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8005c5e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8005c62:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005c66:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005c6a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005c6e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8005c72:	ee23 3a25 	vmul.f32	s6, s6, s11
 8005c76:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005c7a:	ee75 5a24 	vadd.f32	s11, s10, s9
 8005c7e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8005c82:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005c86:	f1bb 0b01 	subs.w	fp, fp, #1
 8005c8a:	ed42 5a02 	vstr	s11, [r2, #-8]
 8005c8e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005c92:	f10e 0e08 	add.w	lr, lr, #8
 8005c96:	ed83 3a02 	vstr	s6, [r3, #8]
 8005c9a:	ed83 7a01 	vstr	s14, [r3, #4]
 8005c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8005ca2:	f10a 0a08 	add.w	sl, sl, #8
 8005ca6:	f100 0008 	add.w	r0, r0, #8
 8005caa:	f1a1 0108 	sub.w	r1, r1, #8
 8005cae:	f109 0910 	add.w	r9, r9, #16
 8005cb2:	f105 0508 	add.w	r5, r5, #8
 8005cb6:	f1a4 0408 	sub.w	r4, r4, #8
 8005cba:	f108 0818 	add.w	r8, r8, #24
 8005cbe:	f102 0208 	add.w	r2, r2, #8
 8005cc2:	f1a3 0308 	sub.w	r3, r3, #8
 8005cc6:	f47f aefc 	bne.w	8005ac2 <arm_cfft_radix8by4_f32+0x12e>
 8005cca:	9907      	ldr	r1, [sp, #28]
 8005ccc:	9800      	ldr	r0, [sp, #0]
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005cd4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005cd8:	9100      	str	r1, [sp, #0]
 8005cda:	9904      	ldr	r1, [sp, #16]
 8005cdc:	4419      	add	r1, r3
 8005cde:	9104      	str	r1, [sp, #16]
 8005ce0:	9903      	ldr	r1, [sp, #12]
 8005ce2:	4419      	add	r1, r3
 8005ce4:	9103      	str	r1, [sp, #12]
 8005ce6:	9906      	ldr	r1, [sp, #24]
 8005ce8:	4419      	add	r1, r3
 8005cea:	9106      	str	r1, [sp, #24]
 8005cec:	9905      	ldr	r1, [sp, #20]
 8005cee:	441f      	add	r7, r3
 8005cf0:	4419      	add	r1, r3
 8005cf2:	9b02      	ldr	r3, [sp, #8]
 8005cf4:	9105      	str	r1, [sp, #20]
 8005cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cfa:	9302      	str	r3, [sp, #8]
 8005cfc:	9904      	ldr	r1, [sp, #16]
 8005cfe:	9805      	ldr	r0, [sp, #20]
 8005d00:	ed91 4a00 	vldr	s8, [r1]
 8005d04:	edd0 6a00 	vldr	s13, [r0]
 8005d08:	9b06      	ldr	r3, [sp, #24]
 8005d0a:	ed97 3a00 	vldr	s6, [r7]
 8005d0e:	edd3 7a00 	vldr	s15, [r3]
 8005d12:	edd0 4a01 	vldr	s9, [r0, #4]
 8005d16:	edd1 3a01 	vldr	s7, [r1, #4]
 8005d1a:	ed97 2a01 	vldr	s4, [r7, #4]
 8005d1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d22:	9a03      	ldr	r2, [sp, #12]
 8005d24:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8005d28:	ee34 6a26 	vadd.f32	s12, s8, s13
 8005d2c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8005d30:	ee37 5a86 	vadd.f32	s10, s15, s12
 8005d34:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005d38:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005d3c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8005d40:	ed81 5a00 	vstr	s10, [r1]
 8005d44:	ed93 5a01 	vldr	s10, [r3, #4]
 8005d48:	edd7 4a01 	vldr	s9, [r7, #4]
 8005d4c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005d50:	ee37 4a26 	vadd.f32	s8, s14, s13
 8005d54:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005d58:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8005d5c:	ed81 5a01 	vstr	s10, [r1, #4]
 8005d60:	edd2 1a00 	vldr	s3, [r2]
 8005d64:	edd2 2a01 	vldr	s5, [r2, #4]
 8005d68:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005d6c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005d70:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d74:	ee64 4a21 	vmul.f32	s9, s8, s3
 8005d78:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005d7c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005d80:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005d84:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005d88:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005d8c:	edc3 2a00 	vstr	s5, [r3]
 8005d90:	ed83 5a01 	vstr	s10, [r3, #4]
 8005d94:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8005d98:	9b00      	ldr	r3, [sp, #0]
 8005d9a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005d9e:	ed93 4a01 	vldr	s8, [r3, #4]
 8005da2:	ed93 5a00 	vldr	s10, [r3]
 8005da6:	9b02      	ldr	r3, [sp, #8]
 8005da8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005dac:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005db0:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005db4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005db8:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005dbc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005dc0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005dc4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005dc8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005dcc:	ed80 6a01 	vstr	s12, [r0, #4]
 8005dd0:	edc0 5a00 	vstr	s11, [r0]
 8005dd4:	edd3 5a01 	vldr	s11, [r3, #4]
 8005dd8:	edd3 6a00 	vldr	s13, [r3]
 8005ddc:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005de0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8005de4:	ee27 6a26 	vmul.f32	s12, s14, s13
 8005de8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005dec:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005df0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005df4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005df8:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005dfc:	ed87 7a01 	vstr	s14, [r7, #4]
 8005e00:	edc7 7a00 	vstr	s15, [r7]
 8005e04:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8005e08:	4621      	mov	r1, r4
 8005e0a:	686a      	ldr	r2, [r5, #4]
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f000 f8af 	bl	8005f70 <arm_radix8_butterfly_f32>
 8005e12:	4630      	mov	r0, r6
 8005e14:	4621      	mov	r1, r4
 8005e16:	686a      	ldr	r2, [r5, #4]
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f000 f8a9 	bl	8005f70 <arm_radix8_butterfly_f32>
 8005e1e:	9808      	ldr	r0, [sp, #32]
 8005e20:	686a      	ldr	r2, [r5, #4]
 8005e22:	4621      	mov	r1, r4
 8005e24:	2304      	movs	r3, #4
 8005e26:	f000 f8a3 	bl	8005f70 <arm_radix8_butterfly_f32>
 8005e2a:	686a      	ldr	r2, [r5, #4]
 8005e2c:	9801      	ldr	r0, [sp, #4]
 8005e2e:	4621      	mov	r1, r4
 8005e30:	2304      	movs	r3, #4
 8005e32:	b00d      	add	sp, #52	@ 0x34
 8005e34:	ecbd 8b0a 	vpop	{d8-d12}
 8005e38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	f000 b898 	b.w	8005f70 <arm_radix8_butterfly_f32>

08005e40 <arm_cfft_f32>:
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	2a01      	cmp	r2, #1
 8005e46:	4606      	mov	r6, r0
 8005e48:	4617      	mov	r7, r2
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	4698      	mov	r8, r3
 8005e4e:	8805      	ldrh	r5, [r0, #0]
 8005e50:	d056      	beq.n	8005f00 <arm_cfft_f32+0xc0>
 8005e52:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005e56:	d063      	beq.n	8005f20 <arm_cfft_f32+0xe0>
 8005e58:	d916      	bls.n	8005e88 <arm_cfft_f32+0x48>
 8005e5a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8005e5e:	d01a      	beq.n	8005e96 <arm_cfft_f32+0x56>
 8005e60:	d947      	bls.n	8005ef2 <arm_cfft_f32+0xb2>
 8005e62:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8005e66:	d05b      	beq.n	8005f20 <arm_cfft_f32+0xe0>
 8005e68:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005e6c:	d105      	bne.n	8005e7a <arm_cfft_f32+0x3a>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	6872      	ldr	r2, [r6, #4]
 8005e72:	4629      	mov	r1, r5
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 f87b 	bl	8005f70 <arm_radix8_butterfly_f32>
 8005e7a:	f1b8 0f00 	cmp.w	r8, #0
 8005e7e:	d111      	bne.n	8005ea4 <arm_cfft_f32+0x64>
 8005e80:	2f01      	cmp	r7, #1
 8005e82:	d016      	beq.n	8005eb2 <arm_cfft_f32+0x72>
 8005e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e88:	2d20      	cmp	r5, #32
 8005e8a:	d049      	beq.n	8005f20 <arm_cfft_f32+0xe0>
 8005e8c:	d935      	bls.n	8005efa <arm_cfft_f32+0xba>
 8005e8e:	2d40      	cmp	r5, #64	@ 0x40
 8005e90:	d0ed      	beq.n	8005e6e <arm_cfft_f32+0x2e>
 8005e92:	2d80      	cmp	r5, #128	@ 0x80
 8005e94:	d1f1      	bne.n	8005e7a <arm_cfft_f32+0x3a>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f7ff fcab 	bl	80057f4 <arm_cfft_radix8by2_f32>
 8005e9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ea2:	d0ed      	beq.n	8005e80 <arm_cfft_f32+0x40>
 8005ea4:	68b2      	ldr	r2, [r6, #8]
 8005ea6:	89b1      	ldrh	r1, [r6, #12]
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 f841 	bl	8005f30 <arm_bitreversal_32>
 8005eae:	2f01      	cmp	r7, #1
 8005eb0:	d1e8      	bne.n	8005e84 <arm_cfft_f32+0x44>
 8005eb2:	ee07 5a90 	vmov	s15, r5
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ebe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	d0de      	beq.n	8005e84 <arm_cfft_f32+0x44>
 8005ec6:	f104 0108 	add.w	r1, r4, #8
 8005eca:	2300      	movs	r3, #0
 8005ecc:	3301      	adds	r3, #1
 8005ece:	429d      	cmp	r5, r3
 8005ed0:	f101 0108 	add.w	r1, r1, #8
 8005ed4:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005ed8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005edc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005ee0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005ee4:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005ee8:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005eec:	d1ee      	bne.n	8005ecc <arm_cfft_f32+0x8c>
 8005eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef2:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8005ef6:	d0ba      	beq.n	8005e6e <arm_cfft_f32+0x2e>
 8005ef8:	e7bf      	b.n	8005e7a <arm_cfft_f32+0x3a>
 8005efa:	2d10      	cmp	r5, #16
 8005efc:	d0cb      	beq.n	8005e96 <arm_cfft_f32+0x56>
 8005efe:	e7bc      	b.n	8005e7a <arm_cfft_f32+0x3a>
 8005f00:	b19d      	cbz	r5, 8005f2a <arm_cfft_f32+0xea>
 8005f02:	f101 030c 	add.w	r3, r1, #12
 8005f06:	2200      	movs	r2, #0
 8005f08:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005f0c:	3201      	adds	r2, #1
 8005f0e:	eef1 7a67 	vneg.f32	s15, s15
 8005f12:	4295      	cmp	r5, r2
 8005f14:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005f18:	f103 0308 	add.w	r3, r3, #8
 8005f1c:	d1f4      	bne.n	8005f08 <arm_cfft_f32+0xc8>
 8005f1e:	e798      	b.n	8005e52 <arm_cfft_f32+0x12>
 8005f20:	4621      	mov	r1, r4
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff fd36 	bl	8005994 <arm_cfft_radix8by4_f32>
 8005f28:	e7a7      	b.n	8005e7a <arm_cfft_f32+0x3a>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0aa      	beq.n	8005e84 <arm_cfft_f32+0x44>
 8005f2e:	e7b9      	b.n	8005ea4 <arm_cfft_f32+0x64>

08005f30 <arm_bitreversal_32>:
 8005f30:	b1e9      	cbz	r1, 8005f6e <arm_bitreversal_32+0x3e>
 8005f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f34:	2500      	movs	r5, #0
 8005f36:	f102 0e02 	add.w	lr, r2, #2
 8005f3a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8005f3e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8005f42:	08a4      	lsrs	r4, r4, #2
 8005f44:	089b      	lsrs	r3, r3, #2
 8005f46:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8005f4a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8005f4e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8005f52:	00a6      	lsls	r6, r4, #2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	1d34      	adds	r4, r6, #4
 8005f5e:	3502      	adds	r5, #2
 8005f60:	58c6      	ldr	r6, [r0, r3]
 8005f62:	5907      	ldr	r7, [r0, r4]
 8005f64:	50c7      	str	r7, [r0, r3]
 8005f66:	428d      	cmp	r5, r1
 8005f68:	5106      	str	r6, [r0, r4]
 8005f6a:	d3e6      	bcc.n	8005f3a <arm_bitreversal_32+0xa>
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6e:	4770      	bx	lr

08005f70 <arm_radix8_butterfly_f32>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	ed2d 8b10 	vpush	{d8-d15}
 8005f78:	b095      	sub	sp, #84	@ 0x54
 8005f7a:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8005f7e:	4603      	mov	r3, r0
 8005f80:	3304      	adds	r3, #4
 8005f82:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8006268 <arm_radix8_butterfly_f32+0x2f8>
 8005f86:	9012      	str	r0, [sp, #72]	@ 0x48
 8005f88:	468b      	mov	fp, r1
 8005f8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8005f92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f94:	960f      	str	r6, [sp, #60]	@ 0x3c
 8005f96:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8005f9a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8005f9e:	eb03 0508 	add.w	r5, r3, r8
 8005fa2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8005fa6:	eb05 040e 	add.w	r4, r5, lr
 8005faa:	0137      	lsls	r7, r6, #4
 8005fac:	eba6 030a 	sub.w	r3, r6, sl
 8005fb0:	eb04 000e 	add.w	r0, r4, lr
 8005fb4:	44b2      	add	sl, r6
 8005fb6:	1d3a      	adds	r2, r7, #4
 8005fb8:	9702      	str	r7, [sp, #8]
 8005fba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005fbe:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8005fc2:	ebae 0c06 	sub.w	ip, lr, r6
 8005fc6:	9703      	str	r7, [sp, #12]
 8005fc8:	eb03 0708 	add.w	r7, r3, r8
 8005fcc:	9701      	str	r7, [sp, #4]
 8005fce:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8005fd2:	9706      	str	r7, [sp, #24]
 8005fd4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8005fd6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005fda:	f10e 0104 	add.w	r1, lr, #4
 8005fde:	4439      	add	r1, r7
 8005fe0:	443a      	add	r2, r7
 8005fe2:	0137      	lsls	r7, r6, #4
 8005fe4:	00f6      	lsls	r6, r6, #3
 8005fe6:	9704      	str	r7, [sp, #16]
 8005fe8:	9605      	str	r6, [sp, #20]
 8005fea:	9f01      	ldr	r7, [sp, #4]
 8005fec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005fee:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8005ff2:	f04f 0c00 	mov.w	ip, #0
 8005ff6:	edd4 6a00 	vldr	s13, [r4]
 8005ffa:	edd7 1a00 	vldr	s3, [r7]
 8005ffe:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006002:	edd5 5a00 	vldr	s11, [r5]
 8006006:	ed52 9a01 	vldr	s19, [r2, #-4]
 800600a:	ed90 6a00 	vldr	s12, [r0]
 800600e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006012:	ed93 3a00 	vldr	s6, [r3]
 8006016:	ee39 0a86 	vadd.f32	s0, s19, s12
 800601a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800601e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006022:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006026:	ee35 7a02 	vadd.f32	s14, s10, s4
 800602a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800602e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006032:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006036:	ee34 4a47 	vsub.f32	s8, s8, s14
 800603a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800603e:	ed85 4a00 	vstr	s8, [r5]
 8006042:	edd1 6a00 	vldr	s13, [r1]
 8006046:	ed94 9a01 	vldr	s18, [r4, #4]
 800604a:	edd3 2a01 	vldr	s5, [r3, #4]
 800604e:	edd7 8a01 	vldr	s17, [r7, #4]
 8006052:	edd6 0a00 	vldr	s1, [r6]
 8006056:	edd5 3a01 	vldr	s7, [r5, #4]
 800605a:	ed90 8a01 	vldr	s16, [r0, #4]
 800605e:	ed92 7a00 	vldr	s14, [r2]
 8006062:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006066:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800606a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800606e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006072:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006076:	ee77 7a83 	vadd.f32	s15, s15, s6
 800607a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800607e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006082:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006086:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800608a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800608e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006092:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006096:	ee37 7a48 	vsub.f32	s14, s14, s16
 800609a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800609e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80060a2:	ee76 6a89 	vadd.f32	s13, s13, s18
 80060a6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80060aa:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80060ae:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80060b2:	ee35 5a42 	vsub.f32	s10, s10, s4
 80060b6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80060ba:	ee33 2a20 	vadd.f32	s4, s6, s1
 80060be:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80060c2:	ee33 3a60 	vsub.f32	s6, s6, s1
 80060c6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80060ca:	ee77 0a01 	vadd.f32	s1, s14, s2
 80060ce:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80060d2:	ee37 7a41 	vsub.f32	s14, s14, s2
 80060d6:	ee73 1a84 	vadd.f32	s3, s7, s8
 80060da:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80060de:	ee76 3a27 	vadd.f32	s7, s12, s15
 80060e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80060e6:	ee32 8a00 	vadd.f32	s16, s4, s0
 80060ea:	ee33 1a45 	vsub.f32	s2, s6, s10
 80060ee:	ee32 2a40 	vsub.f32	s4, s4, s0
 80060f2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80060f6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80060fa:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80060fe:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006102:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006106:	ee75 4a87 	vadd.f32	s9, s11, s14
 800610a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800610e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006112:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006116:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800611a:	44dc      	add	ip, fp
 800611c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006120:	45e1      	cmp	r9, ip
 8006122:	ed86 8a00 	vstr	s16, [r6]
 8006126:	ed85 2a01 	vstr	s4, [r5, #4]
 800612a:	4456      	add	r6, sl
 800612c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006130:	4455      	add	r5, sl
 8006132:	edc0 6a00 	vstr	s13, [r0]
 8006136:	ed82 1a00 	vstr	s2, [r2]
 800613a:	ed80 5a01 	vstr	s10, [r0, #4]
 800613e:	4452      	add	r2, sl
 8006140:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006144:	4450      	add	r0, sl
 8006146:	edc7 2a00 	vstr	s5, [r7]
 800614a:	edc4 4a00 	vstr	s9, [r4]
 800614e:	ed83 7a00 	vstr	s14, [r3]
 8006152:	edc1 5a00 	vstr	s11, [r1]
 8006156:	edc7 3a01 	vstr	s7, [r7, #4]
 800615a:	4451      	add	r1, sl
 800615c:	ed84 6a01 	vstr	s12, [r4, #4]
 8006160:	4457      	add	r7, sl
 8006162:	edc3 7a01 	vstr	s15, [r3, #4]
 8006166:	4454      	add	r4, sl
 8006168:	4453      	add	r3, sl
 800616a:	f63f af44 	bhi.w	8005ff6 <arm_radix8_butterfly_f32+0x86>
 800616e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006170:	2b07      	cmp	r3, #7
 8006172:	f240 81b7 	bls.w	80064e4 <arm_radix8_butterfly_f32+0x574>
 8006176:	9b06      	ldr	r3, [sp, #24]
 8006178:	9903      	ldr	r1, [sp, #12]
 800617a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800617c:	9e05      	ldr	r6, [sp, #20]
 800617e:	9a04      	ldr	r2, [sp, #16]
 8006180:	f103 0c08 	add.w	ip, r3, #8
 8006184:	9b02      	ldr	r3, [sp, #8]
 8006186:	3108      	adds	r1, #8
 8006188:	f108 0808 	add.w	r8, r8, #8
 800618c:	1841      	adds	r1, r0, r1
 800618e:	3608      	adds	r6, #8
 8006190:	330c      	adds	r3, #12
 8006192:	4604      	mov	r4, r0
 8006194:	4444      	add	r4, r8
 8006196:	18c3      	adds	r3, r0, r3
 8006198:	9109      	str	r1, [sp, #36]	@ 0x24
 800619a:	1981      	adds	r1, r0, r6
 800619c:	f10e 0e08 	add.w	lr, lr, #8
 80061a0:	3208      	adds	r2, #8
 80061a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061a4:	9107      	str	r1, [sp, #28]
 80061a6:	4604      	mov	r4, r0
 80061a8:	4601      	mov	r1, r0
 80061aa:	9304      	str	r3, [sp, #16]
 80061ac:	f100 030c 	add.w	r3, r0, #12
 80061b0:	4474      	add	r4, lr
 80061b2:	f04f 0801 	mov.w	r8, #1
 80061b6:	1882      	adds	r2, r0, r2
 80061b8:	4461      	add	r1, ip
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	464b      	mov	r3, r9
 80061be:	940a      	str	r4, [sp, #40]	@ 0x28
 80061c0:	46c1      	mov	r9, r8
 80061c2:	9208      	str	r2, [sp, #32]
 80061c4:	46d8      	mov	r8, fp
 80061c6:	9106      	str	r1, [sp, #24]
 80061c8:	f04f 0e00 	mov.w	lr, #0
 80061cc:	469b      	mov	fp, r3
 80061ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80061d2:	449e      	add	lr, r3
 80061d4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80061d8:	441a      	add	r2, r3
 80061da:	920e      	str	r2, [sp, #56]	@ 0x38
 80061dc:	441a      	add	r2, r3
 80061de:	18d4      	adds	r4, r2, r3
 80061e0:	18e5      	adds	r5, r4, r3
 80061e2:	18ee      	adds	r6, r5, r3
 80061e4:	18f7      	adds	r7, r6, r3
 80061e6:	eb07 0c03 	add.w	ip, r7, r3
 80061ea:	920d      	str	r2, [sp, #52]	@ 0x34
 80061ec:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80061f0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80061f4:	910c      	str	r1, [sp, #48]	@ 0x30
 80061f6:	4419      	add	r1, r3
 80061f8:	9103      	str	r1, [sp, #12]
 80061fa:	4419      	add	r1, r3
 80061fc:	18ca      	adds	r2, r1, r3
 80061fe:	9202      	str	r2, [sp, #8]
 8006200:	441a      	add	r2, r3
 8006202:	18d0      	adds	r0, r2, r3
 8006204:	ed92 ea01 	vldr	s28, [r2, #4]
 8006208:	9a02      	ldr	r2, [sp, #8]
 800620a:	edd4 7a00 	vldr	s15, [r4]
 800620e:	edd2 da01 	vldr	s27, [r2, #4]
 8006212:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006214:	ed91 da01 	vldr	s26, [r1, #4]
 8006218:	ed92 ca01 	vldr	s24, [r2, #4]
 800621c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800621e:	9903      	ldr	r1, [sp, #12]
 8006220:	edcd 7a03 	vstr	s15, [sp, #12]
 8006224:	edd2 7a00 	vldr	s15, [r2]
 8006228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800622a:	edcd 7a02 	vstr	s15, [sp, #8]
 800622e:	edd2 7a00 	vldr	s15, [r2]
 8006232:	edd0 ea01 	vldr	s29, [r0, #4]
 8006236:	edd1 ca01 	vldr	s25, [r1, #4]
 800623a:	eddc ba00 	vldr	s23, [ip]
 800623e:	edd7 aa00 	vldr	s21, [r7]
 8006242:	ed96 aa00 	vldr	s20, [r6]
 8006246:	edd5 9a00 	vldr	s19, [r5]
 800624a:	edcd 7a01 	vstr	s15, [sp, #4]
 800624e:	4403      	add	r3, r0
 8006250:	ed93 fa01 	vldr	s30, [r3, #4]
 8006254:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006258:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800625c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006260:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006264:	46cc      	mov	ip, r9
 8006266:	e001      	b.n	800626c <arm_radix8_butterfly_f32+0x2fc>
 8006268:	3f3504f3 	.word	0x3f3504f3
 800626c:	ed91 6a00 	vldr	s12, [r1]
 8006270:	ed93 5a00 	vldr	s10, [r3]
 8006274:	edd0 fa00 	vldr	s31, [r0]
 8006278:	edd4 7a00 	vldr	s15, [r4]
 800627c:	ed95 7a00 	vldr	s14, [r5]
 8006280:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006284:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006288:	ed92 2a00 	vldr	s4, [r2]
 800628c:	ed96 0a00 	vldr	s0, [r6]
 8006290:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006294:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006298:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800629c:	ee77 4a87 	vadd.f32	s9, s15, s14
 80062a0:	ee78 1a04 	vadd.f32	s3, s16, s8
 80062a4:	ee71 6a24 	vadd.f32	s13, s2, s9
 80062a8:	ee32 2a46 	vsub.f32	s4, s4, s12
 80062ac:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80062b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062b4:	ed06 6a01 	vstr	s12, [r6, #-4]
 80062b8:	edd4 8a01 	vldr	s17, [r4, #4]
 80062bc:	ed92 9a01 	vldr	s18, [r2, #4]
 80062c0:	edd7 0a00 	vldr	s1, [r7]
 80062c4:	edd1 2a01 	vldr	s5, [r1, #4]
 80062c8:	ed95 7a01 	vldr	s14, [r5, #4]
 80062cc:	ed93 6a01 	vldr	s12, [r3, #4]
 80062d0:	edd0 5a01 	vldr	s11, [r0, #4]
 80062d4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80062d8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80062dc:	ee39 5a62 	vsub.f32	s10, s18, s5
 80062e0:	ee78 fac7 	vsub.f32	s31, s17, s14
 80062e4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80062e8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80062ec:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80062f0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80062f4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80062f8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80062fc:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006300:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006304:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006308:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800630c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8006310:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006314:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006318:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800631c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006320:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006324:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006328:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800632c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8006330:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006334:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006338:	ee30 6a46 	vsub.f32	s12, s0, s12
 800633c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8006340:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006344:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006348:	ee36 6a68 	vsub.f32	s12, s12, s17
 800634c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006350:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006354:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006358:	ee33 9a49 	vsub.f32	s18, s6, s18
 800635c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006360:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006364:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006368:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800636c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006370:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006374:	ee30 7a68 	vsub.f32	s14, s0, s17
 8006378:	ee35 8a03 	vadd.f32	s16, s10, s6
 800637c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8006380:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006384:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006388:	ed9d 2a01 	vldr	s4, [sp, #4]
 800638c:	eddd 1a02 	vldr	s3, [sp, #8]
 8006390:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006394:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8006398:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800639c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80063a0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80063a4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80063a8:	ee76 5a49 	vsub.f32	s11, s12, s18
 80063ac:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80063b0:	ee39 6a06 	vadd.f32	s12, s18, s12
 80063b4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80063b8:	ee21 4a84 	vmul.f32	s8, s3, s8
 80063bc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80063c0:	ee22 7a07 	vmul.f32	s14, s4, s14
 80063c4:	ee22 2a08 	vmul.f32	s4, s4, s16
 80063c8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80063cc:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80063d0:	ee31 1a09 	vadd.f32	s2, s2, s18
 80063d4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80063d8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80063dc:	ee74 0a60 	vsub.f32	s1, s8, s1
 80063e0:	ee37 7a48 	vsub.f32	s14, s14, s16
 80063e4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80063e8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80063ec:	ee72 1a21 	vadd.f32	s3, s4, s3
 80063f0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80063f4:	ee38 2a89 	vadd.f32	s4, s17, s18
 80063f8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80063fc:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006400:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006404:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006408:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800640c:	eddd 5a03 	vldr	s11, [sp, #12]
 8006410:	edc6 fa00 	vstr	s31, [r6]
 8006414:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006418:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800641c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8006420:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8006424:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8006428:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800642c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8006430:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8006434:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006438:	ee74 4a89 	vadd.f32	s9, s9, s18
 800643c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8006440:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006444:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006448:	44c4      	add	ip, r8
 800644a:	45e3      	cmp	fp, ip
 800644c:	edc3 3a00 	vstr	s7, [r3]
 8006450:	edc3 6a01 	vstr	s13, [r3, #4]
 8006454:	4456      	add	r6, sl
 8006456:	ed07 1a01 	vstr	s2, [r7, #-4]
 800645a:	edc7 0a00 	vstr	s1, [r7]
 800645e:	4453      	add	r3, sl
 8006460:	ed80 2a00 	vstr	s4, [r0]
 8006464:	edc0 2a01 	vstr	s5, [r0, #4]
 8006468:	4457      	add	r7, sl
 800646a:	edc2 1a00 	vstr	s3, [r2]
 800646e:	ed82 7a01 	vstr	s14, [r2, #4]
 8006472:	4450      	add	r0, sl
 8006474:	ed85 8a00 	vstr	s16, [r5]
 8006478:	ed85 0a01 	vstr	s0, [r5, #4]
 800647c:	4452      	add	r2, sl
 800647e:	edc1 4a00 	vstr	s9, [r1]
 8006482:	4455      	add	r5, sl
 8006484:	ed81 3a01 	vstr	s6, [r1, #4]
 8006488:	edc4 8a00 	vstr	s17, [r4]
 800648c:	ed84 6a01 	vstr	s12, [r4, #4]
 8006490:	4451      	add	r1, sl
 8006492:	4454      	add	r4, sl
 8006494:	f63f aeea 	bhi.w	800626c <arm_radix8_butterfly_f32+0x2fc>
 8006498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800649a:	3308      	adds	r3, #8
 800649c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800649e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064a0:	3308      	adds	r3, #8
 80064a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80064a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a6:	3308      	adds	r3, #8
 80064a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	3308      	adds	r3, #8
 80064ae:	9308      	str	r3, [sp, #32]
 80064b0:	9b07      	ldr	r3, [sp, #28]
 80064b2:	3308      	adds	r3, #8
 80064b4:	9307      	str	r3, [sp, #28]
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	3308      	adds	r3, #8
 80064ba:	9306      	str	r3, [sp, #24]
 80064bc:	9b05      	ldr	r3, [sp, #20]
 80064be:	3308      	adds	r3, #8
 80064c0:	9305      	str	r3, [sp, #20]
 80064c2:	9b04      	ldr	r3, [sp, #16]
 80064c4:	3308      	adds	r3, #8
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ca:	f109 0901 	add.w	r9, r9, #1
 80064ce:	454b      	cmp	r3, r9
 80064d0:	f47f ae7d 	bne.w	80061ce <arm_radix8_butterfly_f32+0x25e>
 80064d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	b29b      	uxth	r3, r3
 80064da:	46d9      	mov	r9, fp
 80064dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80064de:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 80064e2:	e554      	b.n	8005f8e <arm_radix8_butterfly_f32+0x1e>
 80064e4:	b015      	add	sp, #84	@ 0x54
 80064e6:	ecbd 8b10 	vpop	{d8-d15}
 80064ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ee:	bf00      	nop

080064f0 <__cvt>:
 80064f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	ec57 6b10 	vmov	r6, r7, d0
 80064f8:	2f00      	cmp	r7, #0
 80064fa:	460c      	mov	r4, r1
 80064fc:	4619      	mov	r1, r3
 80064fe:	463b      	mov	r3, r7
 8006500:	bfbb      	ittet	lt
 8006502:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006506:	461f      	movlt	r7, r3
 8006508:	2300      	movge	r3, #0
 800650a:	232d      	movlt	r3, #45	@ 0x2d
 800650c:	700b      	strb	r3, [r1, #0]
 800650e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006510:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006514:	4691      	mov	r9, r2
 8006516:	f023 0820 	bic.w	r8, r3, #32
 800651a:	bfbc      	itt	lt
 800651c:	4632      	movlt	r2, r6
 800651e:	4616      	movlt	r6, r2
 8006520:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006524:	d005      	beq.n	8006532 <__cvt+0x42>
 8006526:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800652a:	d100      	bne.n	800652e <__cvt+0x3e>
 800652c:	3401      	adds	r4, #1
 800652e:	2102      	movs	r1, #2
 8006530:	e000      	b.n	8006534 <__cvt+0x44>
 8006532:	2103      	movs	r1, #3
 8006534:	ab03      	add	r3, sp, #12
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	ab02      	add	r3, sp, #8
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	ec47 6b10 	vmov	d0, r6, r7
 8006540:	4653      	mov	r3, sl
 8006542:	4622      	mov	r2, r4
 8006544:	f000 ff40 	bl	80073c8 <_dtoa_r>
 8006548:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800654c:	4605      	mov	r5, r0
 800654e:	d119      	bne.n	8006584 <__cvt+0x94>
 8006550:	f019 0f01 	tst.w	r9, #1
 8006554:	d00e      	beq.n	8006574 <__cvt+0x84>
 8006556:	eb00 0904 	add.w	r9, r0, r4
 800655a:	2200      	movs	r2, #0
 800655c:	2300      	movs	r3, #0
 800655e:	4630      	mov	r0, r6
 8006560:	4639      	mov	r1, r7
 8006562:	f7fa fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006566:	b108      	cbz	r0, 800656c <__cvt+0x7c>
 8006568:	f8cd 900c 	str.w	r9, [sp, #12]
 800656c:	2230      	movs	r2, #48	@ 0x30
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	454b      	cmp	r3, r9
 8006572:	d31e      	bcc.n	80065b2 <__cvt+0xc2>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006578:	1b5b      	subs	r3, r3, r5
 800657a:	4628      	mov	r0, r5
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	b004      	add	sp, #16
 8006580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006588:	eb00 0904 	add.w	r9, r0, r4
 800658c:	d1e5      	bne.n	800655a <__cvt+0x6a>
 800658e:	7803      	ldrb	r3, [r0, #0]
 8006590:	2b30      	cmp	r3, #48	@ 0x30
 8006592:	d10a      	bne.n	80065aa <__cvt+0xba>
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7fa fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a0:	b918      	cbnz	r0, 80065aa <__cvt+0xba>
 80065a2:	f1c4 0401 	rsb	r4, r4, #1
 80065a6:	f8ca 4000 	str.w	r4, [sl]
 80065aa:	f8da 3000 	ldr.w	r3, [sl]
 80065ae:	4499      	add	r9, r3
 80065b0:	e7d3      	b.n	800655a <__cvt+0x6a>
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	9103      	str	r1, [sp, #12]
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e7d9      	b.n	800656e <__cvt+0x7e>

080065ba <__exponent>:
 80065ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065bc:	2900      	cmp	r1, #0
 80065be:	bfba      	itte	lt
 80065c0:	4249      	neglt	r1, r1
 80065c2:	232d      	movlt	r3, #45	@ 0x2d
 80065c4:	232b      	movge	r3, #43	@ 0x2b
 80065c6:	2909      	cmp	r1, #9
 80065c8:	7002      	strb	r2, [r0, #0]
 80065ca:	7043      	strb	r3, [r0, #1]
 80065cc:	dd29      	ble.n	8006622 <__exponent+0x68>
 80065ce:	f10d 0307 	add.w	r3, sp, #7
 80065d2:	461d      	mov	r5, r3
 80065d4:	270a      	movs	r7, #10
 80065d6:	461a      	mov	r2, r3
 80065d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80065dc:	fb07 1416 	mls	r4, r7, r6, r1
 80065e0:	3430      	adds	r4, #48	@ 0x30
 80065e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065e6:	460c      	mov	r4, r1
 80065e8:	2c63      	cmp	r4, #99	@ 0x63
 80065ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80065ee:	4631      	mov	r1, r6
 80065f0:	dcf1      	bgt.n	80065d6 <__exponent+0x1c>
 80065f2:	3130      	adds	r1, #48	@ 0x30
 80065f4:	1e94      	subs	r4, r2, #2
 80065f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065fa:	1c41      	adds	r1, r0, #1
 80065fc:	4623      	mov	r3, r4
 80065fe:	42ab      	cmp	r3, r5
 8006600:	d30a      	bcc.n	8006618 <__exponent+0x5e>
 8006602:	f10d 0309 	add.w	r3, sp, #9
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	42ac      	cmp	r4, r5
 800660a:	bf88      	it	hi
 800660c:	2300      	movhi	r3, #0
 800660e:	3302      	adds	r3, #2
 8006610:	4403      	add	r3, r0
 8006612:	1a18      	subs	r0, r3, r0
 8006614:	b003      	add	sp, #12
 8006616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006618:	f813 6b01 	ldrb.w	r6, [r3], #1
 800661c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006620:	e7ed      	b.n	80065fe <__exponent+0x44>
 8006622:	2330      	movs	r3, #48	@ 0x30
 8006624:	3130      	adds	r1, #48	@ 0x30
 8006626:	7083      	strb	r3, [r0, #2]
 8006628:	70c1      	strb	r1, [r0, #3]
 800662a:	1d03      	adds	r3, r0, #4
 800662c:	e7f1      	b.n	8006612 <__exponent+0x58>
	...

08006630 <_printf_float>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	b08d      	sub	sp, #52	@ 0x34
 8006636:	460c      	mov	r4, r1
 8006638:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800663c:	4616      	mov	r6, r2
 800663e:	461f      	mov	r7, r3
 8006640:	4605      	mov	r5, r0
 8006642:	f000 fdbf 	bl	80071c4 <_localeconv_r>
 8006646:	6803      	ldr	r3, [r0, #0]
 8006648:	9304      	str	r3, [sp, #16]
 800664a:	4618      	mov	r0, r3
 800664c:	f7f9 fe10 	bl	8000270 <strlen>
 8006650:	2300      	movs	r3, #0
 8006652:	930a      	str	r3, [sp, #40]	@ 0x28
 8006654:	f8d8 3000 	ldr.w	r3, [r8]
 8006658:	9005      	str	r0, [sp, #20]
 800665a:	3307      	adds	r3, #7
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	f103 0208 	add.w	r2, r3, #8
 8006664:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006668:	f8d4 b000 	ldr.w	fp, [r4]
 800666c:	f8c8 2000 	str.w	r2, [r8]
 8006670:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006674:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006678:	9307      	str	r3, [sp, #28]
 800667a:	f8cd 8018 	str.w	r8, [sp, #24]
 800667e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006686:	4b9c      	ldr	r3, [pc, #624]	@ (80068f8 <_printf_float+0x2c8>)
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	f7fa fa4e 	bl	8000b2c <__aeabi_dcmpun>
 8006690:	bb70      	cbnz	r0, 80066f0 <_printf_float+0xc0>
 8006692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006696:	4b98      	ldr	r3, [pc, #608]	@ (80068f8 <_printf_float+0x2c8>)
 8006698:	f04f 32ff 	mov.w	r2, #4294967295
 800669c:	f7fa fa28 	bl	8000af0 <__aeabi_dcmple>
 80066a0:	bb30      	cbnz	r0, 80066f0 <_printf_float+0xc0>
 80066a2:	2200      	movs	r2, #0
 80066a4:	2300      	movs	r3, #0
 80066a6:	4640      	mov	r0, r8
 80066a8:	4649      	mov	r1, r9
 80066aa:	f7fa fa17 	bl	8000adc <__aeabi_dcmplt>
 80066ae:	b110      	cbz	r0, 80066b6 <_printf_float+0x86>
 80066b0:	232d      	movs	r3, #45	@ 0x2d
 80066b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066b6:	4a91      	ldr	r2, [pc, #580]	@ (80068fc <_printf_float+0x2cc>)
 80066b8:	4b91      	ldr	r3, [pc, #580]	@ (8006900 <_printf_float+0x2d0>)
 80066ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066be:	bf94      	ite	ls
 80066c0:	4690      	movls	r8, r2
 80066c2:	4698      	movhi	r8, r3
 80066c4:	2303      	movs	r3, #3
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	f02b 0304 	bic.w	r3, fp, #4
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	f04f 0900 	mov.w	r9, #0
 80066d2:	9700      	str	r7, [sp, #0]
 80066d4:	4633      	mov	r3, r6
 80066d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066d8:	4621      	mov	r1, r4
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 f9d2 	bl	8006a84 <_printf_common>
 80066e0:	3001      	adds	r0, #1
 80066e2:	f040 808d 	bne.w	8006800 <_printf_float+0x1d0>
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ea:	b00d      	add	sp, #52	@ 0x34
 80066ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	4640      	mov	r0, r8
 80066f6:	4649      	mov	r1, r9
 80066f8:	f7fa fa18 	bl	8000b2c <__aeabi_dcmpun>
 80066fc:	b140      	cbz	r0, 8006710 <_printf_float+0xe0>
 80066fe:	464b      	mov	r3, r9
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfbc      	itt	lt
 8006704:	232d      	movlt	r3, #45	@ 0x2d
 8006706:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800670a:	4a7e      	ldr	r2, [pc, #504]	@ (8006904 <_printf_float+0x2d4>)
 800670c:	4b7e      	ldr	r3, [pc, #504]	@ (8006908 <_printf_float+0x2d8>)
 800670e:	e7d4      	b.n	80066ba <_printf_float+0x8a>
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006716:	9206      	str	r2, [sp, #24]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	d13b      	bne.n	8006794 <_printf_float+0x164>
 800671c:	2306      	movs	r3, #6
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006724:	2300      	movs	r3, #0
 8006726:	6022      	str	r2, [r4, #0]
 8006728:	9303      	str	r3, [sp, #12]
 800672a:	ab0a      	add	r3, sp, #40	@ 0x28
 800672c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006730:	ab09      	add	r3, sp, #36	@ 0x24
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	6861      	ldr	r1, [r4, #4]
 8006736:	ec49 8b10 	vmov	d0, r8, r9
 800673a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800673e:	4628      	mov	r0, r5
 8006740:	f7ff fed6 	bl	80064f0 <__cvt>
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006748:	2b47      	cmp	r3, #71	@ 0x47
 800674a:	4680      	mov	r8, r0
 800674c:	d129      	bne.n	80067a2 <_printf_float+0x172>
 800674e:	1cc8      	adds	r0, r1, #3
 8006750:	db02      	blt.n	8006758 <_printf_float+0x128>
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	4299      	cmp	r1, r3
 8006756:	dd41      	ble.n	80067dc <_printf_float+0x1ac>
 8006758:	f1aa 0a02 	sub.w	sl, sl, #2
 800675c:	fa5f fa8a 	uxtb.w	sl, sl
 8006760:	3901      	subs	r1, #1
 8006762:	4652      	mov	r2, sl
 8006764:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006768:	9109      	str	r1, [sp, #36]	@ 0x24
 800676a:	f7ff ff26 	bl	80065ba <__exponent>
 800676e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006770:	1813      	adds	r3, r2, r0
 8006772:	2a01      	cmp	r2, #1
 8006774:	4681      	mov	r9, r0
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	dc02      	bgt.n	8006780 <_printf_float+0x150>
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	07d2      	lsls	r2, r2, #31
 800677e:	d501      	bpl.n	8006784 <_printf_float+0x154>
 8006780:	3301      	adds	r3, #1
 8006782:	6123      	str	r3, [r4, #16]
 8006784:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0a2      	beq.n	80066d2 <_printf_float+0xa2>
 800678c:	232d      	movs	r3, #45	@ 0x2d
 800678e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006792:	e79e      	b.n	80066d2 <_printf_float+0xa2>
 8006794:	9a06      	ldr	r2, [sp, #24]
 8006796:	2a47      	cmp	r2, #71	@ 0x47
 8006798:	d1c2      	bne.n	8006720 <_printf_float+0xf0>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1c0      	bne.n	8006720 <_printf_float+0xf0>
 800679e:	2301      	movs	r3, #1
 80067a0:	e7bd      	b.n	800671e <_printf_float+0xee>
 80067a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067a6:	d9db      	bls.n	8006760 <_printf_float+0x130>
 80067a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067ac:	d118      	bne.n	80067e0 <_printf_float+0x1b0>
 80067ae:	2900      	cmp	r1, #0
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	dd0b      	ble.n	80067cc <_printf_float+0x19c>
 80067b4:	6121      	str	r1, [r4, #16]
 80067b6:	b913      	cbnz	r3, 80067be <_printf_float+0x18e>
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	07d0      	lsls	r0, r2, #31
 80067bc:	d502      	bpl.n	80067c4 <_printf_float+0x194>
 80067be:	3301      	adds	r3, #1
 80067c0:	440b      	add	r3, r1
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067c6:	f04f 0900 	mov.w	r9, #0
 80067ca:	e7db      	b.n	8006784 <_printf_float+0x154>
 80067cc:	b913      	cbnz	r3, 80067d4 <_printf_float+0x1a4>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	07d2      	lsls	r2, r2, #31
 80067d2:	d501      	bpl.n	80067d8 <_printf_float+0x1a8>
 80067d4:	3302      	adds	r3, #2
 80067d6:	e7f4      	b.n	80067c2 <_printf_float+0x192>
 80067d8:	2301      	movs	r3, #1
 80067da:	e7f2      	b.n	80067c2 <_printf_float+0x192>
 80067dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e2:	4299      	cmp	r1, r3
 80067e4:	db05      	blt.n	80067f2 <_printf_float+0x1c2>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	6121      	str	r1, [r4, #16]
 80067ea:	07d8      	lsls	r0, r3, #31
 80067ec:	d5ea      	bpl.n	80067c4 <_printf_float+0x194>
 80067ee:	1c4b      	adds	r3, r1, #1
 80067f0:	e7e7      	b.n	80067c2 <_printf_float+0x192>
 80067f2:	2900      	cmp	r1, #0
 80067f4:	bfd4      	ite	le
 80067f6:	f1c1 0202 	rsble	r2, r1, #2
 80067fa:	2201      	movgt	r2, #1
 80067fc:	4413      	add	r3, r2
 80067fe:	e7e0      	b.n	80067c2 <_printf_float+0x192>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	055a      	lsls	r2, r3, #21
 8006804:	d407      	bmi.n	8006816 <_printf_float+0x1e6>
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	4642      	mov	r2, r8
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	d12b      	bne.n	800686c <_printf_float+0x23c>
 8006814:	e767      	b.n	80066e6 <_printf_float+0xb6>
 8006816:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800681a:	f240 80dd 	bls.w	80069d8 <_printf_float+0x3a8>
 800681e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006822:	2200      	movs	r2, #0
 8006824:	2300      	movs	r3, #0
 8006826:	f7fa f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800682a:	2800      	cmp	r0, #0
 800682c:	d033      	beq.n	8006896 <_printf_float+0x266>
 800682e:	4a37      	ldr	r2, [pc, #220]	@ (800690c <_printf_float+0x2dc>)
 8006830:	2301      	movs	r3, #1
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f af54 	beq.w	80066e6 <_printf_float+0xb6>
 800683e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006842:	4543      	cmp	r3, r8
 8006844:	db02      	blt.n	800684c <_printf_float+0x21c>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	07d8      	lsls	r0, r3, #31
 800684a:	d50f      	bpl.n	800686c <_printf_float+0x23c>
 800684c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f af45 	beq.w	80066e6 <_printf_float+0xb6>
 800685c:	f04f 0900 	mov.w	r9, #0
 8006860:	f108 38ff 	add.w	r8, r8, #4294967295
 8006864:	f104 0a1a 	add.w	sl, r4, #26
 8006868:	45c8      	cmp	r8, r9
 800686a:	dc09      	bgt.n	8006880 <_printf_float+0x250>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	079b      	lsls	r3, r3, #30
 8006870:	f100 8103 	bmi.w	8006a7a <_printf_float+0x44a>
 8006874:	68e0      	ldr	r0, [r4, #12]
 8006876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006878:	4298      	cmp	r0, r3
 800687a:	bfb8      	it	lt
 800687c:	4618      	movlt	r0, r3
 800687e:	e734      	b.n	80066ea <_printf_float+0xba>
 8006880:	2301      	movs	r3, #1
 8006882:	4652      	mov	r2, sl
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f af2b 	beq.w	80066e6 <_printf_float+0xb6>
 8006890:	f109 0901 	add.w	r9, r9, #1
 8006894:	e7e8      	b.n	8006868 <_printf_float+0x238>
 8006896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc39      	bgt.n	8006910 <_printf_float+0x2e0>
 800689c:	4a1b      	ldr	r2, [pc, #108]	@ (800690c <_printf_float+0x2dc>)
 800689e:	2301      	movs	r3, #1
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f af1d 	beq.w	80066e6 <_printf_float+0xb6>
 80068ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80068b0:	ea59 0303 	orrs.w	r3, r9, r3
 80068b4:	d102      	bne.n	80068bc <_printf_float+0x28c>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	07d9      	lsls	r1, r3, #31
 80068ba:	d5d7      	bpl.n	800686c <_printf_float+0x23c>
 80068bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f af0d 	beq.w	80066e6 <_printf_float+0xb6>
 80068cc:	f04f 0a00 	mov.w	sl, #0
 80068d0:	f104 0b1a 	add.w	fp, r4, #26
 80068d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d6:	425b      	negs	r3, r3
 80068d8:	4553      	cmp	r3, sl
 80068da:	dc01      	bgt.n	80068e0 <_printf_float+0x2b0>
 80068dc:	464b      	mov	r3, r9
 80068de:	e793      	b.n	8006808 <_printf_float+0x1d8>
 80068e0:	2301      	movs	r3, #1
 80068e2:	465a      	mov	r2, fp
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f aefb 	beq.w	80066e6 <_printf_float+0xb6>
 80068f0:	f10a 0a01 	add.w	sl, sl, #1
 80068f4:	e7ee      	b.n	80068d4 <_printf_float+0x2a4>
 80068f6:	bf00      	nop
 80068f8:	7fefffff 	.word	0x7fefffff
 80068fc:	08009db4 	.word	0x08009db4
 8006900:	08009db8 	.word	0x08009db8
 8006904:	08009dbc 	.word	0x08009dbc
 8006908:	08009dc0 	.word	0x08009dc0
 800690c:	08009dc4 	.word	0x08009dc4
 8006910:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006912:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006916:	4553      	cmp	r3, sl
 8006918:	bfa8      	it	ge
 800691a:	4653      	movge	r3, sl
 800691c:	2b00      	cmp	r3, #0
 800691e:	4699      	mov	r9, r3
 8006920:	dc36      	bgt.n	8006990 <_printf_float+0x360>
 8006922:	f04f 0b00 	mov.w	fp, #0
 8006926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800692a:	f104 021a 	add.w	r2, r4, #26
 800692e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006930:	9306      	str	r3, [sp, #24]
 8006932:	eba3 0309 	sub.w	r3, r3, r9
 8006936:	455b      	cmp	r3, fp
 8006938:	dc31      	bgt.n	800699e <_printf_float+0x36e>
 800693a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693c:	459a      	cmp	sl, r3
 800693e:	dc3a      	bgt.n	80069b6 <_printf_float+0x386>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07da      	lsls	r2, r3, #31
 8006944:	d437      	bmi.n	80069b6 <_printf_float+0x386>
 8006946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006948:	ebaa 0903 	sub.w	r9, sl, r3
 800694c:	9b06      	ldr	r3, [sp, #24]
 800694e:	ebaa 0303 	sub.w	r3, sl, r3
 8006952:	4599      	cmp	r9, r3
 8006954:	bfa8      	it	ge
 8006956:	4699      	movge	r9, r3
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	dc33      	bgt.n	80069c6 <_printf_float+0x396>
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006966:	f104 0b1a 	add.w	fp, r4, #26
 800696a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696c:	ebaa 0303 	sub.w	r3, sl, r3
 8006970:	eba3 0309 	sub.w	r3, r3, r9
 8006974:	4543      	cmp	r3, r8
 8006976:	f77f af79 	ble.w	800686c <_printf_float+0x23c>
 800697a:	2301      	movs	r3, #1
 800697c:	465a      	mov	r2, fp
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f aeae 	beq.w	80066e6 <_printf_float+0xb6>
 800698a:	f108 0801 	add.w	r8, r8, #1
 800698e:	e7ec      	b.n	800696a <_printf_float+0x33a>
 8006990:	4642      	mov	r2, r8
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d1c2      	bne.n	8006922 <_printf_float+0x2f2>
 800699c:	e6a3      	b.n	80066e6 <_printf_float+0xb6>
 800699e:	2301      	movs	r3, #1
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	9206      	str	r2, [sp, #24]
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae9c 	beq.w	80066e6 <_printf_float+0xb6>
 80069ae:	9a06      	ldr	r2, [sp, #24]
 80069b0:	f10b 0b01 	add.w	fp, fp, #1
 80069b4:	e7bb      	b.n	800692e <_printf_float+0x2fe>
 80069b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	d1c0      	bne.n	8006946 <_printf_float+0x316>
 80069c4:	e68f      	b.n	80066e6 <_printf_float+0xb6>
 80069c6:	9a06      	ldr	r2, [sp, #24]
 80069c8:	464b      	mov	r3, r9
 80069ca:	4442      	add	r2, r8
 80069cc:	4631      	mov	r1, r6
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	d1c3      	bne.n	800695e <_printf_float+0x32e>
 80069d6:	e686      	b.n	80066e6 <_printf_float+0xb6>
 80069d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069dc:	f1ba 0f01 	cmp.w	sl, #1
 80069e0:	dc01      	bgt.n	80069e6 <_printf_float+0x3b6>
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d536      	bpl.n	8006a54 <_printf_float+0x424>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4642      	mov	r2, r8
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae78 	beq.w	80066e6 <_printf_float+0xb6>
 80069f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	f43f ae70 	beq.w	80066e6 <_printf_float+0xb6>
 8006a06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a12:	f7fa f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a16:	b9c0      	cbnz	r0, 8006a4a <_printf_float+0x41a>
 8006a18:	4653      	mov	r3, sl
 8006a1a:	f108 0201 	add.w	r2, r8, #1
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	d10c      	bne.n	8006a42 <_printf_float+0x412>
 8006a28:	e65d      	b.n	80066e6 <_printf_float+0xb6>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	465a      	mov	r2, fp
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f ae56 	beq.w	80066e6 <_printf_float+0xb6>
 8006a3a:	f108 0801 	add.w	r8, r8, #1
 8006a3e:	45d0      	cmp	r8, sl
 8006a40:	dbf3      	blt.n	8006a2a <_printf_float+0x3fa>
 8006a42:	464b      	mov	r3, r9
 8006a44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a48:	e6df      	b.n	800680a <_printf_float+0x1da>
 8006a4a:	f04f 0800 	mov.w	r8, #0
 8006a4e:	f104 0b1a 	add.w	fp, r4, #26
 8006a52:	e7f4      	b.n	8006a3e <_printf_float+0x40e>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4642      	mov	r2, r8
 8006a58:	e7e1      	b.n	8006a1e <_printf_float+0x3ee>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	464a      	mov	r2, r9
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f ae3e 	beq.w	80066e6 <_printf_float+0xb6>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a72:	1a5b      	subs	r3, r3, r1
 8006a74:	4543      	cmp	r3, r8
 8006a76:	dcf0      	bgt.n	8006a5a <_printf_float+0x42a>
 8006a78:	e6fc      	b.n	8006874 <_printf_float+0x244>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	f104 0919 	add.w	r9, r4, #25
 8006a82:	e7f4      	b.n	8006a6e <_printf_float+0x43e>

08006a84 <_printf_common>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	4616      	mov	r6, r2
 8006a8a:	4698      	mov	r8, r3
 8006a8c:	688a      	ldr	r2, [r1, #8]
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	bfb8      	it	lt
 8006a98:	4613      	movlt	r3, r2
 8006a9a:	6033      	str	r3, [r6, #0]
 8006a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b10a      	cbz	r2, 8006aaa <_printf_common+0x26>
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	0699      	lsls	r1, r3, #26
 8006aae:	bf42      	ittt	mi
 8006ab0:	6833      	ldrmi	r3, [r6, #0]
 8006ab2:	3302      	addmi	r3, #2
 8006ab4:	6033      	strmi	r3, [r6, #0]
 8006ab6:	6825      	ldr	r5, [r4, #0]
 8006ab8:	f015 0506 	ands.w	r5, r5, #6
 8006abc:	d106      	bne.n	8006acc <_printf_common+0x48>
 8006abe:	f104 0a19 	add.w	sl, r4, #25
 8006ac2:	68e3      	ldr	r3, [r4, #12]
 8006ac4:	6832      	ldr	r2, [r6, #0]
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	dc26      	bgt.n	8006b1a <_printf_common+0x96>
 8006acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	3b00      	subs	r3, #0
 8006ad4:	bf18      	it	ne
 8006ad6:	2301      	movne	r3, #1
 8006ad8:	0692      	lsls	r2, r2, #26
 8006ada:	d42b      	bmi.n	8006b34 <_printf_common+0xb0>
 8006adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	47c8      	blx	r9
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d01e      	beq.n	8006b28 <_printf_common+0xa4>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	6922      	ldr	r2, [r4, #16]
 8006aee:	f003 0306 	and.w	r3, r3, #6
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	bf02      	ittt	eq
 8006af6:	68e5      	ldreq	r5, [r4, #12]
 8006af8:	6833      	ldreq	r3, [r6, #0]
 8006afa:	1aed      	subeq	r5, r5, r3
 8006afc:	68a3      	ldr	r3, [r4, #8]
 8006afe:	bf0c      	ite	eq
 8006b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b04:	2500      	movne	r5, #0
 8006b06:	4293      	cmp	r3, r2
 8006b08:	bfc4      	itt	gt
 8006b0a:	1a9b      	subgt	r3, r3, r2
 8006b0c:	18ed      	addgt	r5, r5, r3
 8006b0e:	2600      	movs	r6, #0
 8006b10:	341a      	adds	r4, #26
 8006b12:	42b5      	cmp	r5, r6
 8006b14:	d11a      	bne.n	8006b4c <_printf_common+0xc8>
 8006b16:	2000      	movs	r0, #0
 8006b18:	e008      	b.n	8006b2c <_printf_common+0xa8>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4652      	mov	r2, sl
 8006b1e:	4641      	mov	r1, r8
 8006b20:	4638      	mov	r0, r7
 8006b22:	47c8      	blx	r9
 8006b24:	3001      	adds	r0, #1
 8006b26:	d103      	bne.n	8006b30 <_printf_common+0xac>
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b30:	3501      	adds	r5, #1
 8006b32:	e7c6      	b.n	8006ac2 <_printf_common+0x3e>
 8006b34:	18e1      	adds	r1, r4, r3
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	2030      	movs	r0, #48	@ 0x30
 8006b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b3e:	4422      	add	r2, r4
 8006b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b48:	3302      	adds	r3, #2
 8006b4a:	e7c7      	b.n	8006adc <_printf_common+0x58>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	4622      	mov	r2, r4
 8006b50:	4641      	mov	r1, r8
 8006b52:	4638      	mov	r0, r7
 8006b54:	47c8      	blx	r9
 8006b56:	3001      	adds	r0, #1
 8006b58:	d0e6      	beq.n	8006b28 <_printf_common+0xa4>
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	e7d9      	b.n	8006b12 <_printf_common+0x8e>
	...

08006b60 <_printf_i>:
 8006b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	7e0f      	ldrb	r7, [r1, #24]
 8006b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b68:	2f78      	cmp	r7, #120	@ 0x78
 8006b6a:	4691      	mov	r9, r2
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	469a      	mov	sl, r3
 8006b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b76:	d807      	bhi.n	8006b88 <_printf_i+0x28>
 8006b78:	2f62      	cmp	r7, #98	@ 0x62
 8006b7a:	d80a      	bhi.n	8006b92 <_printf_i+0x32>
 8006b7c:	2f00      	cmp	r7, #0
 8006b7e:	f000 80d2 	beq.w	8006d26 <_printf_i+0x1c6>
 8006b82:	2f58      	cmp	r7, #88	@ 0x58
 8006b84:	f000 80b9 	beq.w	8006cfa <_printf_i+0x19a>
 8006b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b90:	e03a      	b.n	8006c08 <_printf_i+0xa8>
 8006b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b96:	2b15      	cmp	r3, #21
 8006b98:	d8f6      	bhi.n	8006b88 <_printf_i+0x28>
 8006b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8006ba0 <_printf_i+0x40>)
 8006b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba0:	08006bf9 	.word	0x08006bf9
 8006ba4:	08006c0d 	.word	0x08006c0d
 8006ba8:	08006b89 	.word	0x08006b89
 8006bac:	08006b89 	.word	0x08006b89
 8006bb0:	08006b89 	.word	0x08006b89
 8006bb4:	08006b89 	.word	0x08006b89
 8006bb8:	08006c0d 	.word	0x08006c0d
 8006bbc:	08006b89 	.word	0x08006b89
 8006bc0:	08006b89 	.word	0x08006b89
 8006bc4:	08006b89 	.word	0x08006b89
 8006bc8:	08006b89 	.word	0x08006b89
 8006bcc:	08006d0d 	.word	0x08006d0d
 8006bd0:	08006c37 	.word	0x08006c37
 8006bd4:	08006cc7 	.word	0x08006cc7
 8006bd8:	08006b89 	.word	0x08006b89
 8006bdc:	08006b89 	.word	0x08006b89
 8006be0:	08006d2f 	.word	0x08006d2f
 8006be4:	08006b89 	.word	0x08006b89
 8006be8:	08006c37 	.word	0x08006c37
 8006bec:	08006b89 	.word	0x08006b89
 8006bf0:	08006b89 	.word	0x08006b89
 8006bf4:	08006ccf 	.word	0x08006ccf
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	1d1a      	adds	r2, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6032      	str	r2, [r6, #0]
 8006c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e09d      	b.n	8006d48 <_printf_i+0x1e8>
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	1d19      	adds	r1, r3, #4
 8006c12:	6031      	str	r1, [r6, #0]
 8006c14:	0606      	lsls	r6, r0, #24
 8006c16:	d501      	bpl.n	8006c1c <_printf_i+0xbc>
 8006c18:	681d      	ldr	r5, [r3, #0]
 8006c1a:	e003      	b.n	8006c24 <_printf_i+0xc4>
 8006c1c:	0645      	lsls	r5, r0, #25
 8006c1e:	d5fb      	bpl.n	8006c18 <_printf_i+0xb8>
 8006c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	da03      	bge.n	8006c30 <_printf_i+0xd0>
 8006c28:	232d      	movs	r3, #45	@ 0x2d
 8006c2a:	426d      	negs	r5, r5
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c30:	4859      	ldr	r0, [pc, #356]	@ (8006d98 <_printf_i+0x238>)
 8006c32:	230a      	movs	r3, #10
 8006c34:	e011      	b.n	8006c5a <_printf_i+0xfa>
 8006c36:	6821      	ldr	r1, [r4, #0]
 8006c38:	6833      	ldr	r3, [r6, #0]
 8006c3a:	0608      	lsls	r0, r1, #24
 8006c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c40:	d402      	bmi.n	8006c48 <_printf_i+0xe8>
 8006c42:	0649      	lsls	r1, r1, #25
 8006c44:	bf48      	it	mi
 8006c46:	b2ad      	uxthmi	r5, r5
 8006c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c4a:	4853      	ldr	r0, [pc, #332]	@ (8006d98 <_printf_i+0x238>)
 8006c4c:	6033      	str	r3, [r6, #0]
 8006c4e:	bf14      	ite	ne
 8006c50:	230a      	movne	r3, #10
 8006c52:	2308      	moveq	r3, #8
 8006c54:	2100      	movs	r1, #0
 8006c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c5a:	6866      	ldr	r6, [r4, #4]
 8006c5c:	60a6      	str	r6, [r4, #8]
 8006c5e:	2e00      	cmp	r6, #0
 8006c60:	bfa2      	ittt	ge
 8006c62:	6821      	ldrge	r1, [r4, #0]
 8006c64:	f021 0104 	bicge.w	r1, r1, #4
 8006c68:	6021      	strge	r1, [r4, #0]
 8006c6a:	b90d      	cbnz	r5, 8006c70 <_printf_i+0x110>
 8006c6c:	2e00      	cmp	r6, #0
 8006c6e:	d04b      	beq.n	8006d08 <_printf_i+0x1a8>
 8006c70:	4616      	mov	r6, r2
 8006c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c76:	fb03 5711 	mls	r7, r3, r1, r5
 8006c7a:	5dc7      	ldrb	r7, [r0, r7]
 8006c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c80:	462f      	mov	r7, r5
 8006c82:	42bb      	cmp	r3, r7
 8006c84:	460d      	mov	r5, r1
 8006c86:	d9f4      	bls.n	8006c72 <_printf_i+0x112>
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d10b      	bne.n	8006ca4 <_printf_i+0x144>
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	07df      	lsls	r7, r3, #31
 8006c90:	d508      	bpl.n	8006ca4 <_printf_i+0x144>
 8006c92:	6923      	ldr	r3, [r4, #16]
 8006c94:	6861      	ldr	r1, [r4, #4]
 8006c96:	4299      	cmp	r1, r3
 8006c98:	bfde      	ittt	le
 8006c9a:	2330      	movle	r3, #48	@ 0x30
 8006c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ca4:	1b92      	subs	r2, r2, r6
 8006ca6:	6122      	str	r2, [r4, #16]
 8006ca8:	f8cd a000 	str.w	sl, [sp]
 8006cac:	464b      	mov	r3, r9
 8006cae:	aa03      	add	r2, sp, #12
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	f7ff fee6 	bl	8006a84 <_printf_common>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d14a      	bne.n	8006d52 <_printf_i+0x1f2>
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	b004      	add	sp, #16
 8006cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f043 0320 	orr.w	r3, r3, #32
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	4833      	ldr	r0, [pc, #204]	@ (8006d9c <_printf_i+0x23c>)
 8006cd0:	2778      	movs	r7, #120	@ 0x78
 8006cd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	6831      	ldr	r1, [r6, #0]
 8006cda:	061f      	lsls	r7, r3, #24
 8006cdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ce0:	d402      	bmi.n	8006ce8 <_printf_i+0x188>
 8006ce2:	065f      	lsls	r7, r3, #25
 8006ce4:	bf48      	it	mi
 8006ce6:	b2ad      	uxthmi	r5, r5
 8006ce8:	6031      	str	r1, [r6, #0]
 8006cea:	07d9      	lsls	r1, r3, #31
 8006cec:	bf44      	itt	mi
 8006cee:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf2:	6023      	strmi	r3, [r4, #0]
 8006cf4:	b11d      	cbz	r5, 8006cfe <_printf_i+0x19e>
 8006cf6:	2310      	movs	r3, #16
 8006cf8:	e7ac      	b.n	8006c54 <_printf_i+0xf4>
 8006cfa:	4827      	ldr	r0, [pc, #156]	@ (8006d98 <_printf_i+0x238>)
 8006cfc:	e7e9      	b.n	8006cd2 <_printf_i+0x172>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f023 0320 	bic.w	r3, r3, #32
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	e7f6      	b.n	8006cf6 <_printf_i+0x196>
 8006d08:	4616      	mov	r6, r2
 8006d0a:	e7bd      	b.n	8006c88 <_printf_i+0x128>
 8006d0c:	6833      	ldr	r3, [r6, #0]
 8006d0e:	6825      	ldr	r5, [r4, #0]
 8006d10:	6961      	ldr	r1, [r4, #20]
 8006d12:	1d18      	adds	r0, r3, #4
 8006d14:	6030      	str	r0, [r6, #0]
 8006d16:	062e      	lsls	r6, r5, #24
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	d501      	bpl.n	8006d20 <_printf_i+0x1c0>
 8006d1c:	6019      	str	r1, [r3, #0]
 8006d1e:	e002      	b.n	8006d26 <_printf_i+0x1c6>
 8006d20:	0668      	lsls	r0, r5, #25
 8006d22:	d5fb      	bpl.n	8006d1c <_printf_i+0x1bc>
 8006d24:	8019      	strh	r1, [r3, #0]
 8006d26:	2300      	movs	r3, #0
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	4616      	mov	r6, r2
 8006d2c:	e7bc      	b.n	8006ca8 <_printf_i+0x148>
 8006d2e:	6833      	ldr	r3, [r6, #0]
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	6032      	str	r2, [r6, #0]
 8006d34:	681e      	ldr	r6, [r3, #0]
 8006d36:	6862      	ldr	r2, [r4, #4]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7f9 fa48 	bl	80001d0 <memchr>
 8006d40:	b108      	cbz	r0, 8006d46 <_printf_i+0x1e6>
 8006d42:	1b80      	subs	r0, r0, r6
 8006d44:	6060      	str	r0, [r4, #4]
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d50:	e7aa      	b.n	8006ca8 <_printf_i+0x148>
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	4632      	mov	r2, r6
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	47d0      	blx	sl
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d0ad      	beq.n	8006cbc <_printf_i+0x15c>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	079b      	lsls	r3, r3, #30
 8006d64:	d413      	bmi.n	8006d8e <_printf_i+0x22e>
 8006d66:	68e0      	ldr	r0, [r4, #12]
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	4298      	cmp	r0, r3
 8006d6c:	bfb8      	it	lt
 8006d6e:	4618      	movlt	r0, r3
 8006d70:	e7a6      	b.n	8006cc0 <_printf_i+0x160>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4632      	mov	r2, r6
 8006d76:	4649      	mov	r1, r9
 8006d78:	4640      	mov	r0, r8
 8006d7a:	47d0      	blx	sl
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d09d      	beq.n	8006cbc <_printf_i+0x15c>
 8006d80:	3501      	adds	r5, #1
 8006d82:	68e3      	ldr	r3, [r4, #12]
 8006d84:	9903      	ldr	r1, [sp, #12]
 8006d86:	1a5b      	subs	r3, r3, r1
 8006d88:	42ab      	cmp	r3, r5
 8006d8a:	dcf2      	bgt.n	8006d72 <_printf_i+0x212>
 8006d8c:	e7eb      	b.n	8006d66 <_printf_i+0x206>
 8006d8e:	2500      	movs	r5, #0
 8006d90:	f104 0619 	add.w	r6, r4, #25
 8006d94:	e7f5      	b.n	8006d82 <_printf_i+0x222>
 8006d96:	bf00      	nop
 8006d98:	08009dc6 	.word	0x08009dc6
 8006d9c:	08009dd7 	.word	0x08009dd7

08006da0 <std>:
 8006da0:	2300      	movs	r3, #0
 8006da2:	b510      	push	{r4, lr}
 8006da4:	4604      	mov	r4, r0
 8006da6:	e9c0 3300 	strd	r3, r3, [r0]
 8006daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dae:	6083      	str	r3, [r0, #8]
 8006db0:	8181      	strh	r1, [r0, #12]
 8006db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006db4:	81c2      	strh	r2, [r0, #14]
 8006db6:	6183      	str	r3, [r0, #24]
 8006db8:	4619      	mov	r1, r3
 8006dba:	2208      	movs	r2, #8
 8006dbc:	305c      	adds	r0, #92	@ 0x5c
 8006dbe:	f000 f9f9 	bl	80071b4 <memset>
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x58>)
 8006dc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <std+0x5c>)
 8006dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dca:	4b0d      	ldr	r3, [pc, #52]	@ (8006e00 <std+0x60>)
 8006dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dce:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <std+0x64>)
 8006dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <std+0x68>)
 8006dd4:	6224      	str	r4, [r4, #32]
 8006dd6:	429c      	cmp	r4, r3
 8006dd8:	d006      	beq.n	8006de8 <std+0x48>
 8006dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dde:	4294      	cmp	r4, r2
 8006de0:	d002      	beq.n	8006de8 <std+0x48>
 8006de2:	33d0      	adds	r3, #208	@ 0xd0
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d105      	bne.n	8006df4 <std+0x54>
 8006de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df0:	f000 ba5c 	b.w	80072ac <__retarget_lock_init_recursive>
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	bf00      	nop
 8006df8:	08007005 	.word	0x08007005
 8006dfc:	08007027 	.word	0x08007027
 8006e00:	0800705f 	.word	0x0800705f
 8006e04:	08007083 	.word	0x08007083
 8006e08:	20001354 	.word	0x20001354

08006e0c <stdio_exit_handler>:
 8006e0c:	4a02      	ldr	r2, [pc, #8]	@ (8006e18 <stdio_exit_handler+0xc>)
 8006e0e:	4903      	ldr	r1, [pc, #12]	@ (8006e1c <stdio_exit_handler+0x10>)
 8006e10:	4803      	ldr	r0, [pc, #12]	@ (8006e20 <stdio_exit_handler+0x14>)
 8006e12:	f000 b869 	b.w	8006ee8 <_fwalk_sglue>
 8006e16:	bf00      	nop
 8006e18:	20000018 	.word	0x20000018
 8006e1c:	08008be1 	.word	0x08008be1
 8006e20:	20000028 	.word	0x20000028

08006e24 <cleanup_stdio>:
 8006e24:	6841      	ldr	r1, [r0, #4]
 8006e26:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <cleanup_stdio+0x34>)
 8006e28:	4299      	cmp	r1, r3
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	d001      	beq.n	8006e34 <cleanup_stdio+0x10>
 8006e30:	f001 fed6 	bl	8008be0 <_fflush_r>
 8006e34:	68a1      	ldr	r1, [r4, #8]
 8006e36:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <cleanup_stdio+0x38>)
 8006e38:	4299      	cmp	r1, r3
 8006e3a:	d002      	beq.n	8006e42 <cleanup_stdio+0x1e>
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f001 fecf 	bl	8008be0 <_fflush_r>
 8006e42:	68e1      	ldr	r1, [r4, #12]
 8006e44:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <cleanup_stdio+0x3c>)
 8006e46:	4299      	cmp	r1, r3
 8006e48:	d004      	beq.n	8006e54 <cleanup_stdio+0x30>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e50:	f001 bec6 	b.w	8008be0 <_fflush_r>
 8006e54:	bd10      	pop	{r4, pc}
 8006e56:	bf00      	nop
 8006e58:	20001354 	.word	0x20001354
 8006e5c:	200013bc 	.word	0x200013bc
 8006e60:	20001424 	.word	0x20001424

08006e64 <global_stdio_init.part.0>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <global_stdio_init.part.0+0x30>)
 8006e68:	4c0b      	ldr	r4, [pc, #44]	@ (8006e98 <global_stdio_init.part.0+0x34>)
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e9c <global_stdio_init.part.0+0x38>)
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	2200      	movs	r2, #0
 8006e72:	2104      	movs	r1, #4
 8006e74:	f7ff ff94 	bl	8006da0 <std>
 8006e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	2109      	movs	r1, #9
 8006e80:	f7ff ff8e 	bl	8006da0 <std>
 8006e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e88:	2202      	movs	r2, #2
 8006e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8e:	2112      	movs	r1, #18
 8006e90:	f7ff bf86 	b.w	8006da0 <std>
 8006e94:	2000148c 	.word	0x2000148c
 8006e98:	20001354 	.word	0x20001354
 8006e9c:	08006e0d 	.word	0x08006e0d

08006ea0 <__sfp_lock_acquire>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	@ (8006ea8 <__sfp_lock_acquire+0x8>)
 8006ea2:	f000 ba04 	b.w	80072ae <__retarget_lock_acquire_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	20001495 	.word	0x20001495

08006eac <__sfp_lock_release>:
 8006eac:	4801      	ldr	r0, [pc, #4]	@ (8006eb4 <__sfp_lock_release+0x8>)
 8006eae:	f000 b9ff 	b.w	80072b0 <__retarget_lock_release_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	20001495 	.word	0x20001495

08006eb8 <__sinit>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	f7ff fff0 	bl	8006ea0 <__sfp_lock_acquire>
 8006ec0:	6a23      	ldr	r3, [r4, #32]
 8006ec2:	b11b      	cbz	r3, 8006ecc <__sinit+0x14>
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f7ff bff0 	b.w	8006eac <__sfp_lock_release>
 8006ecc:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <__sinit+0x28>)
 8006ece:	6223      	str	r3, [r4, #32]
 8006ed0:	4b04      	ldr	r3, [pc, #16]	@ (8006ee4 <__sinit+0x2c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f5      	bne.n	8006ec4 <__sinit+0xc>
 8006ed8:	f7ff ffc4 	bl	8006e64 <global_stdio_init.part.0>
 8006edc:	e7f2      	b.n	8006ec4 <__sinit+0xc>
 8006ede:	bf00      	nop
 8006ee0:	08006e25 	.word	0x08006e25
 8006ee4:	2000148c 	.word	0x2000148c

08006ee8 <_fwalk_sglue>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	4607      	mov	r7, r0
 8006eee:	4688      	mov	r8, r1
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8006efc:	d505      	bpl.n	8006f0a <_fwalk_sglue+0x22>
 8006efe:	6824      	ldr	r4, [r4, #0]
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d1f7      	bne.n	8006ef4 <_fwalk_sglue+0xc>
 8006f04:	4630      	mov	r0, r6
 8006f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d907      	bls.n	8006f20 <_fwalk_sglue+0x38>
 8006f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f14:	3301      	adds	r3, #1
 8006f16:	d003      	beq.n	8006f20 <_fwalk_sglue+0x38>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	47c0      	blx	r8
 8006f1e:	4306      	orrs	r6, r0
 8006f20:	3568      	adds	r5, #104	@ 0x68
 8006f22:	e7e9      	b.n	8006ef8 <_fwalk_sglue+0x10>

08006f24 <iprintf>:
 8006f24:	b40f      	push	{r0, r1, r2, r3}
 8006f26:	b507      	push	{r0, r1, r2, lr}
 8006f28:	4906      	ldr	r1, [pc, #24]	@ (8006f44 <iprintf+0x20>)
 8006f2a:	ab04      	add	r3, sp, #16
 8006f2c:	6808      	ldr	r0, [r1, #0]
 8006f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f32:	6881      	ldr	r1, [r0, #8]
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	f001 fcb7 	bl	80088a8 <_vfiprintf_r>
 8006f3a:	b003      	add	sp, #12
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b004      	add	sp, #16
 8006f42:	4770      	bx	lr
 8006f44:	20000024 	.word	0x20000024

08006f48 <_puts_r>:
 8006f48:	6a03      	ldr	r3, [r0, #32]
 8006f4a:	b570      	push	{r4, r5, r6, lr}
 8006f4c:	6884      	ldr	r4, [r0, #8]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	460e      	mov	r6, r1
 8006f52:	b90b      	cbnz	r3, 8006f58 <_puts_r+0x10>
 8006f54:	f7ff ffb0 	bl	8006eb8 <__sinit>
 8006f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f5a:	07db      	lsls	r3, r3, #31
 8006f5c:	d405      	bmi.n	8006f6a <_puts_r+0x22>
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	0598      	lsls	r0, r3, #22
 8006f62:	d402      	bmi.n	8006f6a <_puts_r+0x22>
 8006f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f66:	f000 f9a2 	bl	80072ae <__retarget_lock_acquire_recursive>
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	0719      	lsls	r1, r3, #28
 8006f6e:	d502      	bpl.n	8006f76 <_puts_r+0x2e>
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d135      	bne.n	8006fe2 <_puts_r+0x9a>
 8006f76:	4621      	mov	r1, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f000 f8c5 	bl	8007108 <__swsetup_r>
 8006f7e:	b380      	cbz	r0, 8006fe2 <_puts_r+0x9a>
 8006f80:	f04f 35ff 	mov.w	r5, #4294967295
 8006f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d405      	bmi.n	8006f96 <_puts_r+0x4e>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	059b      	lsls	r3, r3, #22
 8006f8e:	d402      	bmi.n	8006f96 <_puts_r+0x4e>
 8006f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f92:	f000 f98d 	bl	80072b0 <__retarget_lock_release_recursive>
 8006f96:	4628      	mov	r0, r5
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da04      	bge.n	8006fa8 <_puts_r+0x60>
 8006f9e:	69a2      	ldr	r2, [r4, #24]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	dc17      	bgt.n	8006fd4 <_puts_r+0x8c>
 8006fa4:	290a      	cmp	r1, #10
 8006fa6:	d015      	beq.n	8006fd4 <_puts_r+0x8c>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	7019      	strb	r1, [r3, #0]
 8006fb0:	68a3      	ldr	r3, [r4, #8]
 8006fb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	60a3      	str	r3, [r4, #8]
 8006fba:	2900      	cmp	r1, #0
 8006fbc:	d1ed      	bne.n	8006f9a <_puts_r+0x52>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	da11      	bge.n	8006fe6 <_puts_r+0x9e>
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	210a      	movs	r1, #10
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f000 f85f 	bl	800708a <__swbuf_r>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d0d7      	beq.n	8006f80 <_puts_r+0x38>
 8006fd0:	250a      	movs	r5, #10
 8006fd2:	e7d7      	b.n	8006f84 <_puts_r+0x3c>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 f857 	bl	800708a <__swbuf_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d1e7      	bne.n	8006fb0 <_puts_r+0x68>
 8006fe0:	e7ce      	b.n	8006f80 <_puts_r+0x38>
 8006fe2:	3e01      	subs	r6, #1
 8006fe4:	e7e4      	b.n	8006fb0 <_puts_r+0x68>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	6022      	str	r2, [r4, #0]
 8006fec:	220a      	movs	r2, #10
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	e7ee      	b.n	8006fd0 <_puts_r+0x88>
	...

08006ff4 <puts>:
 8006ff4:	4b02      	ldr	r3, [pc, #8]	@ (8007000 <puts+0xc>)
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	f7ff bfa5 	b.w	8006f48 <_puts_r>
 8006ffe:	bf00      	nop
 8007000:	20000024 	.word	0x20000024

08007004 <__sread>:
 8007004:	b510      	push	{r4, lr}
 8007006:	460c      	mov	r4, r1
 8007008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700c:	f000 f900 	bl	8007210 <_read_r>
 8007010:	2800      	cmp	r0, #0
 8007012:	bfab      	itete	ge
 8007014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007016:	89a3      	ldrhlt	r3, [r4, #12]
 8007018:	181b      	addge	r3, r3, r0
 800701a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800701e:	bfac      	ite	ge
 8007020:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007022:	81a3      	strhlt	r3, [r4, #12]
 8007024:	bd10      	pop	{r4, pc}

08007026 <__swrite>:
 8007026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702a:	461f      	mov	r7, r3
 800702c:	898b      	ldrh	r3, [r1, #12]
 800702e:	05db      	lsls	r3, r3, #23
 8007030:	4605      	mov	r5, r0
 8007032:	460c      	mov	r4, r1
 8007034:	4616      	mov	r6, r2
 8007036:	d505      	bpl.n	8007044 <__swrite+0x1e>
 8007038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703c:	2302      	movs	r3, #2
 800703e:	2200      	movs	r2, #0
 8007040:	f000 f8d4 	bl	80071ec <_lseek_r>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800704a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	4632      	mov	r2, r6
 8007052:	463b      	mov	r3, r7
 8007054:	4628      	mov	r0, r5
 8007056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800705a:	f000 b8eb 	b.w	8007234 <_write_r>

0800705e <__sseek>:
 800705e:	b510      	push	{r4, lr}
 8007060:	460c      	mov	r4, r1
 8007062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007066:	f000 f8c1 	bl	80071ec <_lseek_r>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	bf15      	itete	ne
 8007070:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800707a:	81a3      	strheq	r3, [r4, #12]
 800707c:	bf18      	it	ne
 800707e:	81a3      	strhne	r3, [r4, #12]
 8007080:	bd10      	pop	{r4, pc}

08007082 <__sclose>:
 8007082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007086:	f000 b8a1 	b.w	80071cc <_close_r>

0800708a <__swbuf_r>:
 800708a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708c:	460e      	mov	r6, r1
 800708e:	4614      	mov	r4, r2
 8007090:	4605      	mov	r5, r0
 8007092:	b118      	cbz	r0, 800709c <__swbuf_r+0x12>
 8007094:	6a03      	ldr	r3, [r0, #32]
 8007096:	b90b      	cbnz	r3, 800709c <__swbuf_r+0x12>
 8007098:	f7ff ff0e 	bl	8006eb8 <__sinit>
 800709c:	69a3      	ldr	r3, [r4, #24]
 800709e:	60a3      	str	r3, [r4, #8]
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	071a      	lsls	r2, r3, #28
 80070a4:	d501      	bpl.n	80070aa <__swbuf_r+0x20>
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	b943      	cbnz	r3, 80070bc <__swbuf_r+0x32>
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f82b 	bl	8007108 <__swsetup_r>
 80070b2:	b118      	cbz	r0, 80070bc <__swbuf_r+0x32>
 80070b4:	f04f 37ff 	mov.w	r7, #4294967295
 80070b8:	4638      	mov	r0, r7
 80070ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	6922      	ldr	r2, [r4, #16]
 80070c0:	1a98      	subs	r0, r3, r2
 80070c2:	6963      	ldr	r3, [r4, #20]
 80070c4:	b2f6      	uxtb	r6, r6
 80070c6:	4283      	cmp	r3, r0
 80070c8:	4637      	mov	r7, r6
 80070ca:	dc05      	bgt.n	80070d8 <__swbuf_r+0x4e>
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f001 fd86 	bl	8008be0 <_fflush_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d1ed      	bne.n	80070b4 <__swbuf_r+0x2a>
 80070d8:	68a3      	ldr	r3, [r4, #8]
 80070da:	3b01      	subs	r3, #1
 80070dc:	60a3      	str	r3, [r4, #8]
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	701e      	strb	r6, [r3, #0]
 80070e6:	6962      	ldr	r2, [r4, #20]
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d004      	beq.n	80070f8 <__swbuf_r+0x6e>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	07db      	lsls	r3, r3, #31
 80070f2:	d5e1      	bpl.n	80070b8 <__swbuf_r+0x2e>
 80070f4:	2e0a      	cmp	r6, #10
 80070f6:	d1df      	bne.n	80070b8 <__swbuf_r+0x2e>
 80070f8:	4621      	mov	r1, r4
 80070fa:	4628      	mov	r0, r5
 80070fc:	f001 fd70 	bl	8008be0 <_fflush_r>
 8007100:	2800      	cmp	r0, #0
 8007102:	d0d9      	beq.n	80070b8 <__swbuf_r+0x2e>
 8007104:	e7d6      	b.n	80070b4 <__swbuf_r+0x2a>
	...

08007108 <__swsetup_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <__swsetup_r+0xa8>)
 800710c:	4605      	mov	r5, r0
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	460c      	mov	r4, r1
 8007112:	b118      	cbz	r0, 800711c <__swsetup_r+0x14>
 8007114:	6a03      	ldr	r3, [r0, #32]
 8007116:	b90b      	cbnz	r3, 800711c <__swsetup_r+0x14>
 8007118:	f7ff fece 	bl	8006eb8 <__sinit>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	0719      	lsls	r1, r3, #28
 8007122:	d422      	bmi.n	800716a <__swsetup_r+0x62>
 8007124:	06da      	lsls	r2, r3, #27
 8007126:	d407      	bmi.n	8007138 <__swsetup_r+0x30>
 8007128:	2209      	movs	r2, #9
 800712a:	602a      	str	r2, [r5, #0]
 800712c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	e033      	b.n	80071a0 <__swsetup_r+0x98>
 8007138:	0758      	lsls	r0, r3, #29
 800713a:	d512      	bpl.n	8007162 <__swsetup_r+0x5a>
 800713c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800713e:	b141      	cbz	r1, 8007152 <__swsetup_r+0x4a>
 8007140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <__swsetup_r+0x46>
 8007148:	4628      	mov	r0, r5
 800714a:	f000 ff01 	bl	8007f50 <_free_r>
 800714e:	2300      	movs	r3, #0
 8007150:	6363      	str	r3, [r4, #52]	@ 0x34
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	2300      	movs	r3, #0
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f043 0308 	orr.w	r3, r3, #8
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	b94b      	cbnz	r3, 8007182 <__swsetup_r+0x7a>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007178:	d003      	beq.n	8007182 <__swsetup_r+0x7a>
 800717a:	4621      	mov	r1, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f001 fd7d 	bl	8008c7c <__smakebuf_r>
 8007182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007186:	f013 0201 	ands.w	r2, r3, #1
 800718a:	d00a      	beq.n	80071a2 <__swsetup_r+0x9a>
 800718c:	2200      	movs	r2, #0
 800718e:	60a2      	str	r2, [r4, #8]
 8007190:	6962      	ldr	r2, [r4, #20]
 8007192:	4252      	negs	r2, r2
 8007194:	61a2      	str	r2, [r4, #24]
 8007196:	6922      	ldr	r2, [r4, #16]
 8007198:	b942      	cbnz	r2, 80071ac <__swsetup_r+0xa4>
 800719a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800719e:	d1c5      	bne.n	800712c <__swsetup_r+0x24>
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	0799      	lsls	r1, r3, #30
 80071a4:	bf58      	it	pl
 80071a6:	6962      	ldrpl	r2, [r4, #20]
 80071a8:	60a2      	str	r2, [r4, #8]
 80071aa:	e7f4      	b.n	8007196 <__swsetup_r+0x8e>
 80071ac:	2000      	movs	r0, #0
 80071ae:	e7f7      	b.n	80071a0 <__swsetup_r+0x98>
 80071b0:	20000024 	.word	0x20000024

080071b4 <memset>:
 80071b4:	4402      	add	r2, r0
 80071b6:	4603      	mov	r3, r0
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d100      	bne.n	80071be <memset+0xa>
 80071bc:	4770      	bx	lr
 80071be:	f803 1b01 	strb.w	r1, [r3], #1
 80071c2:	e7f9      	b.n	80071b8 <memset+0x4>

080071c4 <_localeconv_r>:
 80071c4:	4800      	ldr	r0, [pc, #0]	@ (80071c8 <_localeconv_r+0x4>)
 80071c6:	4770      	bx	lr
 80071c8:	20000164 	.word	0x20000164

080071cc <_close_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4d06      	ldr	r5, [pc, #24]	@ (80071e8 <_close_r+0x1c>)
 80071d0:	2300      	movs	r3, #0
 80071d2:	4604      	mov	r4, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	602b      	str	r3, [r5, #0]
 80071d8:	f7fa fe96 	bl	8001f08 <_close>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_close_r+0x1a>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_close_r+0x1a>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	20001490 	.word	0x20001490

080071ec <_lseek_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	@ (800720c <_lseek_r+0x20>)
 80071f0:	4604      	mov	r4, r0
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	2200      	movs	r2, #0
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7fa feab 	bl	8001f56 <_lseek>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_lseek_r+0x1e>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_lseek_r+0x1e>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20001490 	.word	0x20001490

08007210 <_read_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	@ (8007230 <_read_r+0x20>)
 8007214:	4604      	mov	r4, r0
 8007216:	4608      	mov	r0, r1
 8007218:	4611      	mov	r1, r2
 800721a:	2200      	movs	r2, #0
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7fa fe39 	bl	8001e96 <_read>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_read_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_read_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20001490 	.word	0x20001490

08007234 <_write_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d07      	ldr	r5, [pc, #28]	@ (8007254 <_write_r+0x20>)
 8007238:	4604      	mov	r4, r0
 800723a:	4608      	mov	r0, r1
 800723c:	4611      	mov	r1, r2
 800723e:	2200      	movs	r2, #0
 8007240:	602a      	str	r2, [r5, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f7fa fe44 	bl	8001ed0 <_write>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_write_r+0x1e>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_write_r+0x1e>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	20001490 	.word	0x20001490

08007258 <__errno>:
 8007258:	4b01      	ldr	r3, [pc, #4]	@ (8007260 <__errno+0x8>)
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	20000024 	.word	0x20000024

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4d0d      	ldr	r5, [pc, #52]	@ (800729c <__libc_init_array+0x38>)
 8007268:	4c0d      	ldr	r4, [pc, #52]	@ (80072a0 <__libc_init_array+0x3c>)
 800726a:	1b64      	subs	r4, r4, r5
 800726c:	10a4      	asrs	r4, r4, #2
 800726e:	2600      	movs	r6, #0
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	4d0b      	ldr	r5, [pc, #44]	@ (80072a4 <__libc_init_array+0x40>)
 8007276:	4c0c      	ldr	r4, [pc, #48]	@ (80072a8 <__libc_init_array+0x44>)
 8007278:	f001 fe4e 	bl	8008f18 <_init>
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	2600      	movs	r6, #0
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	0800a130 	.word	0x0800a130
 80072a0:	0800a130 	.word	0x0800a130
 80072a4:	0800a130 	.word	0x0800a130
 80072a8:	0800a134 	.word	0x0800a134

080072ac <__retarget_lock_init_recursive>:
 80072ac:	4770      	bx	lr

080072ae <__retarget_lock_acquire_recursive>:
 80072ae:	4770      	bx	lr

080072b0 <__retarget_lock_release_recursive>:
 80072b0:	4770      	bx	lr

080072b2 <quorem>:
 80072b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b6:	6903      	ldr	r3, [r0, #16]
 80072b8:	690c      	ldr	r4, [r1, #16]
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	4607      	mov	r7, r0
 80072be:	db7e      	blt.n	80073be <quorem+0x10c>
 80072c0:	3c01      	subs	r4, #1
 80072c2:	f101 0814 	add.w	r8, r1, #20
 80072c6:	00a3      	lsls	r3, r4, #2
 80072c8:	f100 0514 	add.w	r5, r0, #20
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072dc:	3301      	adds	r3, #1
 80072de:	429a      	cmp	r2, r3
 80072e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80072e8:	d32e      	bcc.n	8007348 <quorem+0x96>
 80072ea:	f04f 0a00 	mov.w	sl, #0
 80072ee:	46c4      	mov	ip, r8
 80072f0:	46ae      	mov	lr, r5
 80072f2:	46d3      	mov	fp, sl
 80072f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072f8:	b298      	uxth	r0, r3
 80072fa:	fb06 a000 	mla	r0, r6, r0, sl
 80072fe:	0c02      	lsrs	r2, r0, #16
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	fb06 2303 	mla	r3, r6, r3, r2
 8007306:	f8de 2000 	ldr.w	r2, [lr]
 800730a:	b280      	uxth	r0, r0
 800730c:	b292      	uxth	r2, r2
 800730e:	1a12      	subs	r2, r2, r0
 8007310:	445a      	add	r2, fp
 8007312:	f8de 0000 	ldr.w	r0, [lr]
 8007316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800731a:	b29b      	uxth	r3, r3
 800731c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007320:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007324:	b292      	uxth	r2, r2
 8007326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800732a:	45e1      	cmp	r9, ip
 800732c:	f84e 2b04 	str.w	r2, [lr], #4
 8007330:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007334:	d2de      	bcs.n	80072f4 <quorem+0x42>
 8007336:	9b00      	ldr	r3, [sp, #0]
 8007338:	58eb      	ldr	r3, [r5, r3]
 800733a:	b92b      	cbnz	r3, 8007348 <quorem+0x96>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	3b04      	subs	r3, #4
 8007340:	429d      	cmp	r5, r3
 8007342:	461a      	mov	r2, r3
 8007344:	d32f      	bcc.n	80073a6 <quorem+0xf4>
 8007346:	613c      	str	r4, [r7, #16]
 8007348:	4638      	mov	r0, r7
 800734a:	f001 f97b 	bl	8008644 <__mcmp>
 800734e:	2800      	cmp	r0, #0
 8007350:	db25      	blt.n	800739e <quorem+0xec>
 8007352:	4629      	mov	r1, r5
 8007354:	2000      	movs	r0, #0
 8007356:	f858 2b04 	ldr.w	r2, [r8], #4
 800735a:	f8d1 c000 	ldr.w	ip, [r1]
 800735e:	fa1f fe82 	uxth.w	lr, r2
 8007362:	fa1f f38c 	uxth.w	r3, ip
 8007366:	eba3 030e 	sub.w	r3, r3, lr
 800736a:	4403      	add	r3, r0
 800736c:	0c12      	lsrs	r2, r2, #16
 800736e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007372:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800737c:	45c1      	cmp	r9, r8
 800737e:	f841 3b04 	str.w	r3, [r1], #4
 8007382:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007386:	d2e6      	bcs.n	8007356 <quorem+0xa4>
 8007388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800738c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007390:	b922      	cbnz	r2, 800739c <quorem+0xea>
 8007392:	3b04      	subs	r3, #4
 8007394:	429d      	cmp	r5, r3
 8007396:	461a      	mov	r2, r3
 8007398:	d30b      	bcc.n	80073b2 <quorem+0x100>
 800739a:	613c      	str	r4, [r7, #16]
 800739c:	3601      	adds	r6, #1
 800739e:	4630      	mov	r0, r6
 80073a0:	b003      	add	sp, #12
 80073a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	3b04      	subs	r3, #4
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	d1cb      	bne.n	8007346 <quorem+0x94>
 80073ae:	3c01      	subs	r4, #1
 80073b0:	e7c6      	b.n	8007340 <quorem+0x8e>
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	3b04      	subs	r3, #4
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	d1ef      	bne.n	800739a <quorem+0xe8>
 80073ba:	3c01      	subs	r4, #1
 80073bc:	e7ea      	b.n	8007394 <quorem+0xe2>
 80073be:	2000      	movs	r0, #0
 80073c0:	e7ee      	b.n	80073a0 <quorem+0xee>
 80073c2:	0000      	movs	r0, r0
 80073c4:	0000      	movs	r0, r0
	...

080073c8 <_dtoa_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	69c7      	ldr	r7, [r0, #28]
 80073ce:	b099      	sub	sp, #100	@ 0x64
 80073d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073d4:	ec55 4b10 	vmov	r4, r5, d0
 80073d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073da:	9109      	str	r1, [sp, #36]	@ 0x24
 80073dc:	4683      	mov	fp, r0
 80073de:	920e      	str	r2, [sp, #56]	@ 0x38
 80073e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073e2:	b97f      	cbnz	r7, 8007404 <_dtoa_r+0x3c>
 80073e4:	2010      	movs	r0, #16
 80073e6:	f000 fdfd 	bl	8007fe4 <malloc>
 80073ea:	4602      	mov	r2, r0
 80073ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80073f0:	b920      	cbnz	r0, 80073fc <_dtoa_r+0x34>
 80073f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007690 <_dtoa_r+0x2c8>)
 80073f4:	21ef      	movs	r1, #239	@ 0xef
 80073f6:	48a7      	ldr	r0, [pc, #668]	@ (8007694 <_dtoa_r+0x2cc>)
 80073f8:	f001 fcbc 	bl	8008d74 <__assert_func>
 80073fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007400:	6007      	str	r7, [r0, #0]
 8007402:	60c7      	str	r7, [r0, #12]
 8007404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	b159      	cbz	r1, 8007424 <_dtoa_r+0x5c>
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	604a      	str	r2, [r1, #4]
 8007410:	2301      	movs	r3, #1
 8007412:	4093      	lsls	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
 8007416:	4658      	mov	r0, fp
 8007418:	f000 feda 	bl	80081d0 <_Bfree>
 800741c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	1e2b      	subs	r3, r5, #0
 8007426:	bfb9      	ittee	lt
 8007428:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800742c:	9303      	strlt	r3, [sp, #12]
 800742e:	2300      	movge	r3, #0
 8007430:	6033      	strge	r3, [r6, #0]
 8007432:	9f03      	ldr	r7, [sp, #12]
 8007434:	4b98      	ldr	r3, [pc, #608]	@ (8007698 <_dtoa_r+0x2d0>)
 8007436:	bfbc      	itt	lt
 8007438:	2201      	movlt	r2, #1
 800743a:	6032      	strlt	r2, [r6, #0]
 800743c:	43bb      	bics	r3, r7
 800743e:	d112      	bne.n	8007466 <_dtoa_r+0x9e>
 8007440:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007442:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800744c:	4323      	orrs	r3, r4
 800744e:	f000 854d 	beq.w	8007eec <_dtoa_r+0xb24>
 8007452:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007454:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80076ac <_dtoa_r+0x2e4>
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 854f 	beq.w	8007efc <_dtoa_r+0xb34>
 800745e:	f10a 0303 	add.w	r3, sl, #3
 8007462:	f000 bd49 	b.w	8007ef8 <_dtoa_r+0xb30>
 8007466:	ed9d 7b02 	vldr	d7, [sp, #8]
 800746a:	2200      	movs	r2, #0
 800746c:	ec51 0b17 	vmov	r0, r1, d7
 8007470:	2300      	movs	r3, #0
 8007472:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007476:	f7f9 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800747a:	4680      	mov	r8, r0
 800747c:	b158      	cbz	r0, 8007496 <_dtoa_r+0xce>
 800747e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007480:	2301      	movs	r3, #1
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007486:	b113      	cbz	r3, 800748e <_dtoa_r+0xc6>
 8007488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800748a:	4b84      	ldr	r3, [pc, #528]	@ (800769c <_dtoa_r+0x2d4>)
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80076b0 <_dtoa_r+0x2e8>
 8007492:	f000 bd33 	b.w	8007efc <_dtoa_r+0xb34>
 8007496:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800749a:	aa16      	add	r2, sp, #88	@ 0x58
 800749c:	a917      	add	r1, sp, #92	@ 0x5c
 800749e:	4658      	mov	r0, fp
 80074a0:	f001 f980 	bl	80087a4 <__d2b>
 80074a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80074a8:	4681      	mov	r9, r0
 80074aa:	2e00      	cmp	r6, #0
 80074ac:	d077      	beq.n	800759e <_dtoa_r+0x1d6>
 80074ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80074b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074c8:	4619      	mov	r1, r3
 80074ca:	2200      	movs	r2, #0
 80074cc:	4b74      	ldr	r3, [pc, #464]	@ (80076a0 <_dtoa_r+0x2d8>)
 80074ce:	f7f8 fedb 	bl	8000288 <__aeabi_dsub>
 80074d2:	a369      	add	r3, pc, #420	@ (adr r3, 8007678 <_dtoa_r+0x2b0>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f9 f88e 	bl	80005f8 <__aeabi_dmul>
 80074dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007680 <_dtoa_r+0x2b8>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	f7f8 fed3 	bl	800028c <__adddf3>
 80074e6:	4604      	mov	r4, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	460d      	mov	r5, r1
 80074ec:	f7f9 f81a 	bl	8000524 <__aeabi_i2d>
 80074f0:	a365      	add	r3, pc, #404	@ (adr r3, 8007688 <_dtoa_r+0x2c0>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f9 f87f 	bl	80005f8 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f8 fec3 	bl	800028c <__adddf3>
 8007506:	4604      	mov	r4, r0
 8007508:	460d      	mov	r5, r1
 800750a:	f7f9 fb25 	bl	8000b58 <__aeabi_d2iz>
 800750e:	2200      	movs	r2, #0
 8007510:	4607      	mov	r7, r0
 8007512:	2300      	movs	r3, #0
 8007514:	4620      	mov	r0, r4
 8007516:	4629      	mov	r1, r5
 8007518:	f7f9 fae0 	bl	8000adc <__aeabi_dcmplt>
 800751c:	b140      	cbz	r0, 8007530 <_dtoa_r+0x168>
 800751e:	4638      	mov	r0, r7
 8007520:	f7f9 f800 	bl	8000524 <__aeabi_i2d>
 8007524:	4622      	mov	r2, r4
 8007526:	462b      	mov	r3, r5
 8007528:	f7f9 face 	bl	8000ac8 <__aeabi_dcmpeq>
 800752c:	b900      	cbnz	r0, 8007530 <_dtoa_r+0x168>
 800752e:	3f01      	subs	r7, #1
 8007530:	2f16      	cmp	r7, #22
 8007532:	d851      	bhi.n	80075d8 <_dtoa_r+0x210>
 8007534:	4b5b      	ldr	r3, [pc, #364]	@ (80076a4 <_dtoa_r+0x2dc>)
 8007536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007542:	f7f9 facb 	bl	8000adc <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	d048      	beq.n	80075dc <_dtoa_r+0x214>
 800754a:	3f01      	subs	r7, #1
 800754c:	2300      	movs	r3, #0
 800754e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007550:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007552:	1b9b      	subs	r3, r3, r6
 8007554:	1e5a      	subs	r2, r3, #1
 8007556:	bf44      	itt	mi
 8007558:	f1c3 0801 	rsbmi	r8, r3, #1
 800755c:	2300      	movmi	r3, #0
 800755e:	9208      	str	r2, [sp, #32]
 8007560:	bf54      	ite	pl
 8007562:	f04f 0800 	movpl.w	r8, #0
 8007566:	9308      	strmi	r3, [sp, #32]
 8007568:	2f00      	cmp	r7, #0
 800756a:	db39      	blt.n	80075e0 <_dtoa_r+0x218>
 800756c:	9b08      	ldr	r3, [sp, #32]
 800756e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007570:	443b      	add	r3, r7
 8007572:	9308      	str	r3, [sp, #32]
 8007574:	2300      	movs	r3, #0
 8007576:	930a      	str	r3, [sp, #40]	@ 0x28
 8007578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757a:	2b09      	cmp	r3, #9
 800757c:	d864      	bhi.n	8007648 <_dtoa_r+0x280>
 800757e:	2b05      	cmp	r3, #5
 8007580:	bfc4      	itt	gt
 8007582:	3b04      	subgt	r3, #4
 8007584:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007588:	f1a3 0302 	sub.w	r3, r3, #2
 800758c:	bfcc      	ite	gt
 800758e:	2400      	movgt	r4, #0
 8007590:	2401      	movle	r4, #1
 8007592:	2b03      	cmp	r3, #3
 8007594:	d863      	bhi.n	800765e <_dtoa_r+0x296>
 8007596:	e8df f003 	tbb	[pc, r3]
 800759a:	372a      	.short	0x372a
 800759c:	5535      	.short	0x5535
 800759e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80075a2:	441e      	add	r6, r3
 80075a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	bfc1      	itttt	gt
 80075ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075b0:	409f      	lslgt	r7, r3
 80075b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075ba:	bfd6      	itet	le
 80075bc:	f1c3 0320 	rsble	r3, r3, #32
 80075c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80075c4:	fa04 f003 	lslle.w	r0, r4, r3
 80075c8:	f7f8 ff9c 	bl	8000504 <__aeabi_ui2d>
 80075cc:	2201      	movs	r2, #1
 80075ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075d2:	3e01      	subs	r6, #1
 80075d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80075d6:	e777      	b.n	80074c8 <_dtoa_r+0x100>
 80075d8:	2301      	movs	r3, #1
 80075da:	e7b8      	b.n	800754e <_dtoa_r+0x186>
 80075dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80075de:	e7b7      	b.n	8007550 <_dtoa_r+0x188>
 80075e0:	427b      	negs	r3, r7
 80075e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e4:	2300      	movs	r3, #0
 80075e6:	eba8 0807 	sub.w	r8, r8, r7
 80075ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075ec:	e7c4      	b.n	8007578 <_dtoa_r+0x1b0>
 80075ee:	2300      	movs	r3, #0
 80075f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dc35      	bgt.n	8007664 <_dtoa_r+0x29c>
 80075f8:	2301      	movs	r3, #1
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	9307      	str	r3, [sp, #28]
 80075fe:	461a      	mov	r2, r3
 8007600:	920e      	str	r2, [sp, #56]	@ 0x38
 8007602:	e00b      	b.n	800761c <_dtoa_r+0x254>
 8007604:	2301      	movs	r3, #1
 8007606:	e7f3      	b.n	80075f0 <_dtoa_r+0x228>
 8007608:	2300      	movs	r3, #0
 800760a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800760c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	bfb8      	it	lt
 800761a:	2301      	movlt	r3, #1
 800761c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007620:	2100      	movs	r1, #0
 8007622:	2204      	movs	r2, #4
 8007624:	f102 0514 	add.w	r5, r2, #20
 8007628:	429d      	cmp	r5, r3
 800762a:	d91f      	bls.n	800766c <_dtoa_r+0x2a4>
 800762c:	6041      	str	r1, [r0, #4]
 800762e:	4658      	mov	r0, fp
 8007630:	f000 fd8e 	bl	8008150 <_Balloc>
 8007634:	4682      	mov	sl, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	d13c      	bne.n	80076b4 <_dtoa_r+0x2ec>
 800763a:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <_dtoa_r+0x2e0>)
 800763c:	4602      	mov	r2, r0
 800763e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007642:	e6d8      	b.n	80073f6 <_dtoa_r+0x2e>
 8007644:	2301      	movs	r3, #1
 8007646:	e7e0      	b.n	800760a <_dtoa_r+0x242>
 8007648:	2401      	movs	r4, #1
 800764a:	2300      	movs	r3, #0
 800764c:	9309      	str	r3, [sp, #36]	@ 0x24
 800764e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	9307      	str	r3, [sp, #28]
 8007658:	2200      	movs	r2, #0
 800765a:	2312      	movs	r3, #18
 800765c:	e7d0      	b.n	8007600 <_dtoa_r+0x238>
 800765e:	2301      	movs	r3, #1
 8007660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007662:	e7f5      	b.n	8007650 <_dtoa_r+0x288>
 8007664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	9307      	str	r3, [sp, #28]
 800766a:	e7d7      	b.n	800761c <_dtoa_r+0x254>
 800766c:	3101      	adds	r1, #1
 800766e:	0052      	lsls	r2, r2, #1
 8007670:	e7d8      	b.n	8007624 <_dtoa_r+0x25c>
 8007672:	bf00      	nop
 8007674:	f3af 8000 	nop.w
 8007678:	636f4361 	.word	0x636f4361
 800767c:	3fd287a7 	.word	0x3fd287a7
 8007680:	8b60c8b3 	.word	0x8b60c8b3
 8007684:	3fc68a28 	.word	0x3fc68a28
 8007688:	509f79fb 	.word	0x509f79fb
 800768c:	3fd34413 	.word	0x3fd34413
 8007690:	08009df5 	.word	0x08009df5
 8007694:	08009e0c 	.word	0x08009e0c
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	08009dc5 	.word	0x08009dc5
 80076a0:	3ff80000 	.word	0x3ff80000
 80076a4:	08009f08 	.word	0x08009f08
 80076a8:	08009e64 	.word	0x08009e64
 80076ac:	08009df1 	.word	0x08009df1
 80076b0:	08009dc4 	.word	0x08009dc4
 80076b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076b8:	6018      	str	r0, [r3, #0]
 80076ba:	9b07      	ldr	r3, [sp, #28]
 80076bc:	2b0e      	cmp	r3, #14
 80076be:	f200 80a4 	bhi.w	800780a <_dtoa_r+0x442>
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	f000 80a1 	beq.w	800780a <_dtoa_r+0x442>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	dd33      	ble.n	8007734 <_dtoa_r+0x36c>
 80076cc:	4bad      	ldr	r3, [pc, #692]	@ (8007984 <_dtoa_r+0x5bc>)
 80076ce:	f007 020f 	and.w	r2, r7, #15
 80076d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d6:	ed93 7b00 	vldr	d7, [r3]
 80076da:	05f8      	lsls	r0, r7, #23
 80076dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076e4:	d516      	bpl.n	8007714 <_dtoa_r+0x34c>
 80076e6:	4ba8      	ldr	r3, [pc, #672]	@ (8007988 <_dtoa_r+0x5c0>)
 80076e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076f0:	f7f9 f8ac 	bl	800084c <__aeabi_ddiv>
 80076f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f8:	f004 040f 	and.w	r4, r4, #15
 80076fc:	2603      	movs	r6, #3
 80076fe:	4da2      	ldr	r5, [pc, #648]	@ (8007988 <_dtoa_r+0x5c0>)
 8007700:	b954      	cbnz	r4, 8007718 <_dtoa_r+0x350>
 8007702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770a:	f7f9 f89f 	bl	800084c <__aeabi_ddiv>
 800770e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007712:	e028      	b.n	8007766 <_dtoa_r+0x39e>
 8007714:	2602      	movs	r6, #2
 8007716:	e7f2      	b.n	80076fe <_dtoa_r+0x336>
 8007718:	07e1      	lsls	r1, r4, #31
 800771a:	d508      	bpl.n	800772e <_dtoa_r+0x366>
 800771c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007724:	f7f8 ff68 	bl	80005f8 <__aeabi_dmul>
 8007728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800772c:	3601      	adds	r6, #1
 800772e:	1064      	asrs	r4, r4, #1
 8007730:	3508      	adds	r5, #8
 8007732:	e7e5      	b.n	8007700 <_dtoa_r+0x338>
 8007734:	f000 80d2 	beq.w	80078dc <_dtoa_r+0x514>
 8007738:	427c      	negs	r4, r7
 800773a:	4b92      	ldr	r3, [pc, #584]	@ (8007984 <_dtoa_r+0x5bc>)
 800773c:	4d92      	ldr	r5, [pc, #584]	@ (8007988 <_dtoa_r+0x5c0>)
 800773e:	f004 020f 	and.w	r2, r4, #15
 8007742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800774e:	f7f8 ff53 	bl	80005f8 <__aeabi_dmul>
 8007752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007756:	1124      	asrs	r4, r4, #4
 8007758:	2300      	movs	r3, #0
 800775a:	2602      	movs	r6, #2
 800775c:	2c00      	cmp	r4, #0
 800775e:	f040 80b2 	bne.w	80078c6 <_dtoa_r+0x4fe>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1d3      	bne.n	800770e <_dtoa_r+0x346>
 8007766:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007768:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80b7 	beq.w	80078e0 <_dtoa_r+0x518>
 8007772:	4b86      	ldr	r3, [pc, #536]	@ (800798c <_dtoa_r+0x5c4>)
 8007774:	2200      	movs	r2, #0
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f9 f9af 	bl	8000adc <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f000 80ae 	beq.w	80078e0 <_dtoa_r+0x518>
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 80aa 	beq.w	80078e0 <_dtoa_r+0x518>
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	dd37      	ble.n	8007802 <_dtoa_r+0x43a>
 8007792:	1e7b      	subs	r3, r7, #1
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	4620      	mov	r0, r4
 8007798:	4b7d      	ldr	r3, [pc, #500]	@ (8007990 <_dtoa_r+0x5c8>)
 800779a:	2200      	movs	r2, #0
 800779c:	4629      	mov	r1, r5
 800779e:	f7f8 ff2b 	bl	80005f8 <__aeabi_dmul>
 80077a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a6:	9c00      	ldr	r4, [sp, #0]
 80077a8:	3601      	adds	r6, #1
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7f8 feba 	bl	8000524 <__aeabi_i2d>
 80077b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077b4:	f7f8 ff20 	bl	80005f8 <__aeabi_dmul>
 80077b8:	4b76      	ldr	r3, [pc, #472]	@ (8007994 <_dtoa_r+0x5cc>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7f8 fd66 	bl	800028c <__adddf3>
 80077c0:	4605      	mov	r5, r0
 80077c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	f040 808d 	bne.w	80078e6 <_dtoa_r+0x51e>
 80077cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d0:	4b71      	ldr	r3, [pc, #452]	@ (8007998 <_dtoa_r+0x5d0>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 fd58 	bl	8000288 <__aeabi_dsub>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077e0:	462a      	mov	r2, r5
 80077e2:	4633      	mov	r3, r6
 80077e4:	f7f9 f998 	bl	8000b18 <__aeabi_dcmpgt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f040 828b 	bne.w	8007d04 <_dtoa_r+0x93c>
 80077ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f2:	462a      	mov	r2, r5
 80077f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077f8:	f7f9 f970 	bl	8000adc <__aeabi_dcmplt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f040 8128 	bne.w	8007a52 <_dtoa_r+0x68a>
 8007802:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007806:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800780a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800780c:	2b00      	cmp	r3, #0
 800780e:	f2c0 815a 	blt.w	8007ac6 <_dtoa_r+0x6fe>
 8007812:	2f0e      	cmp	r7, #14
 8007814:	f300 8157 	bgt.w	8007ac6 <_dtoa_r+0x6fe>
 8007818:	4b5a      	ldr	r3, [pc, #360]	@ (8007984 <_dtoa_r+0x5bc>)
 800781a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800781e:	ed93 7b00 	vldr	d7, [r3]
 8007822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007824:	2b00      	cmp	r3, #0
 8007826:	ed8d 7b00 	vstr	d7, [sp]
 800782a:	da03      	bge.n	8007834 <_dtoa_r+0x46c>
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f340 8101 	ble.w	8007a36 <_dtoa_r+0x66e>
 8007834:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007838:	4656      	mov	r6, sl
 800783a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f9 f803 	bl	800084c <__aeabi_ddiv>
 8007846:	f7f9 f987 	bl	8000b58 <__aeabi_d2iz>
 800784a:	4680      	mov	r8, r0
 800784c:	f7f8 fe6a 	bl	8000524 <__aeabi_i2d>
 8007850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007864:	f7f8 fd10 	bl	8000288 <__aeabi_dsub>
 8007868:	f806 4b01 	strb.w	r4, [r6], #1
 800786c:	9d07      	ldr	r5, [sp, #28]
 800786e:	eba6 040a 	sub.w	r4, r6, sl
 8007872:	42a5      	cmp	r5, r4
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	f040 8117 	bne.w	8007aaa <_dtoa_r+0x6e2>
 800787c:	f7f8 fd06 	bl	800028c <__adddf3>
 8007880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007884:	4604      	mov	r4, r0
 8007886:	460d      	mov	r5, r1
 8007888:	f7f9 f946 	bl	8000b18 <__aeabi_dcmpgt>
 800788c:	2800      	cmp	r0, #0
 800788e:	f040 80f9 	bne.w	8007a84 <_dtoa_r+0x6bc>
 8007892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	f7f9 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800789e:	b118      	cbz	r0, 80078a8 <_dtoa_r+0x4e0>
 80078a0:	f018 0f01 	tst.w	r8, #1
 80078a4:	f040 80ee 	bne.w	8007a84 <_dtoa_r+0x6bc>
 80078a8:	4649      	mov	r1, r9
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 fc90 	bl	80081d0 <_Bfree>
 80078b0:	2300      	movs	r3, #0
 80078b2:	7033      	strb	r3, [r6, #0]
 80078b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078b6:	3701      	adds	r7, #1
 80078b8:	601f      	str	r7, [r3, #0]
 80078ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 831d 	beq.w	8007efc <_dtoa_r+0xb34>
 80078c2:	601e      	str	r6, [r3, #0]
 80078c4:	e31a      	b.n	8007efc <_dtoa_r+0xb34>
 80078c6:	07e2      	lsls	r2, r4, #31
 80078c8:	d505      	bpl.n	80078d6 <_dtoa_r+0x50e>
 80078ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078ce:	f7f8 fe93 	bl	80005f8 <__aeabi_dmul>
 80078d2:	3601      	adds	r6, #1
 80078d4:	2301      	movs	r3, #1
 80078d6:	1064      	asrs	r4, r4, #1
 80078d8:	3508      	adds	r5, #8
 80078da:	e73f      	b.n	800775c <_dtoa_r+0x394>
 80078dc:	2602      	movs	r6, #2
 80078de:	e742      	b.n	8007766 <_dtoa_r+0x39e>
 80078e0:	9c07      	ldr	r4, [sp, #28]
 80078e2:	9704      	str	r7, [sp, #16]
 80078e4:	e761      	b.n	80077aa <_dtoa_r+0x3e2>
 80078e6:	4b27      	ldr	r3, [pc, #156]	@ (8007984 <_dtoa_r+0x5bc>)
 80078e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078f2:	4454      	add	r4, sl
 80078f4:	2900      	cmp	r1, #0
 80078f6:	d053      	beq.n	80079a0 <_dtoa_r+0x5d8>
 80078f8:	4928      	ldr	r1, [pc, #160]	@ (800799c <_dtoa_r+0x5d4>)
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7f8 ffa6 	bl	800084c <__aeabi_ddiv>
 8007900:	4633      	mov	r3, r6
 8007902:	462a      	mov	r2, r5
 8007904:	f7f8 fcc0 	bl	8000288 <__aeabi_dsub>
 8007908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800790c:	4656      	mov	r6, sl
 800790e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007912:	f7f9 f921 	bl	8000b58 <__aeabi_d2iz>
 8007916:	4605      	mov	r5, r0
 8007918:	f7f8 fe04 	bl	8000524 <__aeabi_i2d>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007924:	f7f8 fcb0 	bl	8000288 <__aeabi_dsub>
 8007928:	3530      	adds	r5, #48	@ 0x30
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007932:	f806 5b01 	strb.w	r5, [r6], #1
 8007936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800793a:	f7f9 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800793e:	2800      	cmp	r0, #0
 8007940:	d171      	bne.n	8007a26 <_dtoa_r+0x65e>
 8007942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007946:	4911      	ldr	r1, [pc, #68]	@ (800798c <_dtoa_r+0x5c4>)
 8007948:	2000      	movs	r0, #0
 800794a:	f7f8 fc9d 	bl	8000288 <__aeabi_dsub>
 800794e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007952:	f7f9 f8c3 	bl	8000adc <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	f040 8095 	bne.w	8007a86 <_dtoa_r+0x6be>
 800795c:	42a6      	cmp	r6, r4
 800795e:	f43f af50 	beq.w	8007802 <_dtoa_r+0x43a>
 8007962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007966:	4b0a      	ldr	r3, [pc, #40]	@ (8007990 <_dtoa_r+0x5c8>)
 8007968:	2200      	movs	r2, #0
 800796a:	f7f8 fe45 	bl	80005f8 <__aeabi_dmul>
 800796e:	4b08      	ldr	r3, [pc, #32]	@ (8007990 <_dtoa_r+0x5c8>)
 8007970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007974:	2200      	movs	r2, #0
 8007976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797a:	f7f8 fe3d 	bl	80005f8 <__aeabi_dmul>
 800797e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007982:	e7c4      	b.n	800790e <_dtoa_r+0x546>
 8007984:	08009f08 	.word	0x08009f08
 8007988:	08009ee0 	.word	0x08009ee0
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	40240000 	.word	0x40240000
 8007994:	401c0000 	.word	0x401c0000
 8007998:	40140000 	.word	0x40140000
 800799c:	3fe00000 	.word	0x3fe00000
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7f8 fe28 	bl	80005f8 <__aeabi_dmul>
 80079a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80079ae:	4656      	mov	r6, sl
 80079b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b4:	f7f9 f8d0 	bl	8000b58 <__aeabi_d2iz>
 80079b8:	4605      	mov	r5, r0
 80079ba:	f7f8 fdb3 	bl	8000524 <__aeabi_i2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c6:	f7f8 fc5f 	bl	8000288 <__aeabi_dsub>
 80079ca:	3530      	adds	r5, #48	@ 0x30
 80079cc:	f806 5b01 	strb.w	r5, [r6], #1
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	42a6      	cmp	r6, r4
 80079d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079da:	f04f 0200 	mov.w	r2, #0
 80079de:	d124      	bne.n	8007a2a <_dtoa_r+0x662>
 80079e0:	4bac      	ldr	r3, [pc, #688]	@ (8007c94 <_dtoa_r+0x8cc>)
 80079e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079e6:	f7f8 fc51 	bl	800028c <__adddf3>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079f2:	f7f9 f891 	bl	8000b18 <__aeabi_dcmpgt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d145      	bne.n	8007a86 <_dtoa_r+0x6be>
 80079fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079fe:	49a5      	ldr	r1, [pc, #660]	@ (8007c94 <_dtoa_r+0x8cc>)
 8007a00:	2000      	movs	r0, #0
 8007a02:	f7f8 fc41 	bl	8000288 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0e:	f7f9 f865 	bl	8000adc <__aeabi_dcmplt>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	f43f aef5 	beq.w	8007802 <_dtoa_r+0x43a>
 8007a18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007a1a:	1e73      	subs	r3, r6, #1
 8007a1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a22:	2b30      	cmp	r3, #48	@ 0x30
 8007a24:	d0f8      	beq.n	8007a18 <_dtoa_r+0x650>
 8007a26:	9f04      	ldr	r7, [sp, #16]
 8007a28:	e73e      	b.n	80078a8 <_dtoa_r+0x4e0>
 8007a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8007c98 <_dtoa_r+0x8d0>)
 8007a2c:	f7f8 fde4 	bl	80005f8 <__aeabi_dmul>
 8007a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a34:	e7bc      	b.n	80079b0 <_dtoa_r+0x5e8>
 8007a36:	d10c      	bne.n	8007a52 <_dtoa_r+0x68a>
 8007a38:	4b98      	ldr	r3, [pc, #608]	@ (8007c9c <_dtoa_r+0x8d4>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a40:	f7f8 fdda 	bl	80005f8 <__aeabi_dmul>
 8007a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a48:	f7f9 f85c 	bl	8000b04 <__aeabi_dcmpge>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f000 8157 	beq.w	8007d00 <_dtoa_r+0x938>
 8007a52:	2400      	movs	r4, #0
 8007a54:	4625      	mov	r5, r4
 8007a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	9304      	str	r3, [sp, #16]
 8007a5c:	4656      	mov	r6, sl
 8007a5e:	2700      	movs	r7, #0
 8007a60:	4621      	mov	r1, r4
 8007a62:	4658      	mov	r0, fp
 8007a64:	f000 fbb4 	bl	80081d0 <_Bfree>
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d0dc      	beq.n	8007a26 <_dtoa_r+0x65e>
 8007a6c:	b12f      	cbz	r7, 8007a7a <_dtoa_r+0x6b2>
 8007a6e:	42af      	cmp	r7, r5
 8007a70:	d003      	beq.n	8007a7a <_dtoa_r+0x6b2>
 8007a72:	4639      	mov	r1, r7
 8007a74:	4658      	mov	r0, fp
 8007a76:	f000 fbab 	bl	80081d0 <_Bfree>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4658      	mov	r0, fp
 8007a7e:	f000 fba7 	bl	80081d0 <_Bfree>
 8007a82:	e7d0      	b.n	8007a26 <_dtoa_r+0x65e>
 8007a84:	9704      	str	r7, [sp, #16]
 8007a86:	4633      	mov	r3, r6
 8007a88:	461e      	mov	r6, r3
 8007a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a8e:	2a39      	cmp	r2, #57	@ 0x39
 8007a90:	d107      	bne.n	8007aa2 <_dtoa_r+0x6da>
 8007a92:	459a      	cmp	sl, r3
 8007a94:	d1f8      	bne.n	8007a88 <_dtoa_r+0x6c0>
 8007a96:	9a04      	ldr	r2, [sp, #16]
 8007a98:	3201      	adds	r2, #1
 8007a9a:	9204      	str	r2, [sp, #16]
 8007a9c:	2230      	movs	r2, #48	@ 0x30
 8007a9e:	f88a 2000 	strb.w	r2, [sl]
 8007aa2:	781a      	ldrb	r2, [r3, #0]
 8007aa4:	3201      	adds	r2, #1
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	e7bd      	b.n	8007a26 <_dtoa_r+0x65e>
 8007aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8007c98 <_dtoa_r+0x8d0>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	460d      	mov	r5, r1
 8007aba:	f7f9 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f43f aebb 	beq.w	800783a <_dtoa_r+0x472>
 8007ac4:	e6f0      	b.n	80078a8 <_dtoa_r+0x4e0>
 8007ac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	f000 80db 	beq.w	8007c84 <_dtoa_r+0x8bc>
 8007ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad0:	2a01      	cmp	r2, #1
 8007ad2:	f300 80bf 	bgt.w	8007c54 <_dtoa_r+0x88c>
 8007ad6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	f000 80b7 	beq.w	8007c4c <_dtoa_r+0x884>
 8007ade:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ae2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ae4:	4646      	mov	r6, r8
 8007ae6:	9a08      	ldr	r2, [sp, #32]
 8007ae8:	2101      	movs	r1, #1
 8007aea:	441a      	add	r2, r3
 8007aec:	4658      	mov	r0, fp
 8007aee:	4498      	add	r8, r3
 8007af0:	9208      	str	r2, [sp, #32]
 8007af2:	f000 fc21 	bl	8008338 <__i2b>
 8007af6:	4605      	mov	r5, r0
 8007af8:	b15e      	cbz	r6, 8007b12 <_dtoa_r+0x74a>
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd08      	ble.n	8007b12 <_dtoa_r+0x74a>
 8007b00:	42b3      	cmp	r3, r6
 8007b02:	9a08      	ldr	r2, [sp, #32]
 8007b04:	bfa8      	it	ge
 8007b06:	4633      	movge	r3, r6
 8007b08:	eba8 0803 	sub.w	r8, r8, r3
 8007b0c:	1af6      	subs	r6, r6, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	9308      	str	r3, [sp, #32]
 8007b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b14:	b1f3      	cbz	r3, 8007b54 <_dtoa_r+0x78c>
 8007b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80b7 	beq.w	8007c8c <_dtoa_r+0x8c4>
 8007b1e:	b18c      	cbz	r4, 8007b44 <_dtoa_r+0x77c>
 8007b20:	4629      	mov	r1, r5
 8007b22:	4622      	mov	r2, r4
 8007b24:	4658      	mov	r0, fp
 8007b26:	f000 fcc7 	bl	80084b8 <__pow5mult>
 8007b2a:	464a      	mov	r2, r9
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	4605      	mov	r5, r0
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 fc17 	bl	8008364 <__multiply>
 8007b36:	4649      	mov	r1, r9
 8007b38:	9004      	str	r0, [sp, #16]
 8007b3a:	4658      	mov	r0, fp
 8007b3c:	f000 fb48 	bl	80081d0 <_Bfree>
 8007b40:	9b04      	ldr	r3, [sp, #16]
 8007b42:	4699      	mov	r9, r3
 8007b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b46:	1b1a      	subs	r2, r3, r4
 8007b48:	d004      	beq.n	8007b54 <_dtoa_r+0x78c>
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f000 fcb3 	bl	80084b8 <__pow5mult>
 8007b52:	4681      	mov	r9, r0
 8007b54:	2101      	movs	r1, #1
 8007b56:	4658      	mov	r0, fp
 8007b58:	f000 fbee 	bl	8008338 <__i2b>
 8007b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b5e:	4604      	mov	r4, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 81cf 	beq.w	8007f04 <_dtoa_r+0xb3c>
 8007b66:	461a      	mov	r2, r3
 8007b68:	4601      	mov	r1, r0
 8007b6a:	4658      	mov	r0, fp
 8007b6c:	f000 fca4 	bl	80084b8 <__pow5mult>
 8007b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	4604      	mov	r4, r0
 8007b76:	f300 8095 	bgt.w	8007ca4 <_dtoa_r+0x8dc>
 8007b7a:	9b02      	ldr	r3, [sp, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 8087 	bne.w	8007c90 <_dtoa_r+0x8c8>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 8089 	bne.w	8007ca0 <_dtoa_r+0x8d8>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b94:	0d1b      	lsrs	r3, r3, #20
 8007b96:	051b      	lsls	r3, r3, #20
 8007b98:	b12b      	cbz	r3, 8007ba6 <_dtoa_r+0x7de>
 8007b9a:	9b08      	ldr	r3, [sp, #32]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	9308      	str	r3, [sp, #32]
 8007ba0:	f108 0801 	add.w	r8, r8, #1
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 81b0 	beq.w	8007f10 <_dtoa_r+0xb48>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bb6:	6918      	ldr	r0, [r3, #16]
 8007bb8:	f000 fb72 	bl	80082a0 <__hi0bits>
 8007bbc:	f1c0 0020 	rsb	r0, r0, #32
 8007bc0:	9b08      	ldr	r3, [sp, #32]
 8007bc2:	4418      	add	r0, r3
 8007bc4:	f010 001f 	ands.w	r0, r0, #31
 8007bc8:	d077      	beq.n	8007cba <_dtoa_r+0x8f2>
 8007bca:	f1c0 0320 	rsb	r3, r0, #32
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	dd6b      	ble.n	8007caa <_dtoa_r+0x8e2>
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	f1c0 001c 	rsb	r0, r0, #28
 8007bd8:	4403      	add	r3, r0
 8007bda:	4480      	add	r8, r0
 8007bdc:	4406      	add	r6, r0
 8007bde:	9308      	str	r3, [sp, #32]
 8007be0:	f1b8 0f00 	cmp.w	r8, #0
 8007be4:	dd05      	ble.n	8007bf2 <_dtoa_r+0x82a>
 8007be6:	4649      	mov	r1, r9
 8007be8:	4642      	mov	r2, r8
 8007bea:	4658      	mov	r0, fp
 8007bec:	f000 fcbe 	bl	800856c <__lshift>
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dd05      	ble.n	8007c04 <_dtoa_r+0x83c>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4658      	mov	r0, fp
 8007bfe:	f000 fcb5 	bl	800856c <__lshift>
 8007c02:	4604      	mov	r4, r0
 8007c04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d059      	beq.n	8007cbe <_dtoa_r+0x8f6>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4648      	mov	r0, r9
 8007c0e:	f000 fd19 	bl	8008644 <__mcmp>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	da53      	bge.n	8007cbe <_dtoa_r+0x8f6>
 8007c16:	1e7b      	subs	r3, r7, #1
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	220a      	movs	r2, #10
 8007c20:	4658      	mov	r0, fp
 8007c22:	f000 faf7 	bl	8008214 <__multadd>
 8007c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c28:	4681      	mov	r9, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 8172 	beq.w	8007f14 <_dtoa_r+0xb4c>
 8007c30:	2300      	movs	r3, #0
 8007c32:	4629      	mov	r1, r5
 8007c34:	220a      	movs	r2, #10
 8007c36:	4658      	mov	r0, fp
 8007c38:	f000 faec 	bl	8008214 <__multadd>
 8007c3c:	9b00      	ldr	r3, [sp, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	4605      	mov	r5, r0
 8007c42:	dc67      	bgt.n	8007d14 <_dtoa_r+0x94c>
 8007c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	dc41      	bgt.n	8007cce <_dtoa_r+0x906>
 8007c4a:	e063      	b.n	8007d14 <_dtoa_r+0x94c>
 8007c4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c52:	e746      	b.n	8007ae2 <_dtoa_r+0x71a>
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	1e5c      	subs	r4, r3, #1
 8007c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	bfbf      	itttt	lt
 8007c5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c64:	1ae3      	sublt	r3, r4, r3
 8007c66:	bfb4      	ite	lt
 8007c68:	18d2      	addlt	r2, r2, r3
 8007c6a:	1b1c      	subge	r4, r3, r4
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	bfbc      	itt	lt
 8007c70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c72:	2400      	movlt	r4, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfb5      	itete	lt
 8007c78:	eba8 0603 	sublt.w	r6, r8, r3
 8007c7c:	9b07      	ldrge	r3, [sp, #28]
 8007c7e:	2300      	movlt	r3, #0
 8007c80:	4646      	movge	r6, r8
 8007c82:	e730      	b.n	8007ae6 <_dtoa_r+0x71e>
 8007c84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c88:	4646      	mov	r6, r8
 8007c8a:	e735      	b.n	8007af8 <_dtoa_r+0x730>
 8007c8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c8e:	e75c      	b.n	8007b4a <_dtoa_r+0x782>
 8007c90:	2300      	movs	r3, #0
 8007c92:	e788      	b.n	8007ba6 <_dtoa_r+0x7de>
 8007c94:	3fe00000 	.word	0x3fe00000
 8007c98:	40240000 	.word	0x40240000
 8007c9c:	40140000 	.word	0x40140000
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	e780      	b.n	8007ba6 <_dtoa_r+0x7de>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca8:	e782      	b.n	8007bb0 <_dtoa_r+0x7e8>
 8007caa:	d099      	beq.n	8007be0 <_dtoa_r+0x818>
 8007cac:	9a08      	ldr	r2, [sp, #32]
 8007cae:	331c      	adds	r3, #28
 8007cb0:	441a      	add	r2, r3
 8007cb2:	4498      	add	r8, r3
 8007cb4:	441e      	add	r6, r3
 8007cb6:	9208      	str	r2, [sp, #32]
 8007cb8:	e792      	b.n	8007be0 <_dtoa_r+0x818>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	e7f6      	b.n	8007cac <_dtoa_r+0x8e4>
 8007cbe:	9b07      	ldr	r3, [sp, #28]
 8007cc0:	9704      	str	r7, [sp, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dc20      	bgt.n	8007d08 <_dtoa_r+0x940>
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	dd1e      	ble.n	8007d0c <_dtoa_r+0x944>
 8007cce:	9b00      	ldr	r3, [sp, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f47f aec0 	bne.w	8007a56 <_dtoa_r+0x68e>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	2205      	movs	r2, #5
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f000 fa9a 	bl	8008214 <__multadd>
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	4648      	mov	r0, r9
 8007ce6:	f000 fcad 	bl	8008644 <__mcmp>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f77f aeb3 	ble.w	8007a56 <_dtoa_r+0x68e>
 8007cf0:	4656      	mov	r6, sl
 8007cf2:	2331      	movs	r3, #49	@ 0x31
 8007cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8007cf8:	9b04      	ldr	r3, [sp, #16]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	e6ae      	b.n	8007a5e <_dtoa_r+0x696>
 8007d00:	9c07      	ldr	r4, [sp, #28]
 8007d02:	9704      	str	r7, [sp, #16]
 8007d04:	4625      	mov	r5, r4
 8007d06:	e7f3      	b.n	8007cf0 <_dtoa_r+0x928>
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8104 	beq.w	8007f1c <_dtoa_r+0xb54>
 8007d14:	2e00      	cmp	r6, #0
 8007d16:	dd05      	ble.n	8007d24 <_dtoa_r+0x95c>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	4658      	mov	r0, fp
 8007d1e:	f000 fc25 	bl	800856c <__lshift>
 8007d22:	4605      	mov	r5, r0
 8007d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d05a      	beq.n	8007de0 <_dtoa_r+0xa18>
 8007d2a:	6869      	ldr	r1, [r5, #4]
 8007d2c:	4658      	mov	r0, fp
 8007d2e:	f000 fa0f 	bl	8008150 <_Balloc>
 8007d32:	4606      	mov	r6, r0
 8007d34:	b928      	cbnz	r0, 8007d42 <_dtoa_r+0x97a>
 8007d36:	4b84      	ldr	r3, [pc, #528]	@ (8007f48 <_dtoa_r+0xb80>)
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d3e:	f7ff bb5a 	b.w	80073f6 <_dtoa_r+0x2e>
 8007d42:	692a      	ldr	r2, [r5, #16]
 8007d44:	3202      	adds	r2, #2
 8007d46:	0092      	lsls	r2, r2, #2
 8007d48:	f105 010c 	add.w	r1, r5, #12
 8007d4c:	300c      	adds	r0, #12
 8007d4e:	f001 f803 	bl	8008d58 <memcpy>
 8007d52:	2201      	movs	r2, #1
 8007d54:	4631      	mov	r1, r6
 8007d56:	4658      	mov	r0, fp
 8007d58:	f000 fc08 	bl	800856c <__lshift>
 8007d5c:	f10a 0301 	add.w	r3, sl, #1
 8007d60:	9307      	str	r3, [sp, #28]
 8007d62:	9b00      	ldr	r3, [sp, #0]
 8007d64:	4453      	add	r3, sl
 8007d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d68:	9b02      	ldr	r3, [sp, #8]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	462f      	mov	r7, r5
 8007d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d72:	4605      	mov	r5, r0
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	4621      	mov	r1, r4
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	4648      	mov	r0, r9
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	f7ff fa98 	bl	80072b2 <quorem>
 8007d82:	4639      	mov	r1, r7
 8007d84:	9002      	str	r0, [sp, #8]
 8007d86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d8a:	4648      	mov	r0, r9
 8007d8c:	f000 fc5a 	bl	8008644 <__mcmp>
 8007d90:	462a      	mov	r2, r5
 8007d92:	9008      	str	r0, [sp, #32]
 8007d94:	4621      	mov	r1, r4
 8007d96:	4658      	mov	r0, fp
 8007d98:	f000 fc70 	bl	800867c <__mdiff>
 8007d9c:	68c2      	ldr	r2, [r0, #12]
 8007d9e:	4606      	mov	r6, r0
 8007da0:	bb02      	cbnz	r2, 8007de4 <_dtoa_r+0xa1c>
 8007da2:	4601      	mov	r1, r0
 8007da4:	4648      	mov	r0, r9
 8007da6:	f000 fc4d 	bl	8008644 <__mcmp>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4631      	mov	r1, r6
 8007dae:	4658      	mov	r0, fp
 8007db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007db2:	f000 fa0d 	bl	80081d0 <_Bfree>
 8007db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dba:	9e07      	ldr	r6, [sp, #28]
 8007dbc:	ea43 0102 	orr.w	r1, r3, r2
 8007dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dc2:	4319      	orrs	r1, r3
 8007dc4:	d110      	bne.n	8007de8 <_dtoa_r+0xa20>
 8007dc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dca:	d029      	beq.n	8007e20 <_dtoa_r+0xa58>
 8007dcc:	9b08      	ldr	r3, [sp, #32]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dd02      	ble.n	8007dd8 <_dtoa_r+0xa10>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007dd8:	9b00      	ldr	r3, [sp, #0]
 8007dda:	f883 8000 	strb.w	r8, [r3]
 8007dde:	e63f      	b.n	8007a60 <_dtoa_r+0x698>
 8007de0:	4628      	mov	r0, r5
 8007de2:	e7bb      	b.n	8007d5c <_dtoa_r+0x994>
 8007de4:	2201      	movs	r2, #1
 8007de6:	e7e1      	b.n	8007dac <_dtoa_r+0x9e4>
 8007de8:	9b08      	ldr	r3, [sp, #32]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	db04      	blt.n	8007df8 <_dtoa_r+0xa30>
 8007dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007df0:	430b      	orrs	r3, r1
 8007df2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007df4:	430b      	orrs	r3, r1
 8007df6:	d120      	bne.n	8007e3a <_dtoa_r+0xa72>
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	dded      	ble.n	8007dd8 <_dtoa_r+0xa10>
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4658      	mov	r0, fp
 8007e02:	f000 fbb3 	bl	800856c <__lshift>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4681      	mov	r9, r0
 8007e0a:	f000 fc1b 	bl	8008644 <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	dc03      	bgt.n	8007e1a <_dtoa_r+0xa52>
 8007e12:	d1e1      	bne.n	8007dd8 <_dtoa_r+0xa10>
 8007e14:	f018 0f01 	tst.w	r8, #1
 8007e18:	d0de      	beq.n	8007dd8 <_dtoa_r+0xa10>
 8007e1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e1e:	d1d8      	bne.n	8007dd2 <_dtoa_r+0xa0a>
 8007e20:	9a00      	ldr	r2, [sp, #0]
 8007e22:	2339      	movs	r3, #57	@ 0x39
 8007e24:	7013      	strb	r3, [r2, #0]
 8007e26:	4633      	mov	r3, r6
 8007e28:	461e      	mov	r6, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e30:	2a39      	cmp	r2, #57	@ 0x39
 8007e32:	d052      	beq.n	8007eda <_dtoa_r+0xb12>
 8007e34:	3201      	adds	r2, #1
 8007e36:	701a      	strb	r2, [r3, #0]
 8007e38:	e612      	b.n	8007a60 <_dtoa_r+0x698>
 8007e3a:	2a00      	cmp	r2, #0
 8007e3c:	dd07      	ble.n	8007e4e <_dtoa_r+0xa86>
 8007e3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e42:	d0ed      	beq.n	8007e20 <_dtoa_r+0xa58>
 8007e44:	9a00      	ldr	r2, [sp, #0]
 8007e46:	f108 0301 	add.w	r3, r8, #1
 8007e4a:	7013      	strb	r3, [r2, #0]
 8007e4c:	e608      	b.n	8007a60 <_dtoa_r+0x698>
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	9a07      	ldr	r2, [sp, #28]
 8007e52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d028      	beq.n	8007eae <_dtoa_r+0xae6>
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	2300      	movs	r3, #0
 8007e60:	220a      	movs	r2, #10
 8007e62:	4658      	mov	r0, fp
 8007e64:	f000 f9d6 	bl	8008214 <__multadd>
 8007e68:	42af      	cmp	r7, r5
 8007e6a:	4681      	mov	r9, r0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	f04f 020a 	mov.w	r2, #10
 8007e74:	4639      	mov	r1, r7
 8007e76:	4658      	mov	r0, fp
 8007e78:	d107      	bne.n	8007e8a <_dtoa_r+0xac2>
 8007e7a:	f000 f9cb 	bl	8008214 <__multadd>
 8007e7e:	4607      	mov	r7, r0
 8007e80:	4605      	mov	r5, r0
 8007e82:	9b07      	ldr	r3, [sp, #28]
 8007e84:	3301      	adds	r3, #1
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	e774      	b.n	8007d74 <_dtoa_r+0x9ac>
 8007e8a:	f000 f9c3 	bl	8008214 <__multadd>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4607      	mov	r7, r0
 8007e92:	2300      	movs	r3, #0
 8007e94:	220a      	movs	r2, #10
 8007e96:	4658      	mov	r0, fp
 8007e98:	f000 f9bc 	bl	8008214 <__multadd>
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	e7f0      	b.n	8007e82 <_dtoa_r+0xaba>
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfcc      	ite	gt
 8007ea6:	461e      	movgt	r6, r3
 8007ea8:	2601      	movle	r6, #1
 8007eaa:	4456      	add	r6, sl
 8007eac:	2700      	movs	r7, #0
 8007eae:	4649      	mov	r1, r9
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	4658      	mov	r0, fp
 8007eb4:	f000 fb5a 	bl	800856c <__lshift>
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4681      	mov	r9, r0
 8007ebc:	f000 fbc2 	bl	8008644 <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	dcb0      	bgt.n	8007e26 <_dtoa_r+0xa5e>
 8007ec4:	d102      	bne.n	8007ecc <_dtoa_r+0xb04>
 8007ec6:	f018 0f01 	tst.w	r8, #1
 8007eca:	d1ac      	bne.n	8007e26 <_dtoa_r+0xa5e>
 8007ecc:	4633      	mov	r3, r6
 8007ece:	461e      	mov	r6, r3
 8007ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ed4:	2a30      	cmp	r2, #48	@ 0x30
 8007ed6:	d0fa      	beq.n	8007ece <_dtoa_r+0xb06>
 8007ed8:	e5c2      	b.n	8007a60 <_dtoa_r+0x698>
 8007eda:	459a      	cmp	sl, r3
 8007edc:	d1a4      	bne.n	8007e28 <_dtoa_r+0xa60>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	2331      	movs	r3, #49	@ 0x31
 8007ee6:	f88a 3000 	strb.w	r3, [sl]
 8007eea:	e5b9      	b.n	8007a60 <_dtoa_r+0x698>
 8007eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f4c <_dtoa_r+0xb84>
 8007ef2:	b11b      	cbz	r3, 8007efc <_dtoa_r+0xb34>
 8007ef4:	f10a 0308 	add.w	r3, sl, #8
 8007ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	4650      	mov	r0, sl
 8007efe:	b019      	add	sp, #100	@ 0x64
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	f77f ae37 	ble.w	8007b7a <_dtoa_r+0x7b2>
 8007f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f10:	2001      	movs	r0, #1
 8007f12:	e655      	b.n	8007bc0 <_dtoa_r+0x7f8>
 8007f14:	9b00      	ldr	r3, [sp, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f77f aed6 	ble.w	8007cc8 <_dtoa_r+0x900>
 8007f1c:	4656      	mov	r6, sl
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4648      	mov	r0, r9
 8007f22:	f7ff f9c6 	bl	80072b2 <quorem>
 8007f26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f2a:	f806 8b01 	strb.w	r8, [r6], #1
 8007f2e:	9b00      	ldr	r3, [sp, #0]
 8007f30:	eba6 020a 	sub.w	r2, r6, sl
 8007f34:	4293      	cmp	r3, r2
 8007f36:	ddb3      	ble.n	8007ea0 <_dtoa_r+0xad8>
 8007f38:	4649      	mov	r1, r9
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	4658      	mov	r0, fp
 8007f40:	f000 f968 	bl	8008214 <__multadd>
 8007f44:	4681      	mov	r9, r0
 8007f46:	e7ea      	b.n	8007f1e <_dtoa_r+0xb56>
 8007f48:	08009e64 	.word	0x08009e64
 8007f4c:	08009de8 	.word	0x08009de8

08007f50 <_free_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4605      	mov	r5, r0
 8007f54:	2900      	cmp	r1, #0
 8007f56:	d041      	beq.n	8007fdc <_free_r+0x8c>
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f0c      	subs	r4, r1, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfb8      	it	lt
 8007f62:	18e4      	addlt	r4, r4, r3
 8007f64:	f000 f8e8 	bl	8008138 <__malloc_lock>
 8007f68:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe0 <_free_r+0x90>)
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	b933      	cbnz	r3, 8007f7c <_free_r+0x2c>
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	6014      	str	r4, [r2, #0]
 8007f72:	4628      	mov	r0, r5
 8007f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f78:	f000 b8e4 	b.w	8008144 <__malloc_unlock>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d908      	bls.n	8007f92 <_free_r+0x42>
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	1821      	adds	r1, r4, r0
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf01      	itttt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	1809      	addeq	r1, r1, r0
 8007f8e:	6021      	streq	r1, [r4, #0]
 8007f90:	e7ed      	b.n	8007f6e <_free_r+0x1e>
 8007f92:	461a      	mov	r2, r3
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b10b      	cbz	r3, 8007f9c <_free_r+0x4c>
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d9fa      	bls.n	8007f92 <_free_r+0x42>
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	1850      	adds	r0, r2, r1
 8007fa0:	42a0      	cmp	r0, r4
 8007fa2:	d10b      	bne.n	8007fbc <_free_r+0x6c>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	4401      	add	r1, r0
 8007fa8:	1850      	adds	r0, r2, r1
 8007faa:	4283      	cmp	r3, r0
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	d1e0      	bne.n	8007f72 <_free_r+0x22>
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	6053      	str	r3, [r2, #4]
 8007fb6:	4408      	add	r0, r1
 8007fb8:	6010      	str	r0, [r2, #0]
 8007fba:	e7da      	b.n	8007f72 <_free_r+0x22>
 8007fbc:	d902      	bls.n	8007fc4 <_free_r+0x74>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	e7d6      	b.n	8007f72 <_free_r+0x22>
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	1821      	adds	r1, r4, r0
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf04      	itt	eq
 8007fcc:	6819      	ldreq	r1, [r3, #0]
 8007fce:	685b      	ldreq	r3, [r3, #4]
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	bf04      	itt	eq
 8007fd4:	1809      	addeq	r1, r1, r0
 8007fd6:	6021      	streq	r1, [r4, #0]
 8007fd8:	6054      	str	r4, [r2, #4]
 8007fda:	e7ca      	b.n	8007f72 <_free_r+0x22>
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	bf00      	nop
 8007fe0:	2000149c 	.word	0x2000149c

08007fe4 <malloc>:
 8007fe4:	4b02      	ldr	r3, [pc, #8]	@ (8007ff0 <malloc+0xc>)
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f000 b825 	b.w	8008038 <_malloc_r>
 8007fee:	bf00      	nop
 8007ff0:	20000024 	.word	0x20000024

08007ff4 <sbrk_aligned>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8008034 <sbrk_aligned+0x40>)
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	6831      	ldr	r1, [r6, #0]
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	b911      	cbnz	r1, 8008006 <sbrk_aligned+0x12>
 8008000:	f000 fe9a 	bl	8008d38 <_sbrk_r>
 8008004:	6030      	str	r0, [r6, #0]
 8008006:	4621      	mov	r1, r4
 8008008:	4628      	mov	r0, r5
 800800a:	f000 fe95 	bl	8008d38 <_sbrk_r>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d103      	bne.n	800801a <sbrk_aligned+0x26>
 8008012:	f04f 34ff 	mov.w	r4, #4294967295
 8008016:	4620      	mov	r0, r4
 8008018:	bd70      	pop	{r4, r5, r6, pc}
 800801a:	1cc4      	adds	r4, r0, #3
 800801c:	f024 0403 	bic.w	r4, r4, #3
 8008020:	42a0      	cmp	r0, r4
 8008022:	d0f8      	beq.n	8008016 <sbrk_aligned+0x22>
 8008024:	1a21      	subs	r1, r4, r0
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fe86 	bl	8008d38 <_sbrk_r>
 800802c:	3001      	adds	r0, #1
 800802e:	d1f2      	bne.n	8008016 <sbrk_aligned+0x22>
 8008030:	e7ef      	b.n	8008012 <sbrk_aligned+0x1e>
 8008032:	bf00      	nop
 8008034:	20001498 	.word	0x20001498

08008038 <_malloc_r>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	1ccd      	adds	r5, r1, #3
 800803e:	f025 0503 	bic.w	r5, r5, #3
 8008042:	3508      	adds	r5, #8
 8008044:	2d0c      	cmp	r5, #12
 8008046:	bf38      	it	cc
 8008048:	250c      	movcc	r5, #12
 800804a:	2d00      	cmp	r5, #0
 800804c:	4606      	mov	r6, r0
 800804e:	db01      	blt.n	8008054 <_malloc_r+0x1c>
 8008050:	42a9      	cmp	r1, r5
 8008052:	d904      	bls.n	800805e <_malloc_r+0x26>
 8008054:	230c      	movs	r3, #12
 8008056:	6033      	str	r3, [r6, #0]
 8008058:	2000      	movs	r0, #0
 800805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008134 <_malloc_r+0xfc>
 8008062:	f000 f869 	bl	8008138 <__malloc_lock>
 8008066:	f8d8 3000 	ldr.w	r3, [r8]
 800806a:	461c      	mov	r4, r3
 800806c:	bb44      	cbnz	r4, 80080c0 <_malloc_r+0x88>
 800806e:	4629      	mov	r1, r5
 8008070:	4630      	mov	r0, r6
 8008072:	f7ff ffbf 	bl	8007ff4 <sbrk_aligned>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	4604      	mov	r4, r0
 800807a:	d158      	bne.n	800812e <_malloc_r+0xf6>
 800807c:	f8d8 4000 	ldr.w	r4, [r8]
 8008080:	4627      	mov	r7, r4
 8008082:	2f00      	cmp	r7, #0
 8008084:	d143      	bne.n	800810e <_malloc_r+0xd6>
 8008086:	2c00      	cmp	r4, #0
 8008088:	d04b      	beq.n	8008122 <_malloc_r+0xea>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	4639      	mov	r1, r7
 800808e:	4630      	mov	r0, r6
 8008090:	eb04 0903 	add.w	r9, r4, r3
 8008094:	f000 fe50 	bl	8008d38 <_sbrk_r>
 8008098:	4581      	cmp	r9, r0
 800809a:	d142      	bne.n	8008122 <_malloc_r+0xea>
 800809c:	6821      	ldr	r1, [r4, #0]
 800809e:	1a6d      	subs	r5, r5, r1
 80080a0:	4629      	mov	r1, r5
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ffa6 	bl	8007ff4 <sbrk_aligned>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d03a      	beq.n	8008122 <_malloc_r+0xea>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	442b      	add	r3, r5
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	f8d8 3000 	ldr.w	r3, [r8]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	bb62      	cbnz	r2, 8008114 <_malloc_r+0xdc>
 80080ba:	f8c8 7000 	str.w	r7, [r8]
 80080be:	e00f      	b.n	80080e0 <_malloc_r+0xa8>
 80080c0:	6822      	ldr	r2, [r4, #0]
 80080c2:	1b52      	subs	r2, r2, r5
 80080c4:	d420      	bmi.n	8008108 <_malloc_r+0xd0>
 80080c6:	2a0b      	cmp	r2, #11
 80080c8:	d917      	bls.n	80080fa <_malloc_r+0xc2>
 80080ca:	1961      	adds	r1, r4, r5
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	6025      	str	r5, [r4, #0]
 80080d0:	bf18      	it	ne
 80080d2:	6059      	strne	r1, [r3, #4]
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	bf08      	it	eq
 80080d8:	f8c8 1000 	streq.w	r1, [r8]
 80080dc:	5162      	str	r2, [r4, r5]
 80080de:	604b      	str	r3, [r1, #4]
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 f82f 	bl	8008144 <__malloc_unlock>
 80080e6:	f104 000b 	add.w	r0, r4, #11
 80080ea:	1d23      	adds	r3, r4, #4
 80080ec:	f020 0007 	bic.w	r0, r0, #7
 80080f0:	1ac2      	subs	r2, r0, r3
 80080f2:	bf1c      	itt	ne
 80080f4:	1a1b      	subne	r3, r3, r0
 80080f6:	50a3      	strne	r3, [r4, r2]
 80080f8:	e7af      	b.n	800805a <_malloc_r+0x22>
 80080fa:	6862      	ldr	r2, [r4, #4]
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	bf0c      	ite	eq
 8008100:	f8c8 2000 	streq.w	r2, [r8]
 8008104:	605a      	strne	r2, [r3, #4]
 8008106:	e7eb      	b.n	80080e0 <_malloc_r+0xa8>
 8008108:	4623      	mov	r3, r4
 800810a:	6864      	ldr	r4, [r4, #4]
 800810c:	e7ae      	b.n	800806c <_malloc_r+0x34>
 800810e:	463c      	mov	r4, r7
 8008110:	687f      	ldr	r7, [r7, #4]
 8008112:	e7b6      	b.n	8008082 <_malloc_r+0x4a>
 8008114:	461a      	mov	r2, r3
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	42a3      	cmp	r3, r4
 800811a:	d1fb      	bne.n	8008114 <_malloc_r+0xdc>
 800811c:	2300      	movs	r3, #0
 800811e:	6053      	str	r3, [r2, #4]
 8008120:	e7de      	b.n	80080e0 <_malloc_r+0xa8>
 8008122:	230c      	movs	r3, #12
 8008124:	6033      	str	r3, [r6, #0]
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f80c 	bl	8008144 <__malloc_unlock>
 800812c:	e794      	b.n	8008058 <_malloc_r+0x20>
 800812e:	6005      	str	r5, [r0, #0]
 8008130:	e7d6      	b.n	80080e0 <_malloc_r+0xa8>
 8008132:	bf00      	nop
 8008134:	2000149c 	.word	0x2000149c

08008138 <__malloc_lock>:
 8008138:	4801      	ldr	r0, [pc, #4]	@ (8008140 <__malloc_lock+0x8>)
 800813a:	f7ff b8b8 	b.w	80072ae <__retarget_lock_acquire_recursive>
 800813e:	bf00      	nop
 8008140:	20001494 	.word	0x20001494

08008144 <__malloc_unlock>:
 8008144:	4801      	ldr	r0, [pc, #4]	@ (800814c <__malloc_unlock+0x8>)
 8008146:	f7ff b8b3 	b.w	80072b0 <__retarget_lock_release_recursive>
 800814a:	bf00      	nop
 800814c:	20001494 	.word	0x20001494

08008150 <_Balloc>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	69c6      	ldr	r6, [r0, #28]
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	b976      	cbnz	r6, 8008178 <_Balloc+0x28>
 800815a:	2010      	movs	r0, #16
 800815c:	f7ff ff42 	bl	8007fe4 <malloc>
 8008160:	4602      	mov	r2, r0
 8008162:	61e0      	str	r0, [r4, #28]
 8008164:	b920      	cbnz	r0, 8008170 <_Balloc+0x20>
 8008166:	4b18      	ldr	r3, [pc, #96]	@ (80081c8 <_Balloc+0x78>)
 8008168:	4818      	ldr	r0, [pc, #96]	@ (80081cc <_Balloc+0x7c>)
 800816a:	216b      	movs	r1, #107	@ 0x6b
 800816c:	f000 fe02 	bl	8008d74 <__assert_func>
 8008170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008174:	6006      	str	r6, [r0, #0]
 8008176:	60c6      	str	r6, [r0, #12]
 8008178:	69e6      	ldr	r6, [r4, #28]
 800817a:	68f3      	ldr	r3, [r6, #12]
 800817c:	b183      	cbz	r3, 80081a0 <_Balloc+0x50>
 800817e:	69e3      	ldr	r3, [r4, #28]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008186:	b9b8      	cbnz	r0, 80081b8 <_Balloc+0x68>
 8008188:	2101      	movs	r1, #1
 800818a:	fa01 f605 	lsl.w	r6, r1, r5
 800818e:	1d72      	adds	r2, r6, #5
 8008190:	0092      	lsls	r2, r2, #2
 8008192:	4620      	mov	r0, r4
 8008194:	f000 fe0c 	bl	8008db0 <_calloc_r>
 8008198:	b160      	cbz	r0, 80081b4 <_Balloc+0x64>
 800819a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800819e:	e00e      	b.n	80081be <_Balloc+0x6e>
 80081a0:	2221      	movs	r2, #33	@ 0x21
 80081a2:	2104      	movs	r1, #4
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fe03 	bl	8008db0 <_calloc_r>
 80081aa:	69e3      	ldr	r3, [r4, #28]
 80081ac:	60f0      	str	r0, [r6, #12]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e4      	bne.n	800817e <_Balloc+0x2e>
 80081b4:	2000      	movs	r0, #0
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	6802      	ldr	r2, [r0, #0]
 80081ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081be:	2300      	movs	r3, #0
 80081c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081c4:	e7f7      	b.n	80081b6 <_Balloc+0x66>
 80081c6:	bf00      	nop
 80081c8:	08009df5 	.word	0x08009df5
 80081cc:	08009e75 	.word	0x08009e75

080081d0 <_Bfree>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	69c6      	ldr	r6, [r0, #28]
 80081d4:	4605      	mov	r5, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	b976      	cbnz	r6, 80081f8 <_Bfree+0x28>
 80081da:	2010      	movs	r0, #16
 80081dc:	f7ff ff02 	bl	8007fe4 <malloc>
 80081e0:	4602      	mov	r2, r0
 80081e2:	61e8      	str	r0, [r5, #28]
 80081e4:	b920      	cbnz	r0, 80081f0 <_Bfree+0x20>
 80081e6:	4b09      	ldr	r3, [pc, #36]	@ (800820c <_Bfree+0x3c>)
 80081e8:	4809      	ldr	r0, [pc, #36]	@ (8008210 <_Bfree+0x40>)
 80081ea:	218f      	movs	r1, #143	@ 0x8f
 80081ec:	f000 fdc2 	bl	8008d74 <__assert_func>
 80081f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081f4:	6006      	str	r6, [r0, #0]
 80081f6:	60c6      	str	r6, [r0, #12]
 80081f8:	b13c      	cbz	r4, 800820a <_Bfree+0x3a>
 80081fa:	69eb      	ldr	r3, [r5, #28]
 80081fc:	6862      	ldr	r2, [r4, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008204:	6021      	str	r1, [r4, #0]
 8008206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	08009df5 	.word	0x08009df5
 8008210:	08009e75 	.word	0x08009e75

08008214 <__multadd>:
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	690d      	ldr	r5, [r1, #16]
 800821a:	4607      	mov	r7, r0
 800821c:	460c      	mov	r4, r1
 800821e:	461e      	mov	r6, r3
 8008220:	f101 0c14 	add.w	ip, r1, #20
 8008224:	2000      	movs	r0, #0
 8008226:	f8dc 3000 	ldr.w	r3, [ip]
 800822a:	b299      	uxth	r1, r3
 800822c:	fb02 6101 	mla	r1, r2, r1, r6
 8008230:	0c1e      	lsrs	r6, r3, #16
 8008232:	0c0b      	lsrs	r3, r1, #16
 8008234:	fb02 3306 	mla	r3, r2, r6, r3
 8008238:	b289      	uxth	r1, r1
 800823a:	3001      	adds	r0, #1
 800823c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008240:	4285      	cmp	r5, r0
 8008242:	f84c 1b04 	str.w	r1, [ip], #4
 8008246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800824a:	dcec      	bgt.n	8008226 <__multadd+0x12>
 800824c:	b30e      	cbz	r6, 8008292 <__multadd+0x7e>
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	42ab      	cmp	r3, r5
 8008252:	dc19      	bgt.n	8008288 <__multadd+0x74>
 8008254:	6861      	ldr	r1, [r4, #4]
 8008256:	4638      	mov	r0, r7
 8008258:	3101      	adds	r1, #1
 800825a:	f7ff ff79 	bl	8008150 <_Balloc>
 800825e:	4680      	mov	r8, r0
 8008260:	b928      	cbnz	r0, 800826e <__multadd+0x5a>
 8008262:	4602      	mov	r2, r0
 8008264:	4b0c      	ldr	r3, [pc, #48]	@ (8008298 <__multadd+0x84>)
 8008266:	480d      	ldr	r0, [pc, #52]	@ (800829c <__multadd+0x88>)
 8008268:	21ba      	movs	r1, #186	@ 0xba
 800826a:	f000 fd83 	bl	8008d74 <__assert_func>
 800826e:	6922      	ldr	r2, [r4, #16]
 8008270:	3202      	adds	r2, #2
 8008272:	f104 010c 	add.w	r1, r4, #12
 8008276:	0092      	lsls	r2, r2, #2
 8008278:	300c      	adds	r0, #12
 800827a:	f000 fd6d 	bl	8008d58 <memcpy>
 800827e:	4621      	mov	r1, r4
 8008280:	4638      	mov	r0, r7
 8008282:	f7ff ffa5 	bl	80081d0 <_Bfree>
 8008286:	4644      	mov	r4, r8
 8008288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800828c:	3501      	adds	r5, #1
 800828e:	615e      	str	r6, [r3, #20]
 8008290:	6125      	str	r5, [r4, #16]
 8008292:	4620      	mov	r0, r4
 8008294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008298:	08009e64 	.word	0x08009e64
 800829c:	08009e75 	.word	0x08009e75

080082a0 <__hi0bits>:
 80082a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80082a4:	4603      	mov	r3, r0
 80082a6:	bf36      	itet	cc
 80082a8:	0403      	lslcc	r3, r0, #16
 80082aa:	2000      	movcs	r0, #0
 80082ac:	2010      	movcc	r0, #16
 80082ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082b2:	bf3c      	itt	cc
 80082b4:	021b      	lslcc	r3, r3, #8
 80082b6:	3008      	addcc	r0, #8
 80082b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082bc:	bf3c      	itt	cc
 80082be:	011b      	lslcc	r3, r3, #4
 80082c0:	3004      	addcc	r0, #4
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c6:	bf3c      	itt	cc
 80082c8:	009b      	lslcc	r3, r3, #2
 80082ca:	3002      	addcc	r0, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	db05      	blt.n	80082dc <__hi0bits+0x3c>
 80082d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082d4:	f100 0001 	add.w	r0, r0, #1
 80082d8:	bf08      	it	eq
 80082da:	2020      	moveq	r0, #32
 80082dc:	4770      	bx	lr

080082de <__lo0bits>:
 80082de:	6803      	ldr	r3, [r0, #0]
 80082e0:	4602      	mov	r2, r0
 80082e2:	f013 0007 	ands.w	r0, r3, #7
 80082e6:	d00b      	beq.n	8008300 <__lo0bits+0x22>
 80082e8:	07d9      	lsls	r1, r3, #31
 80082ea:	d421      	bmi.n	8008330 <__lo0bits+0x52>
 80082ec:	0798      	lsls	r0, r3, #30
 80082ee:	bf49      	itett	mi
 80082f0:	085b      	lsrmi	r3, r3, #1
 80082f2:	089b      	lsrpl	r3, r3, #2
 80082f4:	2001      	movmi	r0, #1
 80082f6:	6013      	strmi	r3, [r2, #0]
 80082f8:	bf5c      	itt	pl
 80082fa:	6013      	strpl	r3, [r2, #0]
 80082fc:	2002      	movpl	r0, #2
 80082fe:	4770      	bx	lr
 8008300:	b299      	uxth	r1, r3
 8008302:	b909      	cbnz	r1, 8008308 <__lo0bits+0x2a>
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	2010      	movs	r0, #16
 8008308:	b2d9      	uxtb	r1, r3
 800830a:	b909      	cbnz	r1, 8008310 <__lo0bits+0x32>
 800830c:	3008      	adds	r0, #8
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	0719      	lsls	r1, r3, #28
 8008312:	bf04      	itt	eq
 8008314:	091b      	lsreq	r3, r3, #4
 8008316:	3004      	addeq	r0, #4
 8008318:	0799      	lsls	r1, r3, #30
 800831a:	bf04      	itt	eq
 800831c:	089b      	lsreq	r3, r3, #2
 800831e:	3002      	addeq	r0, #2
 8008320:	07d9      	lsls	r1, r3, #31
 8008322:	d403      	bmi.n	800832c <__lo0bits+0x4e>
 8008324:	085b      	lsrs	r3, r3, #1
 8008326:	f100 0001 	add.w	r0, r0, #1
 800832a:	d003      	beq.n	8008334 <__lo0bits+0x56>
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	4770      	bx	lr
 8008330:	2000      	movs	r0, #0
 8008332:	4770      	bx	lr
 8008334:	2020      	movs	r0, #32
 8008336:	4770      	bx	lr

08008338 <__i2b>:
 8008338:	b510      	push	{r4, lr}
 800833a:	460c      	mov	r4, r1
 800833c:	2101      	movs	r1, #1
 800833e:	f7ff ff07 	bl	8008150 <_Balloc>
 8008342:	4602      	mov	r2, r0
 8008344:	b928      	cbnz	r0, 8008352 <__i2b+0x1a>
 8008346:	4b05      	ldr	r3, [pc, #20]	@ (800835c <__i2b+0x24>)
 8008348:	4805      	ldr	r0, [pc, #20]	@ (8008360 <__i2b+0x28>)
 800834a:	f240 1145 	movw	r1, #325	@ 0x145
 800834e:	f000 fd11 	bl	8008d74 <__assert_func>
 8008352:	2301      	movs	r3, #1
 8008354:	6144      	str	r4, [r0, #20]
 8008356:	6103      	str	r3, [r0, #16]
 8008358:	bd10      	pop	{r4, pc}
 800835a:	bf00      	nop
 800835c:	08009e64 	.word	0x08009e64
 8008360:	08009e75 	.word	0x08009e75

08008364 <__multiply>:
 8008364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008368:	4614      	mov	r4, r2
 800836a:	690a      	ldr	r2, [r1, #16]
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	429a      	cmp	r2, r3
 8008370:	bfa8      	it	ge
 8008372:	4623      	movge	r3, r4
 8008374:	460f      	mov	r7, r1
 8008376:	bfa4      	itt	ge
 8008378:	460c      	movge	r4, r1
 800837a:	461f      	movge	r7, r3
 800837c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008380:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	6861      	ldr	r1, [r4, #4]
 8008388:	eb0a 0609 	add.w	r6, sl, r9
 800838c:	42b3      	cmp	r3, r6
 800838e:	b085      	sub	sp, #20
 8008390:	bfb8      	it	lt
 8008392:	3101      	addlt	r1, #1
 8008394:	f7ff fedc 	bl	8008150 <_Balloc>
 8008398:	b930      	cbnz	r0, 80083a8 <__multiply+0x44>
 800839a:	4602      	mov	r2, r0
 800839c:	4b44      	ldr	r3, [pc, #272]	@ (80084b0 <__multiply+0x14c>)
 800839e:	4845      	ldr	r0, [pc, #276]	@ (80084b4 <__multiply+0x150>)
 80083a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80083a4:	f000 fce6 	bl	8008d74 <__assert_func>
 80083a8:	f100 0514 	add.w	r5, r0, #20
 80083ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083b0:	462b      	mov	r3, r5
 80083b2:	2200      	movs	r2, #0
 80083b4:	4543      	cmp	r3, r8
 80083b6:	d321      	bcc.n	80083fc <__multiply+0x98>
 80083b8:	f107 0114 	add.w	r1, r7, #20
 80083bc:	f104 0214 	add.w	r2, r4, #20
 80083c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083c8:	9302      	str	r3, [sp, #8]
 80083ca:	1b13      	subs	r3, r2, r4
 80083cc:	3b15      	subs	r3, #21
 80083ce:	f023 0303 	bic.w	r3, r3, #3
 80083d2:	3304      	adds	r3, #4
 80083d4:	f104 0715 	add.w	r7, r4, #21
 80083d8:	42ba      	cmp	r2, r7
 80083da:	bf38      	it	cc
 80083dc:	2304      	movcc	r3, #4
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	9b02      	ldr	r3, [sp, #8]
 80083e2:	9103      	str	r1, [sp, #12]
 80083e4:	428b      	cmp	r3, r1
 80083e6:	d80c      	bhi.n	8008402 <__multiply+0x9e>
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	dd03      	ble.n	80083f4 <__multiply+0x90>
 80083ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d05b      	beq.n	80084ac <__multiply+0x148>
 80083f4:	6106      	str	r6, [r0, #16]
 80083f6:	b005      	add	sp, #20
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	f843 2b04 	str.w	r2, [r3], #4
 8008400:	e7d8      	b.n	80083b4 <__multiply+0x50>
 8008402:	f8b1 a000 	ldrh.w	sl, [r1]
 8008406:	f1ba 0f00 	cmp.w	sl, #0
 800840a:	d024      	beq.n	8008456 <__multiply+0xf2>
 800840c:	f104 0e14 	add.w	lr, r4, #20
 8008410:	46a9      	mov	r9, r5
 8008412:	f04f 0c00 	mov.w	ip, #0
 8008416:	f85e 7b04 	ldr.w	r7, [lr], #4
 800841a:	f8d9 3000 	ldr.w	r3, [r9]
 800841e:	fa1f fb87 	uxth.w	fp, r7
 8008422:	b29b      	uxth	r3, r3
 8008424:	fb0a 330b 	mla	r3, sl, fp, r3
 8008428:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800842c:	f8d9 7000 	ldr.w	r7, [r9]
 8008430:	4463      	add	r3, ip
 8008432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008436:	fb0a c70b 	mla	r7, sl, fp, ip
 800843a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800843e:	b29b      	uxth	r3, r3
 8008440:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008444:	4572      	cmp	r2, lr
 8008446:	f849 3b04 	str.w	r3, [r9], #4
 800844a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800844e:	d8e2      	bhi.n	8008416 <__multiply+0xb2>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	f845 c003 	str.w	ip, [r5, r3]
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800845c:	3104      	adds	r1, #4
 800845e:	f1b9 0f00 	cmp.w	r9, #0
 8008462:	d021      	beq.n	80084a8 <__multiply+0x144>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	f104 0c14 	add.w	ip, r4, #20
 800846a:	46ae      	mov	lr, r5
 800846c:	f04f 0a00 	mov.w	sl, #0
 8008470:	f8bc b000 	ldrh.w	fp, [ip]
 8008474:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008478:	fb09 770b 	mla	r7, r9, fp, r7
 800847c:	4457      	add	r7, sl
 800847e:	b29b      	uxth	r3, r3
 8008480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008484:	f84e 3b04 	str.w	r3, [lr], #4
 8008488:	f85c 3b04 	ldr.w	r3, [ip], #4
 800848c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008490:	f8be 3000 	ldrh.w	r3, [lr]
 8008494:	fb09 330a 	mla	r3, r9, sl, r3
 8008498:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800849c:	4562      	cmp	r2, ip
 800849e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084a2:	d8e5      	bhi.n	8008470 <__multiply+0x10c>
 80084a4:	9f01      	ldr	r7, [sp, #4]
 80084a6:	51eb      	str	r3, [r5, r7]
 80084a8:	3504      	adds	r5, #4
 80084aa:	e799      	b.n	80083e0 <__multiply+0x7c>
 80084ac:	3e01      	subs	r6, #1
 80084ae:	e79b      	b.n	80083e8 <__multiply+0x84>
 80084b0:	08009e64 	.word	0x08009e64
 80084b4:	08009e75 	.word	0x08009e75

080084b8 <__pow5mult>:
 80084b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084bc:	4615      	mov	r5, r2
 80084be:	f012 0203 	ands.w	r2, r2, #3
 80084c2:	4607      	mov	r7, r0
 80084c4:	460e      	mov	r6, r1
 80084c6:	d007      	beq.n	80084d8 <__pow5mult+0x20>
 80084c8:	4c25      	ldr	r4, [pc, #148]	@ (8008560 <__pow5mult+0xa8>)
 80084ca:	3a01      	subs	r2, #1
 80084cc:	2300      	movs	r3, #0
 80084ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084d2:	f7ff fe9f 	bl	8008214 <__multadd>
 80084d6:	4606      	mov	r6, r0
 80084d8:	10ad      	asrs	r5, r5, #2
 80084da:	d03d      	beq.n	8008558 <__pow5mult+0xa0>
 80084dc:	69fc      	ldr	r4, [r7, #28]
 80084de:	b97c      	cbnz	r4, 8008500 <__pow5mult+0x48>
 80084e0:	2010      	movs	r0, #16
 80084e2:	f7ff fd7f 	bl	8007fe4 <malloc>
 80084e6:	4602      	mov	r2, r0
 80084e8:	61f8      	str	r0, [r7, #28]
 80084ea:	b928      	cbnz	r0, 80084f8 <__pow5mult+0x40>
 80084ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008564 <__pow5mult+0xac>)
 80084ee:	481e      	ldr	r0, [pc, #120]	@ (8008568 <__pow5mult+0xb0>)
 80084f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084f4:	f000 fc3e 	bl	8008d74 <__assert_func>
 80084f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084fc:	6004      	str	r4, [r0, #0]
 80084fe:	60c4      	str	r4, [r0, #12]
 8008500:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008508:	b94c      	cbnz	r4, 800851e <__pow5mult+0x66>
 800850a:	f240 2171 	movw	r1, #625	@ 0x271
 800850e:	4638      	mov	r0, r7
 8008510:	f7ff ff12 	bl	8008338 <__i2b>
 8008514:	2300      	movs	r3, #0
 8008516:	f8c8 0008 	str.w	r0, [r8, #8]
 800851a:	4604      	mov	r4, r0
 800851c:	6003      	str	r3, [r0, #0]
 800851e:	f04f 0900 	mov.w	r9, #0
 8008522:	07eb      	lsls	r3, r5, #31
 8008524:	d50a      	bpl.n	800853c <__pow5mult+0x84>
 8008526:	4631      	mov	r1, r6
 8008528:	4622      	mov	r2, r4
 800852a:	4638      	mov	r0, r7
 800852c:	f7ff ff1a 	bl	8008364 <__multiply>
 8008530:	4631      	mov	r1, r6
 8008532:	4680      	mov	r8, r0
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff fe4b 	bl	80081d0 <_Bfree>
 800853a:	4646      	mov	r6, r8
 800853c:	106d      	asrs	r5, r5, #1
 800853e:	d00b      	beq.n	8008558 <__pow5mult+0xa0>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	b938      	cbnz	r0, 8008554 <__pow5mult+0x9c>
 8008544:	4622      	mov	r2, r4
 8008546:	4621      	mov	r1, r4
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ff0b 	bl	8008364 <__multiply>
 800854e:	6020      	str	r0, [r4, #0]
 8008550:	f8c0 9000 	str.w	r9, [r0]
 8008554:	4604      	mov	r4, r0
 8008556:	e7e4      	b.n	8008522 <__pow5mult+0x6a>
 8008558:	4630      	mov	r0, r6
 800855a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855e:	bf00      	nop
 8008560:	08009ed0 	.word	0x08009ed0
 8008564:	08009df5 	.word	0x08009df5
 8008568:	08009e75 	.word	0x08009e75

0800856c <__lshift>:
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	460c      	mov	r4, r1
 8008572:	6849      	ldr	r1, [r1, #4]
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800857a:	68a3      	ldr	r3, [r4, #8]
 800857c:	4607      	mov	r7, r0
 800857e:	4691      	mov	r9, r2
 8008580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008584:	f108 0601 	add.w	r6, r8, #1
 8008588:	42b3      	cmp	r3, r6
 800858a:	db0b      	blt.n	80085a4 <__lshift+0x38>
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff fddf 	bl	8008150 <_Balloc>
 8008592:	4605      	mov	r5, r0
 8008594:	b948      	cbnz	r0, 80085aa <__lshift+0x3e>
 8008596:	4602      	mov	r2, r0
 8008598:	4b28      	ldr	r3, [pc, #160]	@ (800863c <__lshift+0xd0>)
 800859a:	4829      	ldr	r0, [pc, #164]	@ (8008640 <__lshift+0xd4>)
 800859c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80085a0:	f000 fbe8 	bl	8008d74 <__assert_func>
 80085a4:	3101      	adds	r1, #1
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	e7ee      	b.n	8008588 <__lshift+0x1c>
 80085aa:	2300      	movs	r3, #0
 80085ac:	f100 0114 	add.w	r1, r0, #20
 80085b0:	f100 0210 	add.w	r2, r0, #16
 80085b4:	4618      	mov	r0, r3
 80085b6:	4553      	cmp	r3, sl
 80085b8:	db33      	blt.n	8008622 <__lshift+0xb6>
 80085ba:	6920      	ldr	r0, [r4, #16]
 80085bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085c0:	f104 0314 	add.w	r3, r4, #20
 80085c4:	f019 091f 	ands.w	r9, r9, #31
 80085c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085d0:	d02b      	beq.n	800862a <__lshift+0xbe>
 80085d2:	f1c9 0e20 	rsb	lr, r9, #32
 80085d6:	468a      	mov	sl, r1
 80085d8:	2200      	movs	r2, #0
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	fa00 f009 	lsl.w	r0, r0, r9
 80085e0:	4310      	orrs	r0, r2
 80085e2:	f84a 0b04 	str.w	r0, [sl], #4
 80085e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ea:	459c      	cmp	ip, r3
 80085ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80085f0:	d8f3      	bhi.n	80085da <__lshift+0x6e>
 80085f2:	ebac 0304 	sub.w	r3, ip, r4
 80085f6:	3b15      	subs	r3, #21
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	3304      	adds	r3, #4
 80085fe:	f104 0015 	add.w	r0, r4, #21
 8008602:	4584      	cmp	ip, r0
 8008604:	bf38      	it	cc
 8008606:	2304      	movcc	r3, #4
 8008608:	50ca      	str	r2, [r1, r3]
 800860a:	b10a      	cbz	r2, 8008610 <__lshift+0xa4>
 800860c:	f108 0602 	add.w	r6, r8, #2
 8008610:	3e01      	subs	r6, #1
 8008612:	4638      	mov	r0, r7
 8008614:	612e      	str	r6, [r5, #16]
 8008616:	4621      	mov	r1, r4
 8008618:	f7ff fdda 	bl	80081d0 <_Bfree>
 800861c:	4628      	mov	r0, r5
 800861e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008622:	f842 0f04 	str.w	r0, [r2, #4]!
 8008626:	3301      	adds	r3, #1
 8008628:	e7c5      	b.n	80085b6 <__lshift+0x4a>
 800862a:	3904      	subs	r1, #4
 800862c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008630:	f841 2f04 	str.w	r2, [r1, #4]!
 8008634:	459c      	cmp	ip, r3
 8008636:	d8f9      	bhi.n	800862c <__lshift+0xc0>
 8008638:	e7ea      	b.n	8008610 <__lshift+0xa4>
 800863a:	bf00      	nop
 800863c:	08009e64 	.word	0x08009e64
 8008640:	08009e75 	.word	0x08009e75

08008644 <__mcmp>:
 8008644:	690a      	ldr	r2, [r1, #16]
 8008646:	4603      	mov	r3, r0
 8008648:	6900      	ldr	r0, [r0, #16]
 800864a:	1a80      	subs	r0, r0, r2
 800864c:	b530      	push	{r4, r5, lr}
 800864e:	d10e      	bne.n	800866e <__mcmp+0x2a>
 8008650:	3314      	adds	r3, #20
 8008652:	3114      	adds	r1, #20
 8008654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800865c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008664:	4295      	cmp	r5, r2
 8008666:	d003      	beq.n	8008670 <__mcmp+0x2c>
 8008668:	d205      	bcs.n	8008676 <__mcmp+0x32>
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	42a3      	cmp	r3, r4
 8008672:	d3f3      	bcc.n	800865c <__mcmp+0x18>
 8008674:	e7fb      	b.n	800866e <__mcmp+0x2a>
 8008676:	2001      	movs	r0, #1
 8008678:	e7f9      	b.n	800866e <__mcmp+0x2a>
	...

0800867c <__mdiff>:
 800867c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	4689      	mov	r9, r1
 8008682:	4606      	mov	r6, r0
 8008684:	4611      	mov	r1, r2
 8008686:	4648      	mov	r0, r9
 8008688:	4614      	mov	r4, r2
 800868a:	f7ff ffdb 	bl	8008644 <__mcmp>
 800868e:	1e05      	subs	r5, r0, #0
 8008690:	d112      	bne.n	80086b8 <__mdiff+0x3c>
 8008692:	4629      	mov	r1, r5
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff fd5b 	bl	8008150 <_Balloc>
 800869a:	4602      	mov	r2, r0
 800869c:	b928      	cbnz	r0, 80086aa <__mdiff+0x2e>
 800869e:	4b3f      	ldr	r3, [pc, #252]	@ (800879c <__mdiff+0x120>)
 80086a0:	f240 2137 	movw	r1, #567	@ 0x237
 80086a4:	483e      	ldr	r0, [pc, #248]	@ (80087a0 <__mdiff+0x124>)
 80086a6:	f000 fb65 	bl	8008d74 <__assert_func>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086b0:	4610      	mov	r0, r2
 80086b2:	b003      	add	sp, #12
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	bfbc      	itt	lt
 80086ba:	464b      	movlt	r3, r9
 80086bc:	46a1      	movlt	r9, r4
 80086be:	4630      	mov	r0, r6
 80086c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086c4:	bfba      	itte	lt
 80086c6:	461c      	movlt	r4, r3
 80086c8:	2501      	movlt	r5, #1
 80086ca:	2500      	movge	r5, #0
 80086cc:	f7ff fd40 	bl	8008150 <_Balloc>
 80086d0:	4602      	mov	r2, r0
 80086d2:	b918      	cbnz	r0, 80086dc <__mdiff+0x60>
 80086d4:	4b31      	ldr	r3, [pc, #196]	@ (800879c <__mdiff+0x120>)
 80086d6:	f240 2145 	movw	r1, #581	@ 0x245
 80086da:	e7e3      	b.n	80086a4 <__mdiff+0x28>
 80086dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086e0:	6926      	ldr	r6, [r4, #16]
 80086e2:	60c5      	str	r5, [r0, #12]
 80086e4:	f109 0310 	add.w	r3, r9, #16
 80086e8:	f109 0514 	add.w	r5, r9, #20
 80086ec:	f104 0e14 	add.w	lr, r4, #20
 80086f0:	f100 0b14 	add.w	fp, r0, #20
 80086f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	46d9      	mov	r9, fp
 8008700:	f04f 0c00 	mov.w	ip, #0
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	f85e 0b04 	ldr.w	r0, [lr], #4
 800870a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	fa1f f38a 	uxth.w	r3, sl
 8008714:	4619      	mov	r1, r3
 8008716:	b283      	uxth	r3, r0
 8008718:	1acb      	subs	r3, r1, r3
 800871a:	0c00      	lsrs	r0, r0, #16
 800871c:	4463      	add	r3, ip
 800871e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008722:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008726:	b29b      	uxth	r3, r3
 8008728:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800872c:	4576      	cmp	r6, lr
 800872e:	f849 3b04 	str.w	r3, [r9], #4
 8008732:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008736:	d8e5      	bhi.n	8008704 <__mdiff+0x88>
 8008738:	1b33      	subs	r3, r6, r4
 800873a:	3b15      	subs	r3, #21
 800873c:	f023 0303 	bic.w	r3, r3, #3
 8008740:	3415      	adds	r4, #21
 8008742:	3304      	adds	r3, #4
 8008744:	42a6      	cmp	r6, r4
 8008746:	bf38      	it	cc
 8008748:	2304      	movcc	r3, #4
 800874a:	441d      	add	r5, r3
 800874c:	445b      	add	r3, fp
 800874e:	461e      	mov	r6, r3
 8008750:	462c      	mov	r4, r5
 8008752:	4544      	cmp	r4, r8
 8008754:	d30e      	bcc.n	8008774 <__mdiff+0xf8>
 8008756:	f108 0103 	add.w	r1, r8, #3
 800875a:	1b49      	subs	r1, r1, r5
 800875c:	f021 0103 	bic.w	r1, r1, #3
 8008760:	3d03      	subs	r5, #3
 8008762:	45a8      	cmp	r8, r5
 8008764:	bf38      	it	cc
 8008766:	2100      	movcc	r1, #0
 8008768:	440b      	add	r3, r1
 800876a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800876e:	b191      	cbz	r1, 8008796 <__mdiff+0x11a>
 8008770:	6117      	str	r7, [r2, #16]
 8008772:	e79d      	b.n	80086b0 <__mdiff+0x34>
 8008774:	f854 1b04 	ldr.w	r1, [r4], #4
 8008778:	46e6      	mov	lr, ip
 800877a:	0c08      	lsrs	r0, r1, #16
 800877c:	fa1c fc81 	uxtah	ip, ip, r1
 8008780:	4471      	add	r1, lr
 8008782:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008786:	b289      	uxth	r1, r1
 8008788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800878c:	f846 1b04 	str.w	r1, [r6], #4
 8008790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008794:	e7dd      	b.n	8008752 <__mdiff+0xd6>
 8008796:	3f01      	subs	r7, #1
 8008798:	e7e7      	b.n	800876a <__mdiff+0xee>
 800879a:	bf00      	nop
 800879c:	08009e64 	.word	0x08009e64
 80087a0:	08009e75 	.word	0x08009e75

080087a4 <__d2b>:
 80087a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087a8:	460f      	mov	r7, r1
 80087aa:	2101      	movs	r1, #1
 80087ac:	ec59 8b10 	vmov	r8, r9, d0
 80087b0:	4616      	mov	r6, r2
 80087b2:	f7ff fccd 	bl	8008150 <_Balloc>
 80087b6:	4604      	mov	r4, r0
 80087b8:	b930      	cbnz	r0, 80087c8 <__d2b+0x24>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4b23      	ldr	r3, [pc, #140]	@ (800884c <__d2b+0xa8>)
 80087be:	4824      	ldr	r0, [pc, #144]	@ (8008850 <__d2b+0xac>)
 80087c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80087c4:	f000 fad6 	bl	8008d74 <__assert_func>
 80087c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087d0:	b10d      	cbz	r5, 80087d6 <__d2b+0x32>
 80087d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	f1b8 0300 	subs.w	r3, r8, #0
 80087dc:	d023      	beq.n	8008826 <__d2b+0x82>
 80087de:	4668      	mov	r0, sp
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	f7ff fd7c 	bl	80082de <__lo0bits>
 80087e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087ea:	b1d0      	cbz	r0, 8008822 <__d2b+0x7e>
 80087ec:	f1c0 0320 	rsb	r3, r0, #32
 80087f0:	fa02 f303 	lsl.w	r3, r2, r3
 80087f4:	430b      	orrs	r3, r1
 80087f6:	40c2      	lsrs	r2, r0
 80087f8:	6163      	str	r3, [r4, #20]
 80087fa:	9201      	str	r2, [sp, #4]
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	61a3      	str	r3, [r4, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	bf0c      	ite	eq
 8008804:	2201      	moveq	r2, #1
 8008806:	2202      	movne	r2, #2
 8008808:	6122      	str	r2, [r4, #16]
 800880a:	b1a5      	cbz	r5, 8008836 <__d2b+0x92>
 800880c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008810:	4405      	add	r5, r0
 8008812:	603d      	str	r5, [r7, #0]
 8008814:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008818:	6030      	str	r0, [r6, #0]
 800881a:	4620      	mov	r0, r4
 800881c:	b003      	add	sp, #12
 800881e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008822:	6161      	str	r1, [r4, #20]
 8008824:	e7ea      	b.n	80087fc <__d2b+0x58>
 8008826:	a801      	add	r0, sp, #4
 8008828:	f7ff fd59 	bl	80082de <__lo0bits>
 800882c:	9b01      	ldr	r3, [sp, #4]
 800882e:	6163      	str	r3, [r4, #20]
 8008830:	3020      	adds	r0, #32
 8008832:	2201      	movs	r2, #1
 8008834:	e7e8      	b.n	8008808 <__d2b+0x64>
 8008836:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800883a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800883e:	6038      	str	r0, [r7, #0]
 8008840:	6918      	ldr	r0, [r3, #16]
 8008842:	f7ff fd2d 	bl	80082a0 <__hi0bits>
 8008846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800884a:	e7e5      	b.n	8008818 <__d2b+0x74>
 800884c:	08009e64 	.word	0x08009e64
 8008850:	08009e75 	.word	0x08009e75

08008854 <__sfputc_r>:
 8008854:	6893      	ldr	r3, [r2, #8]
 8008856:	3b01      	subs	r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	b410      	push	{r4}
 800885c:	6093      	str	r3, [r2, #8]
 800885e:	da08      	bge.n	8008872 <__sfputc_r+0x1e>
 8008860:	6994      	ldr	r4, [r2, #24]
 8008862:	42a3      	cmp	r3, r4
 8008864:	db01      	blt.n	800886a <__sfputc_r+0x16>
 8008866:	290a      	cmp	r1, #10
 8008868:	d103      	bne.n	8008872 <__sfputc_r+0x1e>
 800886a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800886e:	f7fe bc0c 	b.w	800708a <__swbuf_r>
 8008872:	6813      	ldr	r3, [r2, #0]
 8008874:	1c58      	adds	r0, r3, #1
 8008876:	6010      	str	r0, [r2, #0]
 8008878:	7019      	strb	r1, [r3, #0]
 800887a:	4608      	mov	r0, r1
 800887c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008880:	4770      	bx	lr

08008882 <__sfputs_r>:
 8008882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	4614      	mov	r4, r2
 800888a:	18d5      	adds	r5, r2, r3
 800888c:	42ac      	cmp	r4, r5
 800888e:	d101      	bne.n	8008894 <__sfputs_r+0x12>
 8008890:	2000      	movs	r0, #0
 8008892:	e007      	b.n	80088a4 <__sfputs_r+0x22>
 8008894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008898:	463a      	mov	r2, r7
 800889a:	4630      	mov	r0, r6
 800889c:	f7ff ffda 	bl	8008854 <__sfputc_r>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d1f3      	bne.n	800888c <__sfputs_r+0xa>
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088a8 <_vfiprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460d      	mov	r5, r1
 80088ae:	b09d      	sub	sp, #116	@ 0x74
 80088b0:	4614      	mov	r4, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	4606      	mov	r6, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_vfiprintf_r+0x18>
 80088b8:	6a03      	ldr	r3, [r0, #32]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x18>
 80088bc:	f7fe fafc 	bl	8006eb8 <__sinit>
 80088c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088c2:	07d9      	lsls	r1, r3, #31
 80088c4:	d405      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	059a      	lsls	r2, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ce:	f7fe fcee 	bl	80072ae <__retarget_lock_acquire_recursive>
 80088d2:	89ab      	ldrh	r3, [r5, #12]
 80088d4:	071b      	lsls	r3, r3, #28
 80088d6:	d501      	bpl.n	80088dc <_vfiprintf_r+0x34>
 80088d8:	692b      	ldr	r3, [r5, #16]
 80088da:	b99b      	cbnz	r3, 8008904 <_vfiprintf_r+0x5c>
 80088dc:	4629      	mov	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f7fe fc12 	bl	8007108 <__swsetup_r>
 80088e4:	b170      	cbz	r0, 8008904 <_vfiprintf_r+0x5c>
 80088e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e8:	07dc      	lsls	r4, r3, #31
 80088ea:	d504      	bpl.n	80088f6 <_vfiprintf_r+0x4e>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	b01d      	add	sp, #116	@ 0x74
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	0598      	lsls	r0, r3, #22
 80088fa:	d4f7      	bmi.n	80088ec <_vfiprintf_r+0x44>
 80088fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fe:	f7fe fcd7 	bl	80072b0 <__retarget_lock_release_recursive>
 8008902:	e7f3      	b.n	80088ec <_vfiprintf_r+0x44>
 8008904:	2300      	movs	r3, #0
 8008906:	9309      	str	r3, [sp, #36]	@ 0x24
 8008908:	2320      	movs	r3, #32
 800890a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800890e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008912:	2330      	movs	r3, #48	@ 0x30
 8008914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ac4 <_vfiprintf_r+0x21c>
 8008918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800891c:	f04f 0901 	mov.w	r9, #1
 8008920:	4623      	mov	r3, r4
 8008922:	469a      	mov	sl, r3
 8008924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008928:	b10a      	cbz	r2, 800892e <_vfiprintf_r+0x86>
 800892a:	2a25      	cmp	r2, #37	@ 0x25
 800892c:	d1f9      	bne.n	8008922 <_vfiprintf_r+0x7a>
 800892e:	ebba 0b04 	subs.w	fp, sl, r4
 8008932:	d00b      	beq.n	800894c <_vfiprintf_r+0xa4>
 8008934:	465b      	mov	r3, fp
 8008936:	4622      	mov	r2, r4
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ffa1 	bl	8008882 <__sfputs_r>
 8008940:	3001      	adds	r0, #1
 8008942:	f000 80a7 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	445a      	add	r2, fp
 800894a:	9209      	str	r2, [sp, #36]	@ 0x24
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 809f 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008956:	2300      	movs	r3, #0
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800896c:	931a      	str	r3, [sp, #104]	@ 0x68
 800896e:	4654      	mov	r4, sl
 8008970:	2205      	movs	r2, #5
 8008972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008976:	4853      	ldr	r0, [pc, #332]	@ (8008ac4 <_vfiprintf_r+0x21c>)
 8008978:	f7f7 fc2a 	bl	80001d0 <memchr>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	b9d8      	cbnz	r0, 80089b8 <_vfiprintf_r+0x110>
 8008980:	06d1      	lsls	r1, r2, #27
 8008982:	bf44      	itt	mi
 8008984:	2320      	movmi	r3, #32
 8008986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800898a:	0713      	lsls	r3, r2, #28
 800898c:	bf44      	itt	mi
 800898e:	232b      	movmi	r3, #43	@ 0x2b
 8008990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b2a      	cmp	r3, #42	@ 0x2a
 800899a:	d015      	beq.n	80089c8 <_vfiprintf_r+0x120>
 800899c:	9a07      	ldr	r2, [sp, #28]
 800899e:	4654      	mov	r4, sl
 80089a0:	2000      	movs	r0, #0
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4621      	mov	r1, r4
 80089a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ac:	3b30      	subs	r3, #48	@ 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d94b      	bls.n	8008a4a <_vfiprintf_r+0x1a2>
 80089b2:	b1b0      	cbz	r0, 80089e2 <_vfiprintf_r+0x13a>
 80089b4:	9207      	str	r2, [sp, #28]
 80089b6:	e014      	b.n	80089e2 <_vfiprintf_r+0x13a>
 80089b8:	eba0 0308 	sub.w	r3, r0, r8
 80089bc:	fa09 f303 	lsl.w	r3, r9, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	46a2      	mov	sl, r4
 80089c6:	e7d2      	b.n	800896e <_vfiprintf_r+0xc6>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	9103      	str	r1, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbb      	ittet	lt
 80089d4:	425b      	neglt	r3, r3
 80089d6:	f042 0202 	orrlt.w	r2, r2, #2
 80089da:	9307      	strge	r3, [sp, #28]
 80089dc:	9307      	strlt	r3, [sp, #28]
 80089de:	bfb8      	it	lt
 80089e0:	9204      	strlt	r2, [sp, #16]
 80089e2:	7823      	ldrb	r3, [r4, #0]
 80089e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e6:	d10a      	bne.n	80089fe <_vfiprintf_r+0x156>
 80089e8:	7863      	ldrb	r3, [r4, #1]
 80089ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ec:	d132      	bne.n	8008a54 <_vfiprintf_r+0x1ac>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9203      	str	r2, [sp, #12]
 80089f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089fa:	3402      	adds	r4, #2
 80089fc:	9305      	str	r3, [sp, #20]
 80089fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ad4 <_vfiprintf_r+0x22c>
 8008a02:	7821      	ldrb	r1, [r4, #0]
 8008a04:	2203      	movs	r2, #3
 8008a06:	4650      	mov	r0, sl
 8008a08:	f7f7 fbe2 	bl	80001d0 <memchr>
 8008a0c:	b138      	cbz	r0, 8008a1e <_vfiprintf_r+0x176>
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	eba0 000a 	sub.w	r0, r0, sl
 8008a14:	2240      	movs	r2, #64	@ 0x40
 8008a16:	4082      	lsls	r2, r0
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	3401      	adds	r4, #1
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a22:	4829      	ldr	r0, [pc, #164]	@ (8008ac8 <_vfiprintf_r+0x220>)
 8008a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a28:	2206      	movs	r2, #6
 8008a2a:	f7f7 fbd1 	bl	80001d0 <memchr>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d03f      	beq.n	8008ab2 <_vfiprintf_r+0x20a>
 8008a32:	4b26      	ldr	r3, [pc, #152]	@ (8008acc <_vfiprintf_r+0x224>)
 8008a34:	bb1b      	cbnz	r3, 8008a7e <_vfiprintf_r+0x1d6>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	3307      	adds	r3, #7
 8008a3a:	f023 0307 	bic.w	r3, r3, #7
 8008a3e:	3308      	adds	r3, #8
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a44:	443b      	add	r3, r7
 8008a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a48:	e76a      	b.n	8008920 <_vfiprintf_r+0x78>
 8008a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a4e:	460c      	mov	r4, r1
 8008a50:	2001      	movs	r0, #1
 8008a52:	e7a8      	b.n	80089a6 <_vfiprintf_r+0xfe>
 8008a54:	2300      	movs	r3, #0
 8008a56:	3401      	adds	r4, #1
 8008a58:	9305      	str	r3, [sp, #20]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f04f 0c0a 	mov.w	ip, #10
 8008a60:	4620      	mov	r0, r4
 8008a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a66:	3a30      	subs	r2, #48	@ 0x30
 8008a68:	2a09      	cmp	r2, #9
 8008a6a:	d903      	bls.n	8008a74 <_vfiprintf_r+0x1cc>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0c6      	beq.n	80089fe <_vfiprintf_r+0x156>
 8008a70:	9105      	str	r1, [sp, #20]
 8008a72:	e7c4      	b.n	80089fe <_vfiprintf_r+0x156>
 8008a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a78:	4604      	mov	r4, r0
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e7f0      	b.n	8008a60 <_vfiprintf_r+0x1b8>
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	462a      	mov	r2, r5
 8008a84:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7fd fdd1 	bl	8006630 <_printf_float>
 8008a8e:	4607      	mov	r7, r0
 8008a90:	1c78      	adds	r0, r7, #1
 8008a92:	d1d6      	bne.n	8008a42 <_vfiprintf_r+0x19a>
 8008a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aa2:	f7fe fc05 	bl	80072b0 <__retarget_lock_release_recursive>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	065b      	lsls	r3, r3, #25
 8008aaa:	f53f af1f 	bmi.w	80088ec <_vfiprintf_r+0x44>
 8008aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ab0:	e71e      	b.n	80088f0 <_vfiprintf_r+0x48>
 8008ab2:	ab03      	add	r3, sp, #12
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008aba:	a904      	add	r1, sp, #16
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7fe f84f 	bl	8006b60 <_printf_i>
 8008ac2:	e7e4      	b.n	8008a8e <_vfiprintf_r+0x1e6>
 8008ac4:	08009fd0 	.word	0x08009fd0
 8008ac8:	08009fda 	.word	0x08009fda
 8008acc:	08006631 	.word	0x08006631
 8008ad0:	08008883 	.word	0x08008883
 8008ad4:	08009fd6 	.word	0x08009fd6

08008ad8 <__sflush_r>:
 8008ad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	0716      	lsls	r6, r2, #28
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	d454      	bmi.n	8008b92 <__sflush_r+0xba>
 8008ae8:	684b      	ldr	r3, [r1, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dc02      	bgt.n	8008af4 <__sflush_r+0x1c>
 8008aee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dd48      	ble.n	8008b86 <__sflush_r+0xae>
 8008af4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af6:	2e00      	cmp	r6, #0
 8008af8:	d045      	beq.n	8008b86 <__sflush_r+0xae>
 8008afa:	2300      	movs	r3, #0
 8008afc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b00:	682f      	ldr	r7, [r5, #0]
 8008b02:	6a21      	ldr	r1, [r4, #32]
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	d030      	beq.n	8008b6a <__sflush_r+0x92>
 8008b08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	0759      	lsls	r1, r3, #29
 8008b0e:	d505      	bpl.n	8008b1c <__sflush_r+0x44>
 8008b10:	6863      	ldr	r3, [r4, #4]
 8008b12:	1ad2      	subs	r2, r2, r3
 8008b14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b16:	b10b      	cbz	r3, 8008b1c <__sflush_r+0x44>
 8008b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b20:	6a21      	ldr	r1, [r4, #32]
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b0      	blx	r6
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	d106      	bne.n	8008b3a <__sflush_r+0x62>
 8008b2c:	6829      	ldr	r1, [r5, #0]
 8008b2e:	291d      	cmp	r1, #29
 8008b30:	d82b      	bhi.n	8008b8a <__sflush_r+0xb2>
 8008b32:	4a2a      	ldr	r2, [pc, #168]	@ (8008bdc <__sflush_r+0x104>)
 8008b34:	410a      	asrs	r2, r1
 8008b36:	07d6      	lsls	r6, r2, #31
 8008b38:	d427      	bmi.n	8008b8a <__sflush_r+0xb2>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	6062      	str	r2, [r4, #4]
 8008b3e:	04d9      	lsls	r1, r3, #19
 8008b40:	6922      	ldr	r2, [r4, #16]
 8008b42:	6022      	str	r2, [r4, #0]
 8008b44:	d504      	bpl.n	8008b50 <__sflush_r+0x78>
 8008b46:	1c42      	adds	r2, r0, #1
 8008b48:	d101      	bne.n	8008b4e <__sflush_r+0x76>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	b903      	cbnz	r3, 8008b50 <__sflush_r+0x78>
 8008b4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b52:	602f      	str	r7, [r5, #0]
 8008b54:	b1b9      	cbz	r1, 8008b86 <__sflush_r+0xae>
 8008b56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	d002      	beq.n	8008b64 <__sflush_r+0x8c>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f7ff f9f6 	bl	8007f50 <_free_r>
 8008b64:	2300      	movs	r3, #0
 8008b66:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b68:	e00d      	b.n	8008b86 <__sflush_r+0xae>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	4602      	mov	r2, r0
 8008b72:	1c50      	adds	r0, r2, #1
 8008b74:	d1c9      	bne.n	8008b0a <__sflush_r+0x32>
 8008b76:	682b      	ldr	r3, [r5, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0c6      	beq.n	8008b0a <__sflush_r+0x32>
 8008b7c:	2b1d      	cmp	r3, #29
 8008b7e:	d001      	beq.n	8008b84 <__sflush_r+0xac>
 8008b80:	2b16      	cmp	r3, #22
 8008b82:	d11e      	bne.n	8008bc2 <__sflush_r+0xea>
 8008b84:	602f      	str	r7, [r5, #0]
 8008b86:	2000      	movs	r0, #0
 8008b88:	e022      	b.n	8008bd0 <__sflush_r+0xf8>
 8008b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8e:	b21b      	sxth	r3, r3
 8008b90:	e01b      	b.n	8008bca <__sflush_r+0xf2>
 8008b92:	690f      	ldr	r7, [r1, #16]
 8008b94:	2f00      	cmp	r7, #0
 8008b96:	d0f6      	beq.n	8008b86 <__sflush_r+0xae>
 8008b98:	0793      	lsls	r3, r2, #30
 8008b9a:	680e      	ldr	r6, [r1, #0]
 8008b9c:	bf08      	it	eq
 8008b9e:	694b      	ldreq	r3, [r1, #20]
 8008ba0:	600f      	str	r7, [r1, #0]
 8008ba2:	bf18      	it	ne
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	eba6 0807 	sub.w	r8, r6, r7
 8008baa:	608b      	str	r3, [r1, #8]
 8008bac:	f1b8 0f00 	cmp.w	r8, #0
 8008bb0:	dde9      	ble.n	8008b86 <__sflush_r+0xae>
 8008bb2:	6a21      	ldr	r1, [r4, #32]
 8008bb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bb6:	4643      	mov	r3, r8
 8008bb8:	463a      	mov	r2, r7
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b0      	blx	r6
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	dc08      	bgt.n	8008bd4 <__sflush_r+0xfc>
 8008bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd4:	4407      	add	r7, r0
 8008bd6:	eba8 0800 	sub.w	r8, r8, r0
 8008bda:	e7e7      	b.n	8008bac <__sflush_r+0xd4>
 8008bdc:	dfbffffe 	.word	0xdfbffffe

08008be0 <_fflush_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	4605      	mov	r5, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b913      	cbnz	r3, 8008bf0 <_fflush_r+0x10>
 8008bea:	2500      	movs	r5, #0
 8008bec:	4628      	mov	r0, r5
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	b118      	cbz	r0, 8008bfa <_fflush_r+0x1a>
 8008bf2:	6a03      	ldr	r3, [r0, #32]
 8008bf4:	b90b      	cbnz	r3, 8008bfa <_fflush_r+0x1a>
 8008bf6:	f7fe f95f 	bl	8006eb8 <__sinit>
 8008bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f3      	beq.n	8008bea <_fflush_r+0xa>
 8008c02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c04:	07d0      	lsls	r0, r2, #31
 8008c06:	d404      	bmi.n	8008c12 <_fflush_r+0x32>
 8008c08:	0599      	lsls	r1, r3, #22
 8008c0a:	d402      	bmi.n	8008c12 <_fflush_r+0x32>
 8008c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c0e:	f7fe fb4e 	bl	80072ae <__retarget_lock_acquire_recursive>
 8008c12:	4628      	mov	r0, r5
 8008c14:	4621      	mov	r1, r4
 8008c16:	f7ff ff5f 	bl	8008ad8 <__sflush_r>
 8008c1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c1c:	07da      	lsls	r2, r3, #31
 8008c1e:	4605      	mov	r5, r0
 8008c20:	d4e4      	bmi.n	8008bec <_fflush_r+0xc>
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	059b      	lsls	r3, r3, #22
 8008c26:	d4e1      	bmi.n	8008bec <_fflush_r+0xc>
 8008c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c2a:	f7fe fb41 	bl	80072b0 <__retarget_lock_release_recursive>
 8008c2e:	e7dd      	b.n	8008bec <_fflush_r+0xc>

08008c30 <__swhatbuf_r>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	460c      	mov	r4, r1
 8008c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	b096      	sub	sp, #88	@ 0x58
 8008c3c:	4615      	mov	r5, r2
 8008c3e:	461e      	mov	r6, r3
 8008c40:	da0d      	bge.n	8008c5e <__swhatbuf_r+0x2e>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c48:	f04f 0100 	mov.w	r1, #0
 8008c4c:	bf14      	ite	ne
 8008c4e:	2340      	movne	r3, #64	@ 0x40
 8008c50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c54:	2000      	movs	r0, #0
 8008c56:	6031      	str	r1, [r6, #0]
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	b016      	add	sp, #88	@ 0x58
 8008c5c:	bd70      	pop	{r4, r5, r6, pc}
 8008c5e:	466a      	mov	r2, sp
 8008c60:	f000 f848 	bl	8008cf4 <_fstat_r>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	dbec      	blt.n	8008c42 <__swhatbuf_r+0x12>
 8008c68:	9901      	ldr	r1, [sp, #4]
 8008c6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c72:	4259      	negs	r1, r3
 8008c74:	4159      	adcs	r1, r3
 8008c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c7a:	e7eb      	b.n	8008c54 <__swhatbuf_r+0x24>

08008c7c <__smakebuf_r>:
 8008c7c:	898b      	ldrh	r3, [r1, #12]
 8008c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c80:	079d      	lsls	r5, r3, #30
 8008c82:	4606      	mov	r6, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	d507      	bpl.n	8008c98 <__smakebuf_r+0x1c>
 8008c88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2301      	movs	r3, #1
 8008c92:	6163      	str	r3, [r4, #20]
 8008c94:	b003      	add	sp, #12
 8008c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c98:	ab01      	add	r3, sp, #4
 8008c9a:	466a      	mov	r2, sp
 8008c9c:	f7ff ffc8 	bl	8008c30 <__swhatbuf_r>
 8008ca0:	9f00      	ldr	r7, [sp, #0]
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff f9c6 	bl	8008038 <_malloc_r>
 8008cac:	b948      	cbnz	r0, 8008cc2 <__smakebuf_r+0x46>
 8008cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb2:	059a      	lsls	r2, r3, #22
 8008cb4:	d4ee      	bmi.n	8008c94 <__smakebuf_r+0x18>
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	f043 0302 	orr.w	r3, r3, #2
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	e7e2      	b.n	8008c88 <__smakebuf_r+0xc>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	6020      	str	r0, [r4, #0]
 8008cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cd2:	b15b      	cbz	r3, 8008cec <__smakebuf_r+0x70>
 8008cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 f81d 	bl	8008d18 <_isatty_r>
 8008cde:	b128      	cbz	r0, 8008cec <__smakebuf_r+0x70>
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	f023 0303 	bic.w	r3, r3, #3
 8008ce6:	f043 0301 	orr.w	r3, r3, #1
 8008cea:	81a3      	strh	r3, [r4, #12]
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	431d      	orrs	r5, r3
 8008cf0:	81a5      	strh	r5, [r4, #12]
 8008cf2:	e7cf      	b.n	8008c94 <__smakebuf_r+0x18>

08008cf4 <_fstat_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4d07      	ldr	r5, [pc, #28]	@ (8008d14 <_fstat_r+0x20>)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	4608      	mov	r0, r1
 8008cfe:	4611      	mov	r1, r2
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	f7f9 f90d 	bl	8001f20 <_fstat>
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	d102      	bne.n	8008d10 <_fstat_r+0x1c>
 8008d0a:	682b      	ldr	r3, [r5, #0]
 8008d0c:	b103      	cbz	r3, 8008d10 <_fstat_r+0x1c>
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	bd38      	pop	{r3, r4, r5, pc}
 8008d12:	bf00      	nop
 8008d14:	20001490 	.word	0x20001490

08008d18 <_isatty_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d06      	ldr	r5, [pc, #24]	@ (8008d34 <_isatty_r+0x1c>)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	602b      	str	r3, [r5, #0]
 8008d24:	f7f9 f90c 	bl	8001f40 <_isatty>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_isatty_r+0x1a>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_isatty_r+0x1a>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	20001490 	.word	0x20001490

08008d38 <_sbrk_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	@ (8008d54 <_sbrk_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f9 f914 	bl	8001f70 <_sbrk>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_sbrk_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_sbrk_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20001490 	.word	0x20001490

08008d58 <memcpy>:
 8008d58:	440a      	add	r2, r1
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d60:	d100      	bne.n	8008d64 <memcpy+0xc>
 8008d62:	4770      	bx	lr
 8008d64:	b510      	push	{r4, lr}
 8008d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	d1f9      	bne.n	8008d66 <memcpy+0xe>
 8008d72:	bd10      	pop	{r4, pc}

08008d74 <__assert_func>:
 8008d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d76:	4614      	mov	r4, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <__assert_func+0x2c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4605      	mov	r5, r0
 8008d80:	68d8      	ldr	r0, [r3, #12]
 8008d82:	b954      	cbnz	r4, 8008d9a <__assert_func+0x26>
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <__assert_func+0x30>)
 8008d86:	461c      	mov	r4, r3
 8008d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d8c:	9100      	str	r1, [sp, #0]
 8008d8e:	462b      	mov	r3, r5
 8008d90:	4905      	ldr	r1, [pc, #20]	@ (8008da8 <__assert_func+0x34>)
 8008d92:	f000 f841 	bl	8008e18 <fiprintf>
 8008d96:	f000 f851 	bl	8008e3c <abort>
 8008d9a:	4b04      	ldr	r3, [pc, #16]	@ (8008dac <__assert_func+0x38>)
 8008d9c:	e7f4      	b.n	8008d88 <__assert_func+0x14>
 8008d9e:	bf00      	nop
 8008da0:	20000024 	.word	0x20000024
 8008da4:	0800a026 	.word	0x0800a026
 8008da8:	08009ff8 	.word	0x08009ff8
 8008dac:	08009feb 	.word	0x08009feb

08008db0 <_calloc_r>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	fba1 5402 	umull	r5, r4, r1, r2
 8008db6:	b93c      	cbnz	r4, 8008dc8 <_calloc_r+0x18>
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7ff f93d 	bl	8008038 <_malloc_r>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	b928      	cbnz	r0, 8008dce <_calloc_r+0x1e>
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	220c      	movs	r2, #12
 8008dca:	6002      	str	r2, [r0, #0]
 8008dcc:	e7f9      	b.n	8008dc2 <_calloc_r+0x12>
 8008dce:	462a      	mov	r2, r5
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f7fe f9ef 	bl	80071b4 <memset>
 8008dd6:	e7f5      	b.n	8008dc4 <_calloc_r+0x14>

08008dd8 <__ascii_mbtowc>:
 8008dd8:	b082      	sub	sp, #8
 8008dda:	b901      	cbnz	r1, 8008dde <__ascii_mbtowc+0x6>
 8008ddc:	a901      	add	r1, sp, #4
 8008dde:	b142      	cbz	r2, 8008df2 <__ascii_mbtowc+0x1a>
 8008de0:	b14b      	cbz	r3, 8008df6 <__ascii_mbtowc+0x1e>
 8008de2:	7813      	ldrb	r3, [r2, #0]
 8008de4:	600b      	str	r3, [r1, #0]
 8008de6:	7812      	ldrb	r2, [r2, #0]
 8008de8:	1e10      	subs	r0, r2, #0
 8008dea:	bf18      	it	ne
 8008dec:	2001      	movne	r0, #1
 8008dee:	b002      	add	sp, #8
 8008df0:	4770      	bx	lr
 8008df2:	4610      	mov	r0, r2
 8008df4:	e7fb      	b.n	8008dee <__ascii_mbtowc+0x16>
 8008df6:	f06f 0001 	mvn.w	r0, #1
 8008dfa:	e7f8      	b.n	8008dee <__ascii_mbtowc+0x16>

08008dfc <__ascii_wctomb>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	b141      	cbz	r1, 8008e14 <__ascii_wctomb+0x18>
 8008e02:	2aff      	cmp	r2, #255	@ 0xff
 8008e04:	d904      	bls.n	8008e10 <__ascii_wctomb+0x14>
 8008e06:	228a      	movs	r2, #138	@ 0x8a
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0e:	4770      	bx	lr
 8008e10:	700a      	strb	r2, [r1, #0]
 8008e12:	2001      	movs	r0, #1
 8008e14:	4770      	bx	lr
	...

08008e18 <fiprintf>:
 8008e18:	b40e      	push	{r1, r2, r3}
 8008e1a:	b503      	push	{r0, r1, lr}
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	4805      	ldr	r0, [pc, #20]	@ (8008e38 <fiprintf+0x20>)
 8008e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	f7ff fd3d 	bl	80088a8 <_vfiprintf_r>
 8008e2e:	b002      	add	sp, #8
 8008e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e34:	b003      	add	sp, #12
 8008e36:	4770      	bx	lr
 8008e38:	20000024 	.word	0x20000024

08008e3c <abort>:
 8008e3c:	b508      	push	{r3, lr}
 8008e3e:	2006      	movs	r0, #6
 8008e40:	f000 f82c 	bl	8008e9c <raise>
 8008e44:	2001      	movs	r0, #1
 8008e46:	f7f9 f81b 	bl	8001e80 <_exit>

08008e4a <_raise_r>:
 8008e4a:	291f      	cmp	r1, #31
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4605      	mov	r5, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	d904      	bls.n	8008e5e <_raise_r+0x14>
 8008e54:	2316      	movs	r3, #22
 8008e56:	6003      	str	r3, [r0, #0]
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	bd38      	pop	{r3, r4, r5, pc}
 8008e5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e60:	b112      	cbz	r2, 8008e68 <_raise_r+0x1e>
 8008e62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e66:	b94b      	cbnz	r3, 8008e7c <_raise_r+0x32>
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f831 	bl	8008ed0 <_getpid_r>
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4601      	mov	r1, r0
 8008e72:	4628      	mov	r0, r5
 8008e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e78:	f000 b818 	b.w	8008eac <_kill_r>
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d00a      	beq.n	8008e96 <_raise_r+0x4c>
 8008e80:	1c59      	adds	r1, r3, #1
 8008e82:	d103      	bne.n	8008e8c <_raise_r+0x42>
 8008e84:	2316      	movs	r3, #22
 8008e86:	6003      	str	r3, [r0, #0]
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e7e7      	b.n	8008e5c <_raise_r+0x12>
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e92:	4620      	mov	r0, r4
 8008e94:	4798      	blx	r3
 8008e96:	2000      	movs	r0, #0
 8008e98:	e7e0      	b.n	8008e5c <_raise_r+0x12>
	...

08008e9c <raise>:
 8008e9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ea8 <raise+0xc>)
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	f7ff bfd2 	b.w	8008e4a <_raise_r>
 8008ea6:	bf00      	nop
 8008ea8:	20000024 	.word	0x20000024

08008eac <_kill_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d07      	ldr	r5, [pc, #28]	@ (8008ecc <_kill_r+0x20>)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	602b      	str	r3, [r5, #0]
 8008eba:	f7f8 ffd1 	bl	8001e60 <_kill>
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	d102      	bne.n	8008ec8 <_kill_r+0x1c>
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	b103      	cbz	r3, 8008ec8 <_kill_r+0x1c>
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	bd38      	pop	{r3, r4, r5, pc}
 8008eca:	bf00      	nop
 8008ecc:	20001490 	.word	0x20001490

08008ed0 <_getpid_r>:
 8008ed0:	f7f8 bfbe 	b.w	8001e50 <_getpid>

08008ed4 <sqrtf>:
 8008ed4:	b508      	push	{r3, lr}
 8008ed6:	ed2d 8b02 	vpush	{d8}
 8008eda:	eeb0 8a40 	vmov.f32	s16, s0
 8008ede:	f000 f817 	bl	8008f10 <__ieee754_sqrtf>
 8008ee2:	eeb4 8a48 	vcmp.f32	s16, s16
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	d60c      	bvs.n	8008f06 <sqrtf+0x32>
 8008eec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008f0c <sqrtf+0x38>
 8008ef0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef8:	d505      	bpl.n	8008f06 <sqrtf+0x32>
 8008efa:	f7fe f9ad 	bl	8007258 <__errno>
 8008efe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008f02:	2321      	movs	r3, #33	@ 0x21
 8008f04:	6003      	str	r3, [r0, #0]
 8008f06:	ecbd 8b02 	vpop	{d8}
 8008f0a:	bd08      	pop	{r3, pc}
 8008f0c:	00000000 	.word	0x00000000

08008f10 <__ieee754_sqrtf>:
 8008f10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008f14:	4770      	bx	lr
	...

08008f18 <_init>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

08008f24 <_fini>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr
