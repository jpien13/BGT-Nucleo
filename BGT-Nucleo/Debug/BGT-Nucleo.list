
BGT-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007ae0  08007ae0  00008ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb0  08007eb0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb0  08007eb0  00008eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb8  08007eb8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb8  08007eb8  00008eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ebc  08007ebc  00008ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007ec0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  08008094  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08008094  00009484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cd1  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fe  00000000  00000000  0001aed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0001d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5c  00000000  00000000  0001e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022026  00000000  00000000  0001f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bbb  00000000  00000000  00041272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdcd2  00000000  00000000  00054e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122aff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005878  00000000  00000000  00122b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001283bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ac4 	.word	0x08007ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007ac4 	.word	0x08007ac4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <bgt60ltr11_spi_read>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_read(uint8_t reg_addr, uint16_t *data) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[3];
    uint8_t rx_data[3] = {0, 0, 0};
 8000ea4:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <bgt60ltr11_spi_read+0x90>)
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	4611      	mov	r1, r2
 8000eae:	8019      	strh	r1, [r3, #0]
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	0c12      	lsrs	r2, r2, #16
 8000eb4:	701a      	strb	r2, [r3, #0]

    /* We send the register address from where we want to read
     * and then we read 2 bytes with dummy data
     */
    tx_data[0] = (uint8_t)((reg_addr << 1) & 0xFE); //  shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (0)
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0; 								// Dummy byte (ignored by radar)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	737b      	strb	r3, [r7, #13]
    tx_data[2] = 0; 								// Dummy byte (ignored by radar)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73bb      	strb	r3, [r7, #14]

    // CS low to start SPI transfer occurs here
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2110      	movs	r1, #16
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f001 f90c 	bl	80020f0 <HAL_GPIO_WritePin>
    if(HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, sizeof(tx_data), 100) != HAL_OK) {
 8000ed8:	f107 0208 	add.w	r2, r7, #8
 8000edc:	f107 010c 	add.w	r1, r7, #12
 8000ee0:	2364      	movs	r3, #100	@ 0x64
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <bgt60ltr11_spi_read+0x94>)
 8000ee8:	f002 fcd1 	bl	800388e <HAL_SPI_TransmitReceive>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <bgt60ltr11_spi_read+0x6a>
        HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efa:	f001 f8f9 	bl	80020f0 <HAL_GPIO_WritePin>
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <bgt60ltr11_spi_read+0x88>
    }
    // CS high to end
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2110      	movs	r1, #16
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0a:	f001 f8f1 	bl	80020f0 <HAL_GPIO_WritePin>

    // After transmission, the 16-bit register value is reconstructed from the received bytes:
    *data = ((uint16_t)(rx_data[1] << 8) | (uint16_t)(rx_data[2]));
 8000f0e:	7a7b      	ldrb	r3, [r7, #9]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	7aba      	ldrb	r2, [r7, #10]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08007ae0 	.word	0x08007ae0
 8000f2c:	200001f0 	.word	0x200001f0

08000f30 <bgt60ltr11_spi_write>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_write(uint8_t reg_addr, uint16_t data){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_data[3];
	uint16_t wrdata = data;
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	81fb      	strh	r3, [r7, #14]

	tx_data[0] = (uint8_t)((reg_addr << 1) | 0x01); // Shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (1)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (uint8_t)((wrdata >> 8) & 0xFF);   // Upper 8 bits of data (MSB first)
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (uint8_t)(wrdata & 0xFF);			// Lower 8 bits of data
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	72bb      	strb	r3, [r7, #10]

    // CS low to start SPI transfer occurs here
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2110      	movs	r1, #16
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f001 f8c0 	bl	80020f0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, tx_data, sizeof(tx_data)/sizeof(uint8_t), 100) != HAL_OK) {
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	2364      	movs	r3, #100	@ 0x64
 8000f76:	2203      	movs	r2, #3
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <bgt60ltr11_spi_write+0x7c>)
 8000f7a:	f002 fb12 	bl	80035a2 <HAL_SPI_Transmit>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <bgt60ltr11_spi_write+0x64>
		HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8c:	f001 f8b0 	bl	80020f0 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e006      	b.n	8000fa2 <bgt60ltr11_spi_write+0x72>
	}
	// CS high to end
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9c:	f001 f8a8 	bl	80020f0 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f0 	.word	0x200001f0

08000fb0 <bgt60ltr11_HW_reset>:

uint8_t bgt60ltr11_HW_reset(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbc:	f001 f898 	bl	80020f0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f000 fdf5 	bl	8001bb0 <HAL_Delay>
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f001 f88f 	bl	80020f0 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <bgt60ltr11_soft_reset>:
 *  Resampling can be triggered by setting the reset pin or activating the soft reset by writing the soft_reset
 *  bit (Reg15[15]).
 *  There are 56 Registers according to register overview on page 21
 *  Page 6 https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 */
uint8_t bgt60ltr11_soft_reset(uint8_t wait){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	bgt60ltr11_spi_write(0x0F, (1 << 15));
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f7ff ffa2 	bl	8000f30 <bgt60ltr11_spi_write>
	uint16_t reg56 = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	81fb      	strh	r3, [r7, #14]
	uint16_t reg0 = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	81bb      	strh	r3, [r7, #12]

	if (wait){
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d027      	beq.n	800104a <bgt60ltr11_soft_reset+0x72>
		// wait till init_done in REG56 is set
		for (volatile uint16_t i = 0; i < 2048; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	817b      	strh	r3, [r7, #10]
 8000ffe:	e01d      	b.n	800103c <bgt60ltr11_soft_reset+0x64>
			bgt60ltr11_spi_read(0x38, &reg56);
 8001000:	f107 030e 	add.w	r3, r7, #14
 8001004:	4619      	mov	r1, r3
 8001006:	2038      	movs	r0, #56	@ 0x38
 8001008:	f7ff ff46 	bl	8000e98 <bgt60ltr11_spi_read>
			bgt60ltr11_spi_read(0x00, &reg0);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ff40 	bl	8000e98 <bgt60ltr11_spi_read>
			// check if REG0 has default values and REG56 bit init_done is set
			if (reg0 == 0 && reg56 & (1 << 13)){
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <bgt60ltr11_soft_reset+0x54>
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <bgt60ltr11_soft_reset+0x54>
				return HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	e00f      	b.n	800104c <bgt60ltr11_soft_reset+0x74>
			}
			HAL_Delay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f000 fdbf 	bl	8001bb0 <HAL_Delay>
		for (volatile uint16_t i = 0; i < 2048; i++){
 8001032:	897b      	ldrh	r3, [r7, #10]
 8001034:	b29b      	uxth	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	817b      	strh	r3, [r7, #10]
 800103c:	897b      	ldrh	r3, [r7, #10]
 800103e:	b29b      	uxth	r3, r3
 8001040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001044:	d3dc      	bcc.n	8001000 <bgt60ltr11_soft_reset+0x28>
		}
		return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <bgt60ltr11_soft_reset+0x74>
	}
	return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <bgt60ltr11_test>:
}

/*
 * Test if SPI works by reading reg 0x02 and verify value is 0x2A00
 */
uint8_t bgt60ltr11_test(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	80fb      	strh	r3, [r7, #6]
	if (bgt60ltr11_spi_read(0x02, &data) != HAL_OK){
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	4619      	mov	r1, r3
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff ff18 	bl	8000e98 <bgt60ltr11_spi_read>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <bgt60ltr11_test+0x1e>
		return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00d      	b.n	800108e <bgt60ltr11_test+0x3a>
	}
	HAL_Delay(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fd9c 	bl	8001bb0 <HAL_Delay>
	if (data != 0x2A00){
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	f5b3 5f28 	cmp.w	r3, #10752	@ 0x2a00
 800107e:	d005      	beq.n	800108c <bgt60ltr11_test+0x38>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001080:	2108      	movs	r1, #8
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <bgt60ltr11_test+0x44>)
 8001084:	f001 f84c 	bl	8002120 <HAL_GPIO_TogglePin>
		return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <bgt60ltr11_test+0x3a>
	}
	return HAL_OK;
 800108c:	2300      	movs	r3, #0

}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	48000400 	.word	0x48000400

0800109c <bgt60ltr11_get_RAW_data>:

/*
 * Read ADC channel data directly into the provided pointers
 */
uint8_t bgt60ltr11_get_RAW_data(uint16_t *ifi, uint16_t *ifq){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	if (bgt60ltr11_spi_read(0x28, ifi) != HAL_OK) return HAL_ERROR;
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	2028      	movs	r0, #40	@ 0x28
 80010aa:	f7ff fef5 	bl	8000e98 <bgt60ltr11_spi_read>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <bgt60ltr11_get_RAW_data+0x1c>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e009      	b.n	80010cc <bgt60ltr11_get_RAW_data+0x30>
	if (bgt60ltr11_spi_read(0x29, ifq) != HAL_OK) return HAL_ERROR;
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	2029      	movs	r0, #41	@ 0x29
 80010bc:	f7ff feec 	bl	8000e98 <bgt60ltr11_spi_read>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <bgt60ltr11_get_RAW_data+0x2e>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <bgt60ltr11_get_RAW_data+0x30>
	return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <bgt60ltr11_pulsed_mode_init>:

uint8_t bgt60ltr11_pulsed_mode_init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	// Perform soft reset
	if (bgt60ltr11_soft_reset(0) != HAL_OK) return HAL_ERROR;
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff7d 	bl	8000fd8 <bgt60ltr11_soft_reset>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <bgt60ltr11_pulsed_mode_init+0x14>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0e1      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fd61 	bl	8001bb0 <HAL_Delay>

	// Write to each register and check the result

	if (bgt60ltr11_spi_write(0x00, 0x0000) != HAL_OK) return HAL_ERROR;
 80010ee:	2100      	movs	r1, #0
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff1d 	bl	8000f30 <bgt60ltr11_spi_write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <bgt60ltr11_pulsed_mode_init+0x2c>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0d5      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f000 fd55 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x01, 0x0000) != HAL_OK) return HAL_ERROR;
 8001106:	2100      	movs	r1, #0
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff ff11 	bl	8000f30 <bgt60ltr11_spi_write>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <bgt60ltr11_pulsed_mode_init+0x44>
 8001114:	2301      	movs	r3, #1
 8001116:	e0c9      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f000 fd49 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x02, 0x2A00) != HAL_OK) return HAL_ERROR;
 800111e:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff ff04 	bl	8000f30 <bgt60ltr11_spi_write>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <bgt60ltr11_pulsed_mode_init+0x5e>
 800112e:	2301      	movs	r3, #1
 8001130:	e0bc      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 fd3c 	bl	8001bb0 <HAL_Delay>

	// TODO need to check the value for the REG3

	if (bgt60ltr11_spi_write(0x04, 0x0F3A) != HAL_OK) return HAL_ERROR;
 8001138:	f640 713a 	movw	r1, #3898	@ 0xf3a
 800113c:	2004      	movs	r0, #4
 800113e:	f7ff fef7 	bl	8000f30 <bgt60ltr11_spi_write>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <bgt60ltr11_pulsed_mode_init+0x78>
 8001148:	2301      	movs	r3, #1
 800114a:	e0af      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 fd2f 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x05, 0x0FB0) != HAL_OK) return HAL_ERROR;
 8001152:	f44f 617b 	mov.w	r1, #4016	@ 0xfb0
 8001156:	2005      	movs	r0, #5
 8001158:	f7ff feea 	bl	8000f30 <bgt60ltr11_spi_write>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <bgt60ltr11_pulsed_mode_init+0x92>
 8001162:	2301      	movs	r3, #1
 8001164:	e0a2      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fd22 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x06, 0x6800) != HAL_OK) return HAL_ERROR;
 800116c:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 8001170:	2006      	movs	r0, #6
 8001172:	f7ff fedd 	bl	8000f30 <bgt60ltr11_spi_write>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <bgt60ltr11_pulsed_mode_init+0xac>
 800117c:	2301      	movs	r3, #1
 800117e:	e095      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fd15 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x07, 0x0557) != HAL_OK) return HAL_ERROR;
 8001186:	f240 5157 	movw	r1, #1367	@ 0x557
 800118a:	2007      	movs	r0, #7
 800118c:	f7ff fed0 	bl	8000f30 <bgt60ltr11_spi_write>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <bgt60ltr11_pulsed_mode_init+0xc6>
 8001196:	2301      	movs	r3, #1
 8001198:	e088      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 fd08 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x08, 0x000E) != HAL_OK) return HAL_ERROR;
 80011a0:	210e      	movs	r1, #14
 80011a2:	2008      	movs	r0, #8
 80011a4:	f7ff fec4 	bl	8000f30 <bgt60ltr11_spi_write>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <bgt60ltr11_pulsed_mode_init+0xde>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07c      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 fcfc 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x09, 0x00E8) != HAL_OK) return HAL_ERROR;
 80011b8:	21e8      	movs	r1, #232	@ 0xe8
 80011ba:	2009      	movs	r0, #9
 80011bc:	f7ff feb8 	bl	8000f30 <bgt60ltr11_spi_write>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <bgt60ltr11_pulsed_mode_init+0xf6>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e070      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fcf0 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0A, 0x004F) != HAL_OK) return HAL_ERROR;
 80011d0:	214f      	movs	r1, #79	@ 0x4f
 80011d2:	200a      	movs	r0, #10
 80011d4:	f7ff feac 	bl	8000f30 <bgt60ltr11_spi_write>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <bgt60ltr11_pulsed_mode_init+0x10e>
 80011de:	2301      	movs	r3, #1
 80011e0:	e064      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 fce4 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0C, 0x0000) != HAL_OK) return HAL_ERROR;
 80011e8:	2100      	movs	r1, #0
 80011ea:	200c      	movs	r0, #12
 80011ec:	f7ff fea0 	bl	8000f30 <bgt60ltr11_spi_write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <bgt60ltr11_pulsed_mode_init+0x126>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e058      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 fcd8 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0D, 0x0000) != HAL_OK) return HAL_ERROR;
 8001200:	2100      	movs	r1, #0
 8001202:	200d      	movs	r0, #13
 8001204:	f7ff fe94 	bl	8000f30 <bgt60ltr11_spi_write>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <bgt60ltr11_pulsed_mode_init+0x13e>
 800120e:	2301      	movs	r3, #1
 8001210:	e04c      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f000 fccc 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0E, 0x0000) != HAL_OK) return HAL_ERROR;
 8001218:	2100      	movs	r1, #0
 800121a:	200e      	movs	r0, #14
 800121c:	f7ff fe88 	bl	8000f30 <bgt60ltr11_spi_write>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <bgt60ltr11_pulsed_mode_init+0x156>
 8001226:	2301      	movs	r3, #1
 8001228:	e040      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f000 fcc0 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0F, 0x0000) != HAL_OK) return HAL_ERROR;
 8001230:	2100      	movs	r1, #0
 8001232:	200f      	movs	r0, #15
 8001234:	f7ff fe7c 	bl	8000f30 <bgt60ltr11_spi_write>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <bgt60ltr11_pulsed_mode_init+0x16e>
 800123e:	2301      	movs	r3, #1
 8001240:	e034      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f000 fcb4 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x22, 0x0000) != HAL_OK) return HAL_ERROR;
 8001248:	2100      	movs	r1, #0
 800124a:	2022      	movs	r0, #34	@ 0x22
 800124c:	f7ff fe70 	bl	8000f30 <bgt60ltr11_spi_write>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <bgt60ltr11_pulsed_mode_init+0x186>
 8001256:	2301      	movs	r3, #1
 8001258:	e028      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 fca8 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x23, 0x0000) != HAL_OK) return HAL_ERROR;
 8001260:	2100      	movs	r1, #0
 8001262:	2023      	movs	r0, #35	@ 0x23
 8001264:	f7ff fe64 	bl	8000f30 <bgt60ltr11_spi_write>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <bgt60ltr11_pulsed_mode_init+0x19e>
 800126e:	2301      	movs	r3, #1
 8001270:	e01c      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f000 fc9c 	bl	8001bb0 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x24, 0x0000) != HAL_OK) return HAL_ERROR;
 8001278:	2100      	movs	r1, #0
 800127a:	2024      	movs	r0, #36	@ 0x24
 800127c:	f7ff fe58 	bl	8000f30 <bgt60ltr11_spi_write>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <bgt60ltr11_pulsed_mode_init+0x1b6>
 8001286:	2301      	movs	r3, #1
 8001288:	e010      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f000 fc90 	bl	8001bb0 <HAL_Delay>
	/*
	// ADC clock EN, bandgap EN, ADC EN
	if (bgt60ltr11_spi_write(0x22, 0x0007) != HAL_OK) return HAL_ERROR;
	HAL_Delay(1);
	*/
	if (bgt60ltr11_spi_write(0x0F, 0x4000) != HAL_OK) return HAL_ERROR;
 8001290:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001294:	200f      	movs	r0, #15
 8001296:	f7ff fe4b 	bl	8000f30 <bgt60ltr11_spi_write>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <bgt60ltr11_pulsed_mode_init+0x1d0>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e003      	b.n	80012ac <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fc83 	bl	8001bb0 <HAL_Delay>

	return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012b8:	1d39      	adds	r1, r7, #4
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	2201      	movs	r2, #1
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <__io_putchar+0x20>)
 80012c2:	f003 fa9d 	bl	8004800 <HAL_UART_Transmit>
  return ch;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002a0 	.word	0x200002a0

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f000 fbf5 	bl	8001ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f84e 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f000 f95a 	bl	8001598 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012e4:	f000 f89c 	bl	8001420 <MX_SPI1_Init>
  MX_TIM2_Init();
 80012e8:	f000 f8d8 	bl	800149c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80012ec:	f000 f924 	bl	8001538 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f8:	f000 fefa 	bl	80020f0 <HAL_GPIO_WritePin>
  bgt60ltr11_HW_reset();
 80012fc:	f7ff fe58 	bl	8000fb0 <bgt60ltr11_HW_reset>
  HAL_Delay(100);  // Wait for radar to stabilize
 8001300:	2064      	movs	r0, #100	@ 0x64
 8001302:	f000 fc55 	bl	8001bb0 <HAL_Delay>
  if (bgt60ltr11_pulsed_mode_init() != HAL_OK) {
 8001306:	f7ff fee5 	bl	80010d4 <bgt60ltr11_pulsed_mode_init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <main+0x40>
	  // Failed to initialize - LED should blink in error handler
	  Error_Handler();
 8001310:	f000 f996 	bl	8001640 <Error_Handler>
  }
  HAL_Delay(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001318:	f000 fc4a 	bl	8001bb0 <HAL_Delay>

  // Test SPI communication
  if (bgt60ltr11_test() != HAL_OK) {
 800131c:	f7ff fe9a 	bl	8001054 <bgt60ltr11_test>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <main+0x56>
	  // SPI test failed
	  Error_Handler();
 8001326:	f000 f98b 	bl	8001640 <Error_Handler>
  }
  // radar successfully initialized
  radar_initialized = 1;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <main+0x94>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (radar_initialized){
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <main+0x94>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <main+0x8c>
		  if(bgt60ltr11_get_RAW_data(&IFI, &IFQ) == HAL_OK){
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <main+0x98>)
 800133a:	480d      	ldr	r0, [pc, #52]	@ (8001370 <main+0x9c>)
 800133c:	f7ff feae 	bl	800109c <bgt60ltr11_get_RAW_data>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <main+0x8c>
			  printf("IFI: %u, IFQ: %u\r\n", IFI, IFQ);
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <main+0x9c>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <main+0x98>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4808      	ldr	r0, [pc, #32]	@ (8001374 <main+0xa0>)
 8001354:	f004 fc3e 	bl	8005bd4 <iprintf>
			  // Toggle LED to indicate successful reading
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001358:	2108      	movs	r1, #8
 800135a:	4807      	ldr	r0, [pc, #28]	@ (8001378 <main+0xa4>)
 800135c:	f000 fee0 	bl	8002120 <HAL_GPIO_TogglePin>
		  }
	  }
	  HAL_Delay(100); // small delay between readings
 8001360:	2064      	movs	r0, #100	@ 0x64
 8001362:	f000 fc25 	bl	8001bb0 <HAL_Delay>
	  if (radar_initialized){
 8001366:	e7e3      	b.n	8001330 <main+0x5c>
 8001368:	2000032c 	.word	0x2000032c
 800136c:	2000032a 	.word	0x2000032a
 8001370:	20000328 	.word	0x20000328
 8001374:	08007ae4 	.word	0x08007ae4
 8001378:	48000400 	.word	0x48000400

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	@ 0x58
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2244      	movs	r2, #68	@ 0x44
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fc77 	bl	8005c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800139e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013a2:	f000 fee5 	bl	8002170 <HAL_PWREx_ControlVoltageScaling>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013ac:	f000 f948 	bl	8001640 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ba:	2310      	movs	r3, #16
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c2:	2302      	movs	r3, #2
 80013c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013ca:	230a      	movs	r3, #10
 80013cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ce:	2307      	movs	r3, #7
 80013d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 ff1c 	bl	800221c <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013ea:	f000 f929 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2303      	movs	r3, #3
 80013f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	2104      	movs	r1, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fb1c 	bl	8002a44 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001412:	f000 f915 	bl	8001640 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3758      	adds	r7, #88	@ 0x58
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <MX_SPI1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_SPI1_Init+0x74>)
 800142c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <MX_SPI1_Init+0x74>)
 800143a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800143e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_SPI1_Init+0x74>)
 800144e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001452:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001456:	2208      	movs	r2, #8
 8001458:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_SPI1_Init+0x74>)
 800146e:	2207      	movs	r2, #7
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_SPI1_Init+0x74>)
 800147a:	2208      	movs	r2, #8
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001480:	f001 ffec 	bl	800345c <HAL_SPI_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f8d9 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f0 	.word	0x200001f0
 8001498:	40013000 	.word	0x40013000

0800149c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <MX_TIM2_Init+0x98>)
 80014bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_TIM2_Init+0x98>)
 80014c4:	224f      	movs	r2, #79	@ 0x4f
 80014c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_TIM2_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <MX_TIM2_Init+0x98>)
 80014d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <MX_TIM2_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <MX_TIM2_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e2:	4814      	ldr	r0, [pc, #80]	@ (8001534 <MX_TIM2_Init+0x98>)
 80014e4:	f002 fd56 	bl	8003f94 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ee:	f000 f8a7 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	480d      	ldr	r0, [pc, #52]	@ (8001534 <MX_TIM2_Init+0x98>)
 8001500:	f002 fea6 	bl	8004250 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800150a:	f000 f899 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <MX_TIM2_Init+0x98>)
 800151c:	f003 f89e 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001526:	f000 f88b 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000254 	.word	0x20000254

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 800153e:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <MX_USART2_UART_Init+0x5c>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USART2_UART_Init+0x58>)
 800157c:	f003 f8f2 	bl	8004764 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001586:	f000 f85b 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002a0 	.word	0x200002a0
 8001594:	40004400 	.word	0x40004400

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <MX_GPIO_Init+0xa0>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <MX_GPIO_Init+0xa0>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_GPIO_Init+0xa0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_GPIO_Init+0xa0>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <MX_GPIO_Init+0xa0>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_GPIO_Init+0xa0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2110      	movs	r1, #16
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e6:	f000 fd83 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2108      	movs	r1, #8
 80015ee:	4813      	ldr	r0, [pc, #76]	@ (800163c <MX_GPIO_Init+0xa4>)
 80015f0:	f000 fd7e 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f4:	2310      	movs	r3, #16
 80015f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160e:	f000 fc05 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001612:	2308      	movs	r3, #8
 8001614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	4804      	ldr	r0, [pc, #16]	@ (800163c <MX_GPIO_Init+0xa4>)
 800162a:	f000 fbf7 	bl	8001e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001648:	2108      	movs	r1, #8
 800164a:	480f      	ldr	r0, [pc, #60]	@ (8001688 <Error_Handler+0x48>)
 800164c:	f000 fd68 	bl	8002120 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001650:	2032      	movs	r0, #50	@ 0x32
 8001652:	f000 faad 	bl	8001bb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001656:	2108      	movs	r1, #8
 8001658:	480b      	ldr	r0, [pc, #44]	@ (8001688 <Error_Handler+0x48>)
 800165a:	f000 fd61 	bl	8002120 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800165e:	2032      	movs	r0, #50	@ 0x32
 8001660:	f000 faa6 	bl	8001bb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001664:	2108      	movs	r1, #8
 8001666:	4808      	ldr	r0, [pc, #32]	@ (8001688 <Error_Handler+0x48>)
 8001668:	f000 fd5a 	bl	8002120 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800166c:	2032      	movs	r0, #50	@ 0x32
 800166e:	f000 fa9f 	bl	8001bb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001672:	2108      	movs	r1, #8
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <Error_Handler+0x48>)
 8001676:	f000 fd53 	bl	8002120 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);  // Longer pause between double-blinks
 800167a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800167e:	f000 fa97 	bl	8001bb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001682:	bf00      	nop
 8001684:	e7e0      	b.n	8001648 <Error_Handler+0x8>
 8001686:	bf00      	nop
 8001688:	48000400 	.word	0x48000400

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <HAL_MspInit+0x44>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <HAL_MspInit+0x44>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6613      	str	r3, [r2, #96]	@ 0x60
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <HAL_MspInit+0x44>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <HAL_MspInit+0x44>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_SPI_MspInit+0x7c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d128      	bne.n	8001748 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_SPI_MspInit+0x80>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fa:	4a16      	ldr	r2, [pc, #88]	@ (8001754 <HAL_SPI_MspInit+0x80>)
 80016fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001700:	6613      	str	r3, [r2, #96]	@ 0x60
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_SPI_MspInit+0x80>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_SPI_MspInit+0x80>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_SPI_MspInit+0x80>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_SPI_MspInit+0x80>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23c2      	movs	r3, #194	@ 0xc2
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001736:	2305      	movs	r3, #5
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001744:	f000 fb6a 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013000 	.word	0x40013000
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001768:	d113      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_TIM_Base_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <HAL_TIM_Base_MspInit+0x44>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <HAL_TIM_Base_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201c      	movs	r0, #28
 8001788:	f000 fb11 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800178c:	201c      	movs	r0, #28
 800178e:	f000 fb2a 	bl	8001de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09e      	sub	sp, #120	@ 0x78
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2254      	movs	r2, #84	@ 0x54
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fa5c 	bl	8005c7e <memset>
  if(huart->Instance==USART2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001848 <HAL_UART_MspInit+0xa8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d136      	bne.n	800183e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 fb55 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e8:	f7ff ff2a 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <HAL_UART_MspInit+0xac>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	4a16      	ldr	r2, [pc, #88]	@ (800184c <HAL_UART_MspInit+0xac>)
 80017f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_UART_MspInit+0xac>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_UART_MspInit+0xac>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001808:	4a10      	ldr	r2, [pc, #64]	@ (800184c <HAL_UART_MspInit+0xac>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_UART_MspInit+0xac>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800181c:	230c      	movs	r3, #12
 800181e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800182c:	2307      	movs	r3, #7
 800182e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183a:	f000 faef 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800183e:	bf00      	nop
 8001840:	3778      	adds	r7, #120	@ 0x78
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40004400 	.word	0x40004400
 800184c:	40021000 	.word	0x40021000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <MemManage_Handler+0x4>

08001868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 f963 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <TIM2_IRQHandler+0x10>)
 80018b6:	f002 fbc4 	bl	8004042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000254 	.word	0x20000254

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_kill>:

int _kill(int pid, int sig)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018de:	f004 fa21 	bl	8005d24 <__errno>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2216      	movs	r2, #22
 80018e6:	601a      	str	r2, [r3, #0]
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_exit>:

void _exit (int status)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffe7 	bl	80018d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001906:	bf00      	nop
 8001908:	e7fd      	b.n	8001906 <_exit+0x12>

0800190a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e00a      	b.n	8001932 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191c:	f3af 8000 	nop.w
 8001920:	4601      	mov	r1, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dbf0      	blt.n	800191c <_read+0x12>
  }

  return len;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e009      	b.n	800196a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	60ba      	str	r2, [r7, #8]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fca6 	bl	80012b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	dbf1      	blt.n	8001956 <_write+0x12>
  }
  return len;
 8001972:	687b      	ldr	r3, [r7, #4]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_close>:

int _close(int file)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a4:	605a      	str	r2, [r3, #4]
  return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_isatty>:

int _isatty(int file)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f004 f986 	bl	8005d24 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000c000 	.word	0x2000c000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	20000330 	.word	0x20000330
 8001a4c:	20000488 	.word	0x20000488

08001a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a78:	f7ff ffea 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	@ (8001ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <LoopForever+0xe>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	@ (8001ac0 <LoopForever+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f004 f945 	bl	8005d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa6:	f7ff fc15 	bl	80012d4 <main>

08001aaa <LoopForever>:

LoopForever:
    b LoopForever
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aac:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ab8:	08007ec0 	.word	0x08007ec0
  ldr r2, =_sbss
 8001abc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ac0:	20000484 	.word	0x20000484

08001ac4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_IRQHandler>

08001ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f961 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f80e 	bl	8001af8 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e001      	b.n	8001aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae8:	f7ff fdd0 	bl	800168c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aec:	79fb      	ldrb	r3, [r7, #7]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <HAL_InitTick+0x6c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <HAL_InitTick+0x70>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f96d 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d809      	bhi.n	8001b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f937 	bl	8001dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b40:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_InitTick+0x74>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e004      	b.n	8001b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e001      	b.n	8001b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000334 	.word	0x20000334

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000334 	.word	0x20000334

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	@ (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	@ (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e148      	b.n	80020be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 813a 	beq.w	80020b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x40>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0201 	and.w	r2, r3, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d017      	beq.n	8001efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d123      	bne.n	8001f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8094 	beq.w	80020b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	4b52      	ldr	r3, [pc, #328]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8001f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f94:	4a51      	ldr	r2, [pc, #324]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa8:	4a4d      	ldr	r2, [pc, #308]	@ (80020e0 <HAL_GPIO_Init+0x2c4>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_GPIO_Init+0x1d4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a43      	ldr	r2, [pc, #268]	@ (80020e4 <HAL_GPIO_Init+0x2c8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <HAL_GPIO_Init+0x1d0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a42      	ldr	r2, [pc, #264]	@ (80020e8 <HAL_GPIO_Init+0x2cc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_GPIO_Init+0x1cc>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e004      	b.n	8001ff2 <HAL_GPIO_Init+0x1d6>
 8001fe8:	2307      	movs	r3, #7
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x1d6>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_Init+0x1d6>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002002:	4937      	ldr	r1, [pc, #220]	@ (80020e0 <HAL_GPIO_Init+0x2c4>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002034:	4a2d      	ldr	r2, [pc, #180]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800203a:	4b2c      	ldr	r3, [pc, #176]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800205e:	4a23      	ldr	r2, [pc, #140]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002088:	4a18      	ldr	r2, [pc, #96]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800208e:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b2:	4a0e      	ldr	r2, [pc, #56]	@ (80020ec <HAL_GPIO_Init+0x2d0>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f aeaf 	bne.w	8001e2c <HAL_GPIO_Init+0x10>
  }
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	48000800 	.word	0x48000800
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800210c:	e002      	b.n	8002114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43d9      	mvns	r1, r3
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	400b      	ands	r3, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HAL_PWREx_GetVoltageRange+0x18>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800217e:	d130      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002180:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218c:	d038      	beq.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002196:	4a1e      	ldr	r2, [pc, #120]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002198:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2232      	movs	r2, #50	@ 0x32
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b4:	e002      	b.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c8:	d102      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f2      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021dc:	d110      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e00f      	b.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ee:	d007      	beq.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021f0:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021f8:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000
 8002214:	20000000 	.word	0x20000000
 8002218:	431bde83 	.word	0x431bde83

0800221c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f000 bc02 	b.w	8002a34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002230:	4b96      	ldr	r3, [pc, #600]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223a:	4b94      	ldr	r3, [pc, #592]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80e4 	beq.w	800241a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_RCC_OscConfig+0x4c>
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b0c      	cmp	r3, #12
 800225c:	f040 808b 	bne.w	8002376 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b01      	cmp	r3, #1
 8002264:	f040 8087 	bne.w	8002376 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002268:	4b88      	ldr	r3, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_OscConfig+0x64>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e3d9      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	4b81      	ldr	r3, [pc, #516]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <HAL_RCC_OscConfig+0x7e>
 8002290:	4b7e      	ldr	r3, [pc, #504]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002298:	e005      	b.n	80022a6 <HAL_RCC_OscConfig+0x8a>
 800229a:	4b7c      	ldr	r3, [pc, #496]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800229c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d223      	bcs.n	80022f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fd8c 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e3ba      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022be:	4b73      	ldr	r3, [pc, #460]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a72      	ldr	r2, [pc, #456]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	496d      	ldr	r1, [pc, #436]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022dc:	4b6b      	ldr	r3, [pc, #428]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4968      	ldr	r1, [pc, #416]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
 80022f0:	e025      	b.n	800233e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f2:	4b66      	ldr	r3, [pc, #408]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a65      	ldr	r2, [pc, #404]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4960      	ldr	r1, [pc, #384]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002310:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	495b      	ldr	r1, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fd4c 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e37a      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800233e:	f000 fc81 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b51      	ldr	r3, [pc, #324]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4950      	ldr	r1, [pc, #320]	@ (8002490 <HAL_RCC_OscConfig+0x274>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	4a4e      	ldr	r2, [pc, #312]	@ (8002494 <HAL_RCC_OscConfig+0x278>)
 800235c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fbc8 	bl	8001af8 <HAL_InitTick>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d052      	beq.n	8002418 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	e35e      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d032      	beq.n	80023e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800237e:	4b43      	ldr	r3, [pc, #268]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a42      	ldr	r2, [pc, #264]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800238a:	f7ff fc05 	bl	8001b98 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002392:	f7ff fc01 	bl	8001b98 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e347      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a4:	4b39      	ldr	r3, [pc, #228]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a35      	ldr	r2, [pc, #212]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b33      	ldr	r3, [pc, #204]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4930      	ldr	r1, [pc, #192]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ce:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	492b      	ldr	r1, [pc, #172]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
 80023e2:	e01a      	b.n	800241a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023e4:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a28      	ldr	r2, [pc, #160]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fbd2 	bl	8001b98 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f8:	f7ff fbce 	bl	8001b98 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e314      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1dc>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d073      	beq.n	800250e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d005      	beq.n	8002438 <HAL_RCC_OscConfig+0x21c>
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d10e      	bne.n	8002450 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b14      	ldr	r3, [pc, #80]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d063      	beq.n	800250c <HAL_RCC_OscConfig+0x2f0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d15f      	bne.n	800250c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e2f1      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x24c>
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e025      	b.n	80024b4 <HAL_RCC_OscConfig+0x298>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002470:	d114      	bne.n	800249c <HAL_RCC_OscConfig+0x280>
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a02      	ldr	r2, [pc, #8]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e013      	b.n	80024b4 <HAL_RCC_OscConfig+0x298>
 800248c:	40021000 	.word	0x40021000
 8002490:	08007af8 	.word	0x08007af8
 8002494:	20000000 	.word	0x20000000
 8002498:	20000004 	.word	0x20000004
 800249c:	4ba0      	ldr	r3, [pc, #640]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a9c      	ldr	r2, [pc, #624]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff fb6c 	bl	8001b98 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff fb68 	bl	8001b98 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e2ae      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	4b92      	ldr	r3, [pc, #584]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x2a8>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff fb58 	bl	8001b98 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff fb54 	bl	8001b98 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	@ 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e29a      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fe:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x2d0>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d060      	beq.n	80025dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x310>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d119      	bne.n	800255a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d116      	bne.n	800255a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252c:	4b7c      	ldr	r3, [pc, #496]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x328>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e277      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	4973      	ldr	r1, [pc, #460]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	e040      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d023      	beq.n	80025aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002562:	4b6f      	ldr	r3, [pc, #444]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6e      	ldr	r2, [pc, #440]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff fb13 	bl	8001b98 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff fb0f 	bl	8001b98 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e255      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	4b65      	ldr	r3, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b62      	ldr	r3, [pc, #392]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	495f      	ldr	r1, [pc, #380]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
 80025a8:	e018      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff faef 	bl	8001b98 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff faeb 	bl	8001b98 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e231      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d0:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03c      	beq.n	8002662 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff faca 	bl	8001b98 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fac6 	bl	8001b98 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e20c      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261a:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <HAL_RCC_OscConfig+0x3ec>
 8002628:	e01b      	b.n	8002662 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	4b3d      	ldr	r3, [pc, #244]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002630:	4a3b      	ldr	r2, [pc, #236]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7ff faad 	bl	8001b98 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff faa9 	bl	8001b98 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1ef      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002654:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ef      	bne.n	8002642 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80a6 	beq.w	80027bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002674:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	4a26      	ldr	r2, [pc, #152]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268a:	6593      	str	r3, [r2, #88]	@ 0x58
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269c:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d118      	bne.n	80026da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b4:	f7ff fa70 	bl	8001b98 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7ff fa6c 	bl	8001b98 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1b2      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4d8>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f2:	e029      	b.n	8002748 <HAL_RCC_OscConfig+0x52c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d115      	bne.n	8002728 <HAL_RCC_OscConfig+0x50c>
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002712:	4a03      	ldr	r2, [pc, #12]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x52c>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	4b9a      	ldr	r3, [pc, #616]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	4a99      	ldr	r2, [pc, #612]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002738:	4b96      	ldr	r3, [pc, #600]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	4a95      	ldr	r2, [pc, #596]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff fa22 	bl	8001b98 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7ff fa1e 	bl	8001b98 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e162      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276e:	4b89      	ldr	r3, [pc, #548]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ed      	beq.n	8002758 <HAL_RCC_OscConfig+0x53c>
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7ff fa0b 	bl	8001b98 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fa07 	bl	8001b98 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e14b      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	4b7d      	ldr	r3, [pc, #500]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ed      	bne.n	8002786 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b78      	ldr	r3, [pc, #480]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	4a77      	ldr	r2, [pc, #476]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03c      	beq.n	8002842 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01c      	beq.n	800280a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027d0:	4b70      	ldr	r3, [pc, #448]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80027d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027d6:	4a6f      	ldr	r2, [pc, #444]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7ff f9da 	bl	8001b98 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e8:	f7ff f9d6 	bl	8001b98 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e11c      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027fa:	4b66      	ldr	r3, [pc, #408]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80027fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x5cc>
 8002808:	e01b      	b.n	8002842 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800280a:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 800280c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002810:	4a60      	ldr	r2, [pc, #384]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7ff f9bd 	bl	8001b98 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002822:	f7ff f9b9 	bl	8001b98 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0ff      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002834:	4b57      	ldr	r3, [pc, #348]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80f3 	beq.w	8002a32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	2b02      	cmp	r3, #2
 8002852:	f040 80c9 	bne.w	80029e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002856:	4b4f      	ldr	r3, [pc, #316]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0203 	and.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	429a      	cmp	r2, r3
 8002868:	d12c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	3b01      	subs	r3, #1
 8002876:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d123      	bne.n	80028c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002886:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d11b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002896:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d113      	bne.n	80028c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d109      	bne.n	80028c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d06b      	beq.n	800299c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d062      	beq.n	8002990 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ca:	4b32      	ldr	r3, [pc, #200]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0ac      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028da:	4b2e      	ldr	r3, [pc, #184]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2d      	ldr	r2, [pc, #180]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 80028e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e6:	f7ff f957 	bl	8001b98 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff f953 	bl	8001b98 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e099      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	4b21      	ldr	r3, [pc, #132]	@ (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800291c:	3a01      	subs	r2, #1
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002926:	0212      	lsls	r2, r2, #8
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800292e:	0852      	lsrs	r2, r2, #1
 8002930:	3a01      	subs	r2, #1
 8002932:	0552      	lsls	r2, r2, #21
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0652      	lsls	r2, r2, #25
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002946:	06d2      	lsls	r2, r2, #27
 8002948:	430a      	orrs	r2, r1
 800294a:	4912      	ldr	r1, [pc, #72]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002950:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0f      	ldr	r2, [pc, #60]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295c:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a0c      	ldr	r2, [pc, #48]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002968:	f7ff f916 	bl	8001b98 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff f912 	bl	8001b98 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e058      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <HAL_RCC_OscConfig+0x778>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298e:	e050      	b.n	8002a32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e04f      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
 8002994:	40021000 	.word	0x40021000
 8002998:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299c:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d144      	bne.n	8002a32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a8:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a23      	ldr	r2, [pc, #140]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a20      	ldr	r2, [pc, #128]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029c0:	f7ff f8ea 	bl	8001b98 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7ff f8e6 	bl	8001b98 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e02c      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x7ac>
 80029e6:	e024      	b.n	8002a32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d01f      	beq.n	8002a2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 80029f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff f8cd 	bl	8001b98 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a02:	f7ff f8c9 	bl	8001b98 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e00f      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	4905      	ldr	r1, [pc, #20]	@ (8002a3c <HAL_RCC_OscConfig+0x820>)
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_OscConfig+0x824>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
 8002a2c:	e001      	b.n	8002a32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	feeefffc 	.word	0xfeeefffc

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0e7      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b75      	ldr	r3, [pc, #468]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b72      	ldr	r3, [pc, #456]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4970      	ldr	r1, [pc, #448]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b6e      	ldr	r3, [pc, #440]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0cf      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b66      	ldr	r3, [pc, #408]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d908      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa4:	4b63      	ldr	r3, [pc, #396]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4960      	ldr	r1, [pc, #384]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d04c      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b5a      	ldr	r3, [pc, #360]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0a6      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	4b54      	ldr	r3, [pc, #336]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e09a      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002afa:	4b4e      	ldr	r3, [pc, #312]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08e      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e086      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b46      	ldr	r3, [pc, #280]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4943      	ldr	r1, [pc, #268]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7ff f834 	bl	8001b98 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7ff f830 	bl	8001b98 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e06e      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d208      	bcs.n	8002b8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b2e      	ldr	r3, [pc, #184]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	492b      	ldr	r1, [pc, #172]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4b29      	ldr	r3, [pc, #164]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d210      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 0207 	bic.w	r2, r3, #7
 8002ba0:	4923      	ldr	r1, [pc, #140]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e036      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4918      	ldr	r1, [pc, #96]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be4:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4910      	ldr	r1, [pc, #64]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf8:	f000 f824 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	490b      	ldr	r1, [pc, #44]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	4a09      	ldr	r2, [pc, #36]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002c16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_ClockConfig+0x1fc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe ff6b 	bl	8001af8 <HAL_InitTick>
 8002c22:	4603      	mov	r3, r0
 8002c24:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c26:	7afb      	ldrb	r3, [r7, #11]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08007af8 	.word	0x08007af8
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c52:	4b3e      	ldr	r3, [pc, #248]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d121      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d11e      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c78:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c84:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e005      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c94:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d102      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cbc:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e004      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cc8:	4b23      	ldr	r3, [pc, #140]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d134      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0xa6>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cec:	617b      	str	r3, [r7, #20]
      break;
 8002cee:	e005      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf2:	617b      	str	r3, [r7, #20]
      break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	3301      	adds	r3, #1
 8002d08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	fb03 f202 	mul.w	r2, r3, r2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	0e5b      	lsrs	r3, r3, #25
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	@ 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08007b10 	.word	0x08007b10
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4904      	ldr	r1, [pc, #16]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08007b08 	.word	0x08007b08

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002da4:	f7ff ffda 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0adb      	lsrs	r3, r3, #11
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4904      	ldr	r1, [pc, #16]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08007b08 	.word	0x08007b08

08002dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002de4:	f7ff f9b6 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002de8:	6178      	str	r0, [r7, #20]
 8002dea:	e014      	b.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	4a24      	ldr	r2, [pc, #144]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df8:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e04:	f7ff f9a6 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e1c:	d10b      	bne.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	@ 0x80
 8002e22:	d919      	bls.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e28:	d902      	bls.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e013      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e010      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b80      	cmp	r3, #128	@ 0x80
 8002e3a:	d902      	bls.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e00a      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b80      	cmp	r3, #128	@ 0x80
 8002e46:	d102      	bne.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e48:	2302      	movs	r3, #2
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e004      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b70      	cmp	r3, #112	@ 0x70
 8002e52:	d101      	bne.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e54:	2301      	movs	r3, #1
 8002e56:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 0207 	bic.w	r2, r3, #7
 8002e60:	4909      	ldr	r1, [pc, #36]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e68:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40022000 	.word	0x40022000

08002e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e94:	2300      	movs	r3, #0
 8002e96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d031      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002eb0:	d01a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002eb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002eb6:	d814      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ebc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a5c      	ldr	r2, [pc, #368]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ecc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ece:	e00c      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f9ce 	bl	8003278 <RCCEx_PLLSAI1_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee0:	e003      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ef0:	4b51      	ldr	r3, [pc, #324]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efe:	494e      	ldr	r1, [pc, #312]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f06:	e001      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 809e 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f1e:	4b46      	ldr	r3, [pc, #280]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	4b40      	ldr	r3, [pc, #256]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	4a3f      	ldr	r2, [pc, #252]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f40:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f50:	4b3a      	ldr	r3, [pc, #232]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a39      	ldr	r2, [pc, #228]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fe1c 	bl	8001b98 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f62:	e009      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f64:	f7fe fe18 	bl	8001b98 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	74fb      	strb	r3, [r7, #19]
        break;
 8002f76:	e005      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f78:	4b30      	ldr	r3, [pc, #192]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ef      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d15a      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01e      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d019      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fd2:	4a19      	ldr	r2, [pc, #100]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d016      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fdd8 	bl	8001b98 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fea:	e00b      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe fdd4 	bl	8001b98 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d902      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	74fb      	strb	r3, [r7, #19]
            break;
 8003002:	e006      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003004:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ec      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003018:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003026:	4904      	ldr	r1, [pc, #16]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003044:	7c7b      	ldrb	r3, [r7, #17]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b8a      	ldr	r3, [pc, #552]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	4a89      	ldr	r2, [pc, #548]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003062:	4b84      	ldr	r3, [pc, #528]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003068:	f023 0203 	bic.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4980      	ldr	r1, [pc, #512]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003084:	4b7b      	ldr	r3, [pc, #492]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	f023 020c 	bic.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	4978      	ldr	r1, [pc, #480]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030a6:	4b73      	ldr	r3, [pc, #460]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	496f      	ldr	r1, [pc, #444]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d6:	4967      	ldr	r1, [pc, #412]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030ea:	4b62      	ldr	r3, [pc, #392]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	495e      	ldr	r1, [pc, #376]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800310c:	4b59      	ldr	r3, [pc, #356]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	4956      	ldr	r1, [pc, #344]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800312e:	4b51      	ldr	r3, [pc, #324]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003134:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	494d      	ldr	r1, [pc, #308]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d028      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003150:	4b48      	ldr	r3, [pc, #288]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	4945      	ldr	r1, [pc, #276]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800316e:	d106      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003170:	4b40      	ldr	r3, [pc, #256]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a3f      	ldr	r2, [pc, #252]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800317a:	60d3      	str	r3, [r2, #12]
 800317c:	e011      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003186:	d10c      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f872 	bl	8003278 <RCCEx_PLLSAI1_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ae:	4b31      	ldr	r3, [pc, #196]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	492d      	ldr	r1, [pc, #180]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031cc:	d106      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ce:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4a28      	ldr	r2, [pc, #160]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031d8:	60d3      	str	r3, [r2, #12]
 80031da:	e011      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f843 	bl	8003278 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01c      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003212:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321a:	4916      	ldr	r1, [pc, #88]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800322a:	d10c      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	2102      	movs	r1, #2
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f820 	bl	8003278 <RCCEx_PLLSAI1_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003252:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003258:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003260:	4904      	ldr	r1, [pc, #16]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003268:	7cbb      	ldrb	r3, [r7, #18]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000

08003278 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003286:	4b74      	ldr	r3, [pc, #464]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d018      	beq.n	80032c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003292:	4b71      	ldr	r3, [pc, #452]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0203 	and.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10d      	bne.n	80032be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
       ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
       ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d047      	beq.n	800334e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e044      	b.n	800334e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d018      	beq.n	80032fe <RCCEx_PLLSAI1_Config+0x86>
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d825      	bhi.n	800331c <RCCEx_PLLSAI1_Config+0xa4>
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d002      	beq.n	80032da <RCCEx_PLLSAI1_Config+0x62>
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d009      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0x74>
 80032d8:	e020      	b.n	800331c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032da:	4b5f      	ldr	r3, [pc, #380]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11d      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ea:	e01a      	b.n	8003322 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d116      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e013      	b.n	8003326 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032fe:	4b56      	ldr	r3, [pc, #344]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800330a:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800331a:	e006      	b.n	800332a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e004      	b.n	800332c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800332a:	bf00      	nop
    }

    if(status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003332:	4b49      	ldr	r3, [pc, #292]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6819      	ldr	r1, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	430b      	orrs	r3, r1
 8003348:	4943      	ldr	r1, [pc, #268]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d17c      	bne.n	800344e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003354:	4b40      	ldr	r3, [pc, #256]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3f      	ldr	r2, [pc, #252]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800335a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800335e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003360:	f7fe fc1a 	bl	8001b98 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003366:	e009      	b.n	800337c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003368:	f7fe fc16 	bl	8001b98 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	73fb      	strb	r3, [r7, #15]
        break;
 800337a:	e005      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800337c:	4b36      	ldr	r3, [pc, #216]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ef      	bne.n	8003368 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d15f      	bne.n	800344e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d110      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003394:	4b30      	ldr	r3, [pc, #192]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800339c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	0211      	lsls	r1, r2, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	06d2      	lsls	r2, r2, #27
 80033ac:	430a      	orrs	r2, r1
 80033ae:	492a      	ldr	r1, [pc, #168]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	610b      	str	r3, [r1, #16]
 80033b4:	e027      	b.n	8003406 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d112      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033bc:	4b26      	ldr	r3, [pc, #152]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	0211      	lsls	r1, r2, #8
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6912      	ldr	r2, [r2, #16]
 80033d2:	0852      	lsrs	r2, r2, #1
 80033d4:	3a01      	subs	r2, #1
 80033d6:	0552      	lsls	r2, r2, #21
 80033d8:	430a      	orrs	r2, r1
 80033da:	491f      	ldr	r1, [pc, #124]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	610b      	str	r3, [r1, #16]
 80033e0:	e011      	b.n	8003406 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6892      	ldr	r2, [r2, #8]
 80033f2:	0211      	lsls	r1, r2, #8
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6952      	ldr	r2, [r2, #20]
 80033f8:	0852      	lsrs	r2, r2, #1
 80033fa:	3a01      	subs	r2, #1
 80033fc:	0652      	lsls	r2, r2, #25
 80033fe:	430a      	orrs	r2, r1
 8003400:	4915      	ldr	r1, [pc, #84]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003406:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a13      	ldr	r2, [pc, #76]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003410:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7fe fbc1 	bl	8001b98 <HAL_GetTick>
 8003416:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003418:	e009      	b.n	800342e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800341a:	f7fe fbbd 	bl	8001b98 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d902      	bls.n	800342e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	73fb      	strb	r3, [r7, #15]
          break;
 800342c:	e005      	b.n	800343a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800342e:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ef      	beq.n	800341a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000

0800345c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e095      	b.n	800359a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800347e:	d009      	beq.n	8003494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
 8003486:	e005      	b.n	8003494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe f910 	bl	80016d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034d4:	d902      	bls.n	80034dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e002      	b.n	80034e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034ea:	d007      	beq.n	80034fc <HAL_SPI_Init+0xa0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	ea42 0103 	orr.w	r1, r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	f003 0204 	and.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003578:	ea42 0103 	orr.w	r1, r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b088      	sub	sp, #32
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b2:	f7fe faf1 	bl	8001b98 <HAL_GetTick>
 80035b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d001      	beq.n	80035cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	e15c      	b.n	8003886 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Transmit+0x36>
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e154      	b.n	8003886 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_SPI_Transmit+0x48>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e14d      	b.n	8003886 <HAL_SPI_Transmit+0x2e4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363c:	d10f      	bne.n	800365e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800365c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	2b40      	cmp	r3, #64	@ 0x40
 800366a:	d007      	beq.n	800367c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003684:	d952      	bls.n	800372c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_SPI_Transmit+0xf2>
 800368e:	8b7b      	ldrh	r3, [r7, #26]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d145      	bne.n	8003720 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b8:	e032      	b.n	8003720 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d112      	bne.n	80036ee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ec:	e018      	b.n	8003720 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ee:	f7fe fa53 	bl	8001b98 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d803      	bhi.n	8003706 <HAL_SPI_Transmit+0x164>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d102      	bne.n	800370c <HAL_SPI_Transmit+0x16a>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0b2      	b.n	8003886 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1c7      	bne.n	80036ba <HAL_SPI_Transmit+0x118>
 800372a:	e083      	b.n	8003834 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_Transmit+0x198>
 8003734:	8b7b      	ldrh	r3, [r7, #26]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d177      	bne.n	800382a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d912      	bls.n	800376a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b02      	subs	r3, #2
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003768:	e05f      	b.n	800382a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003790:	e04b      	b.n	800382a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d12b      	bne.n	80037f8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d912      	bls.n	80037d0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ba:	1c9a      	adds	r2, r3, #2
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b02      	subs	r3, #2
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037ce:	e02c      	b.n	800382a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037f6:	e018      	b.n	800382a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037f8:	f7fe f9ce 	bl	8001b98 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d803      	bhi.n	8003810 <HAL_SPI_Transmit+0x26e>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d102      	bne.n	8003816 <HAL_SPI_Transmit+0x274>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e02d      	b.n	8003886 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ae      	bne.n	8003792 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fb65 	bl	8003f08 <SPI_EndRxTxTransaction>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003884:	2300      	movs	r3, #0
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b08a      	sub	sp, #40	@ 0x28
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a0:	f7fe f97a 	bl	8001b98 <HAL_GetTick>
 80038a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038bc:	7ffb      	ldrb	r3, [r7, #31]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d00c      	beq.n	80038dc <HAL_SPI_TransmitReceive+0x4e>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c8:	d106      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x4a>
 80038d2:	7ffb      	ldrb	r3, [r7, #31]
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d001      	beq.n	80038dc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
 80038da:	e1f3      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_SPI_TransmitReceive+0x60>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_SPI_TransmitReceive+0x60>
 80038e8:	887b      	ldrh	r3, [r7, #2]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e1e8      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x72>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e1e1      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x436>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b04      	cmp	r3, #4
 8003912:	d003      	beq.n	800391c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2205      	movs	r2, #5
 8003918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800395e:	d802      	bhi.n	8003966 <HAL_SPI_TransmitReceive+0xd8>
 8003960:	8abb      	ldrh	r3, [r7, #20]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d908      	bls.n	8003978 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	e007      	b.n	8003988 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003986:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	2b40      	cmp	r3, #64	@ 0x40
 8003994:	d007      	beq.n	80039a6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039ae:	f240 8083 	bls.w	8003ab8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x132>
 80039ba:	8afb      	ldrh	r3, [r7, #22]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d16f      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	881a      	ldrh	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e4:	e05c      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d11b      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x19e>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0x19e>
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d113      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	1c9a      	adds	r2, r3, #2
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d11c      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x1e6>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	b292      	uxth	r2, r2
 8003a52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a70:	2301      	movs	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a74:	f7fe f890 	bl	8001b98 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d80d      	bhi.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d009      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e111      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d19d      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x158>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d197      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x158>
 8003ab6:	e0e5      	b.n	8003c84 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x23a>
 8003ac0:	8afb      	ldrh	r3, [r7, #22]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	f040 80d1 	bne.w	8003c6a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d912      	bls.n	8003af8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b02      	subs	r3, #2
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003af6:	e0b8      	b.n	8003c6a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	7812      	ldrb	r2, [r2, #0]
 8003b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1e:	e0a4      	b.n	8003c6a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d134      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x30a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02f      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x30a>
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d12c      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d912      	bls.n	8003b6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b02      	subs	r3, #2
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b6c:	e012      	b.n	8003b94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d148      	bne.n	8003c38 <HAL_SPI_TransmitReceive+0x3aa>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d042      	beq.n	8003c38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d923      	bls.n	8003c06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	1c9a      	adds	r2, r3, #2
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b02      	subs	r3, #2
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d81f      	bhi.n	8003c34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	e016      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f103 020c 	add.w	r2, r3, #12
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c34:	2301      	movs	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c38:	f7fd ffae 	bl	8001b98 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d803      	bhi.n	8003c50 <HAL_SPI_TransmitReceive+0x3c2>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d102      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x3c8>
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e02c      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f af55 	bne.w	8003b20 <HAL_SPI_TransmitReceive+0x292>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f47f af4e 	bne.w	8003b20 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c84:	6a3a      	ldr	r2, [r7, #32]
 8003c86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f93d 	bl	8003f08 <SPI_EndRxTxTransaction>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00e      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3728      	adds	r7, #40	@ 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cdc:	f7fd ff5c 	bl	8001b98 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cec:	f7fd ff54 	bl	8001b98 <HAL_GetTick>
 8003cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	@ (8003dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	015b      	lsls	r3, r3, #5
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	e054      	b.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d050      	beq.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0c:	f7fd ff44 	bl	8001b98 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d902      	bls.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d13d      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d3a:	d111      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d44:	d004      	beq.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4e:	d107      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d68:	d10f      	bne.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e017      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d19b      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dee:	f7fd fed3 	bl	8001b98 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003dfe:	f7fd fecb 	bl	8001b98 <HAL_GetTick>
 8003e02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00da      	lsls	r2, r3, #3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	0d1b      	lsrs	r3, r3, #20
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e24:	e060      	b.n	8003ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e2c:	d107      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d050      	beq.n	8003ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e46:	f7fd fea7 	bl	8001b98 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d902      	bls.n	8003e5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d13d      	bne.n	8003ed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e74:	d111      	bne.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e7e:	d004      	beq.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e88:	d107      	bne.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea2:	d10f      	bne.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ec2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e010      	b.n	8003efa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d196      	bne.n	8003e26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3728      	adds	r7, #40	@ 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000000 	.word	0x20000000

08003f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7ff ff5b 	bl	8003ddc <SPI_WaitFifoStateUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e027      	b.n	8003f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	2180      	movs	r1, #128	@ 0x80
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fec0 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e014      	b.n	8003f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff34 	bl	8003ddc <SPI_WaitFifoStateUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e000      	b.n	8003f8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e049      	b.n	800403a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fbcc 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fa38 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01b      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0202 	mvn.w	r2, #2
 8004076:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f9bc 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 8004092:	e005      	b.n	80040a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f9ae 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9bf 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01b      	beq.n	80040f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0204 	mvn.w	r2, #4
 80040c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f996 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 80040de:	e005      	b.n	80040ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f988 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f999 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d020      	beq.n	800413e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01b      	beq.n	800413e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f06f 0208 	mvn.w	r2, #8
 800410e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2204      	movs	r2, #4
 8004114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f970 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 800412a:	e005      	b.n	8004138 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f962 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f973 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01b      	beq.n	800418a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0210 	mvn.w	r2, #16
 800415a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2208      	movs	r2, #8
 8004160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f94a 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 8004176:	e005      	b.n	8004184 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f93c 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f94d 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00c      	beq.n	80041ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0201 	mvn.w	r2, #1
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f91a 	bl	80043e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fab0 	bl	800473c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 faa8 	bl	8004750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00c      	beq.n	8004224 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f907 	bl	8004432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00c      	beq.n	8004248 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0220 	mvn.w	r2, #32
 8004240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa70 	bl	8004728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIM_ConfigClockSource+0x1c>
 8004268:	2302      	movs	r3, #2
 800426a:	e0b6      	b.n	80043da <HAL_TIM_ConfigClockSource+0x18a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800428e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042a8:	d03e      	beq.n	8004328 <HAL_TIM_ConfigClockSource+0xd8>
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ae:	f200 8087 	bhi.w	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b6:	f000 8086 	beq.w	80043c6 <HAL_TIM_ConfigClockSource+0x176>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042be:	d87f      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042c0:	2b70      	cmp	r3, #112	@ 0x70
 80042c2:	d01a      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0xaa>
 80042c4:	2b70      	cmp	r3, #112	@ 0x70
 80042c6:	d87b      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042c8:	2b60      	cmp	r3, #96	@ 0x60
 80042ca:	d050      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x11e>
 80042cc:	2b60      	cmp	r3, #96	@ 0x60
 80042ce:	d877      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042d0:	2b50      	cmp	r3, #80	@ 0x50
 80042d2:	d03c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0xfe>
 80042d4:	2b50      	cmp	r3, #80	@ 0x50
 80042d6:	d873      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d058      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x13e>
 80042dc:	2b40      	cmp	r3, #64	@ 0x40
 80042de:	d86f      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042e0:	2b30      	cmp	r3, #48	@ 0x30
 80042e2:	d064      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042e4:	2b30      	cmp	r3, #48	@ 0x30
 80042e6:	d86b      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d060      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d867      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d05c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d05a      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042f8:	e062      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800430a:	f000 f987 	bl	800461c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800431c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	609a      	str	r2, [r3, #8]
      break;
 8004326:	e04f      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004338:	f000 f970 	bl	800461c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800434a:	609a      	str	r2, [r3, #8]
      break;
 800434c:	e03c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	461a      	mov	r2, r3
 800435c:	f000 f8e4 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2150      	movs	r1, #80	@ 0x50
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f93d 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 800436c:	e02c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800437a:	461a      	mov	r2, r3
 800437c:	f000 f903 	bl	8004586 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2160      	movs	r1, #96	@ 0x60
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f92d 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 800438c:	e01c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	461a      	mov	r2, r3
 800439c:	f000 f8c4 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2140      	movs	r1, #64	@ 0x40
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f91d 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e00c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f000 f914 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 80043be:	e003      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      break;
 80043c4:	e000      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a30      	ldr	r2, [pc, #192]	@ (800451c <TIM_Base_SetConfig+0xd4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_Base_SetConfig+0x20>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004466:	d108      	bne.n	800447a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a27      	ldr	r2, [pc, #156]	@ (800451c <TIM_Base_SetConfig+0xd4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_Base_SetConfig+0x52>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004488:	d007      	beq.n	800449a <TIM_Base_SetConfig+0x52>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a24      	ldr	r2, [pc, #144]	@ (8004520 <TIM_Base_SetConfig+0xd8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_Base_SetConfig+0x52>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <TIM_Base_SetConfig+0xdc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a12      	ldr	r2, [pc, #72]	@ (800451c <TIM_Base_SetConfig+0xd4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0xa0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a11      	ldr	r2, [pc, #68]	@ (8004520 <TIM_Base_SetConfig+0xd8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0xa0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a10      	ldr	r2, [pc, #64]	@ (8004524 <TIM_Base_SetConfig+0xdc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	611a      	str	r2, [r3, #16]
  }
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400

08004528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 030a 	bic.w	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 0210 	bic.w	r2, r3, #16
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	f043 0307 	orr.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e04f      	b.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a21      	ldr	r2, [pc, #132]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d108      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a14      	ldr	r2, [pc, #80]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d004      	beq.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a10      	ldr	r2, [pc, #64]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10c      	bne.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40014000 	.word	0x40014000

08004728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e040      	b.n	80047f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd f80a 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	@ 0x24
 8004790:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fade 	bl	8004d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8af 	bl	8004914 <UART_SetConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e01b      	b.n	80047f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fb5d 	bl	8004eb0 <UART_CheckIdleState>
 80047f6:	4603      	mov	r3, r0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004814:	2b20      	cmp	r3, #32
 8004816:	d177      	bne.n	8004908 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_UART_Transmit+0x24>
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e070      	b.n	800490a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2221      	movs	r2, #33	@ 0x21
 8004834:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004836:	f7fd f9af 	bl	8001b98 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88fa      	ldrh	r2, [r7, #6]
 8004840:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004854:	d108      	bne.n	8004868 <HAL_UART_Transmit+0x68>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e003      	b.n	8004870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004870:	e02f      	b.n	80048d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2180      	movs	r1, #128	@ 0x80
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fbbf 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e03b      	b.n	800490a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	881a      	ldrh	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a4:	b292      	uxth	r2, r2
 80048a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	3302      	adds	r3, #2
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e007      	b.n	80048c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3301      	adds	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1c9      	bne.n	8004872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2140      	movs	r1, #64	@ 0x40
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fb89 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e005      	b.n	800490a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004918:	b08a      	sub	sp, #40	@ 0x28
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	431a      	orrs	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	4313      	orrs	r3, r2
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4bb4      	ldr	r3, [pc, #720]	@ (8004c14 <UART_SetConfig+0x300>)
 8004944:	4013      	ands	r3, r2
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800494c:	430b      	orrs	r3, r1
 800494e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4aa9      	ldr	r2, [pc, #676]	@ (8004c18 <UART_SetConfig+0x304>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497c:	4313      	orrs	r3, r2
 800497e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4aa0      	ldr	r2, [pc, #640]	@ (8004c1c <UART_SetConfig+0x308>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d126      	bne.n	80049ec <UART_SetConfig+0xd8>
 800499e:	4ba0      	ldr	r3, [pc, #640]	@ (8004c20 <UART_SetConfig+0x30c>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d81b      	bhi.n	80049e4 <UART_SetConfig+0xd0>
 80049ac:	a201      	add	r2, pc, #4	@ (adr r2, 80049b4 <UART_SetConfig+0xa0>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049d5 	.word	0x080049d5
 80049bc:	080049cd 	.word	0x080049cd
 80049c0:	080049dd 	.word	0x080049dd
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ca:	e080      	b.n	8004ace <UART_SetConfig+0x1ba>
 80049cc:	2302      	movs	r3, #2
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d2:	e07c      	b.n	8004ace <UART_SetConfig+0x1ba>
 80049d4:	2304      	movs	r3, #4
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e078      	b.n	8004ace <UART_SetConfig+0x1ba>
 80049dc:	2308      	movs	r3, #8
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e074      	b.n	8004ace <UART_SetConfig+0x1ba>
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e070      	b.n	8004ace <UART_SetConfig+0x1ba>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a8c      	ldr	r2, [pc, #560]	@ (8004c24 <UART_SetConfig+0x310>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d138      	bne.n	8004a68 <UART_SetConfig+0x154>
 80049f6:	4b8a      	ldr	r3, [pc, #552]	@ (8004c20 <UART_SetConfig+0x30c>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d82d      	bhi.n	8004a60 <UART_SetConfig+0x14c>
 8004a04:	a201      	add	r2, pc, #4	@ (adr r2, 8004a0c <UART_SetConfig+0xf8>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a61 	.word	0x08004a61
 8004a14:	08004a61 	.word	0x08004a61
 8004a18:	08004a61 	.word	0x08004a61
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a61 	.word	0x08004a61
 8004a24:	08004a61 	.word	0x08004a61
 8004a28:	08004a61 	.word	0x08004a61
 8004a2c:	08004a49 	.word	0x08004a49
 8004a30:	08004a61 	.word	0x08004a61
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a46:	e042      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e03e      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e03a      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e036      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e032      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c18 <UART_SetConfig+0x304>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d12a      	bne.n	8004ac8 <UART_SetConfig+0x1b4>
 8004a72:	4b6b      	ldr	r3, [pc, #428]	@ (8004c20 <UART_SetConfig+0x30c>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a80:	d01a      	beq.n	8004ab8 <UART_SetConfig+0x1a4>
 8004a82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a86:	d81b      	bhi.n	8004ac0 <UART_SetConfig+0x1ac>
 8004a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a8c:	d00c      	beq.n	8004aa8 <UART_SetConfig+0x194>
 8004a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a92:	d815      	bhi.n	8004ac0 <UART_SetConfig+0x1ac>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <UART_SetConfig+0x18c>
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d008      	beq.n	8004ab0 <UART_SetConfig+0x19c>
 8004a9e:	e00f      	b.n	8004ac0 <UART_SetConfig+0x1ac>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa6:	e012      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aae:	e00e      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab6:	e00a      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e006      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e002      	b.n	8004ace <UART_SetConfig+0x1ba>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a51      	ldr	r2, [pc, #324]	@ (8004c18 <UART_SetConfig+0x304>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d17a      	bne.n	8004bce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d824      	bhi.n	8004b2a <UART_SetConfig+0x216>
 8004ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <UART_SetConfig+0x1d4>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b2b 	.word	0x08004b2b
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b1b 	.word	0x08004b1b
 8004afc:	08004b2b 	.word	0x08004b2b
 8004b00:	08004b2b 	.word	0x08004b2b
 8004b04:	08004b2b 	.word	0x08004b2b
 8004b08:	08004b23 	.word	0x08004b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fe f932 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8004b10:	61f8      	str	r0, [r7, #28]
        break;
 8004b12:	e010      	b.n	8004b36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b14:	4b44      	ldr	r3, [pc, #272]	@ (8004c28 <UART_SetConfig+0x314>)
 8004b16:	61fb      	str	r3, [r7, #28]
        break;
 8004b18:	e00d      	b.n	8004b36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1a:	f7fe f893 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8004b1e:	61f8      	str	r0, [r7, #28]
        break;
 8004b20:	e009      	b.n	8004b36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b26:	61fb      	str	r3, [r7, #28]
        break;
 8004b28:	e005      	b.n	8004b36 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8107 	beq.w	8004d4c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d305      	bcc.n	8004b5a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d903      	bls.n	8004b62 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b60:	e0f4      	b.n	8004d4c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2200      	movs	r2, #0
 8004b66:	461c      	mov	r4, r3
 8004b68:	4615      	mov	r5, r2
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	022b      	lsls	r3, r5, #8
 8004b74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b78:	0222      	lsls	r2, r4, #8
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6849      	ldr	r1, [r1, #4]
 8004b7e:	0849      	lsrs	r1, r1, #1
 8004b80:	2000      	movs	r0, #0
 8004b82:	4688      	mov	r8, r1
 8004b84:	4681      	mov	r9, r0
 8004b86:	eb12 0a08 	adds.w	sl, r2, r8
 8004b8a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b9c:	4650      	mov	r0, sl
 8004b9e:	4659      	mov	r1, fp
 8004ba0:	f7fc f802 	bl	8000ba8 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb2:	d308      	bcc.n	8004bc6 <UART_SetConfig+0x2b2>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bba:	d204      	bcs.n	8004bc6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e0c2      	b.n	8004d4c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bcc:	e0be      	b.n	8004d4c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd6:	d16a      	bne.n	8004cae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d834      	bhi.n	8004c4a <UART_SetConfig+0x336>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0x2d4>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c35 	.word	0x08004c35
 8004bf4:	08004c4b 	.word	0x08004c4b
 8004bf8:	08004c3b 	.word	0x08004c3b
 8004bfc:	08004c4b 	.word	0x08004c4b
 8004c00:	08004c4b 	.word	0x08004c4b
 8004c04:	08004c4b 	.word	0x08004c4b
 8004c08:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe f8b2 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8004c10:	61f8      	str	r0, [r7, #28]
        break;
 8004c12:	e020      	b.n	8004c56 <UART_SetConfig+0x342>
 8004c14:	efff69f3 	.word	0xefff69f3
 8004c18:	40008000 	.word	0x40008000
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40004400 	.word	0x40004400
 8004c28:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7fe f8b8 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8004c30:	61f8      	str	r0, [r7, #28]
        break;
 8004c32:	e010      	b.n	8004c56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b4c      	ldr	r3, [pc, #304]	@ (8004d68 <UART_SetConfig+0x454>)
 8004c36:	61fb      	str	r3, [r7, #28]
        break;
 8004c38:	e00d      	b.n	8004c56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe f803 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8004c3e:	61f8      	str	r0, [r7, #28]
        break;
 8004c40:	e009      	b.n	8004c56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c46:	61fb      	str	r3, [r7, #28]
        break;
 8004c48:	e005      	b.n	8004c56 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d077      	beq.n	8004d4c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	005a      	lsls	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	441a      	add	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d916      	bls.n	8004ca6 <UART_SetConfig+0x392>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7e:	d212      	bcs.n	8004ca6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f023 030f 	bic.w	r3, r3, #15
 8004c88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	8afb      	ldrh	r3, [r7, #22]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	8afa      	ldrh	r2, [r7, #22]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e052      	b.n	8004d4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cac:	e04e      	b.n	8004d4c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d827      	bhi.n	8004d06 <UART_SetConfig+0x3f2>
 8004cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <UART_SetConfig+0x3a8>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	08004d07 	.word	0x08004d07
 8004ccc:	08004cf7 	.word	0x08004cf7
 8004cd0:	08004d07 	.word	0x08004d07
 8004cd4:	08004d07 	.word	0x08004d07
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004cff 	.word	0x08004cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7fe f848 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	61f8      	str	r0, [r7, #28]
        break;
 8004ce6:	e014      	b.n	8004d12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce8:	f7fe f85a 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8004cec:	61f8      	str	r0, [r7, #28]
        break;
 8004cee:	e010      	b.n	8004d12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d68 <UART_SetConfig+0x454>)
 8004cf2:	61fb      	str	r3, [r7, #28]
        break;
 8004cf4:	e00d      	b.n	8004d12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7fd ffa5 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8004cfa:	61f8      	str	r0, [r7, #28]
        break;
 8004cfc:	e009      	b.n	8004d12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e005      	b.n	8004d12 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d10:	bf00      	nop
    }

    if (pclk != 0U)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d019      	beq.n	8004d4c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	085a      	lsrs	r2, r3, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	441a      	add	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b0f      	cmp	r3, #15
 8004d30:	d909      	bls.n	8004d46 <UART_SetConfig+0x432>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d38:	d205      	bcs.n	8004d46 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60da      	str	r2, [r3, #12]
 8004d44:	e002      	b.n	8004d4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3728      	adds	r7, #40	@ 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d66:	bf00      	nop
 8004d68:	00f42400 	.word	0x00f42400

08004d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e6a:	d10a      	bne.n	8004e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b098      	sub	sp, #96	@ 0x60
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec0:	f7fc fe6a 	bl	8001b98 <HAL_GetTick>
 8004ec4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d12e      	bne.n	8004f32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004edc:	2200      	movs	r2, #0
 8004ede:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f88c 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d021      	beq.n	8004f32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e6      	bne.n	8004eee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e062      	b.n	8004ff8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d149      	bne.n	8004fd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f856 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d03c      	beq.n	8004fd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	623b      	str	r3, [r7, #32]
   return(result);
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e6      	bne.n	8004f5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	69b9      	ldr	r1, [r7, #24]
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e011      	b.n	8004ff8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3758      	adds	r7, #88	@ 0x58
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005010:	e04f      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d04b      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7fc fdbd 	bl	8001b98 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <UART_WaitOnFlagUntilTimeout+0x30>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e04e      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d037      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b80      	cmp	r3, #128	@ 0x80
 8005046:	d034      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b40      	cmp	r3, #64	@ 0x40
 800504c:	d031      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d110      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2208      	movs	r2, #8
 8005062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f838 	bl	80050da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2208      	movs	r2, #8
 800506e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e029      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800508c:	d111      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f81e 	bl	80050da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e00f      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4013      	ands	r3, r2
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d0a0      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050da:	b480      	push	{r7}
 80050dc:	b095      	sub	sp, #84	@ 0x54
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005100:	643b      	str	r3, [r7, #64]	@ 0x40
 8005102:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	61fb      	str	r3, [r7, #28]
   return(result);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005134:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800513a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514c:	2b01      	cmp	r3, #1
 800514e:	d118      	bne.n	8005182 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	60bb      	str	r3, [r7, #8]
   return(result);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 0310 	bic.w	r3, r3, #16
 8005164:	647b      	str	r3, [r7, #68]	@ 0x44
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6979      	ldr	r1, [r7, #20]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	613b      	str	r3, [r7, #16]
   return(result);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005196:	bf00      	nop
 8005198:	3754      	adds	r7, #84	@ 0x54
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <__cvt>:
 80051a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051a6:	ec57 6b10 	vmov	r6, r7, d0
 80051aa:	2f00      	cmp	r7, #0
 80051ac:	460c      	mov	r4, r1
 80051ae:	4619      	mov	r1, r3
 80051b0:	463b      	mov	r3, r7
 80051b2:	bfbb      	ittet	lt
 80051b4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80051b8:	461f      	movlt	r7, r3
 80051ba:	2300      	movge	r3, #0
 80051bc:	232d      	movlt	r3, #45	@ 0x2d
 80051be:	700b      	strb	r3, [r1, #0]
 80051c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051c2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80051c6:	4691      	mov	r9, r2
 80051c8:	f023 0820 	bic.w	r8, r3, #32
 80051cc:	bfbc      	itt	lt
 80051ce:	4632      	movlt	r2, r6
 80051d0:	4616      	movlt	r6, r2
 80051d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051d6:	d005      	beq.n	80051e4 <__cvt+0x42>
 80051d8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051dc:	d100      	bne.n	80051e0 <__cvt+0x3e>
 80051de:	3401      	adds	r4, #1
 80051e0:	2102      	movs	r1, #2
 80051e2:	e000      	b.n	80051e6 <__cvt+0x44>
 80051e4:	2103      	movs	r1, #3
 80051e6:	ab03      	add	r3, sp, #12
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	ab02      	add	r3, sp, #8
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	ec47 6b10 	vmov	d0, r6, r7
 80051f2:	4653      	mov	r3, sl
 80051f4:	4622      	mov	r2, r4
 80051f6:	f000 fe4b 	bl	8005e90 <_dtoa_r>
 80051fa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80051fe:	4605      	mov	r5, r0
 8005200:	d119      	bne.n	8005236 <__cvt+0x94>
 8005202:	f019 0f01 	tst.w	r9, #1
 8005206:	d00e      	beq.n	8005226 <__cvt+0x84>
 8005208:	eb00 0904 	add.w	r9, r0, r4
 800520c:	2200      	movs	r2, #0
 800520e:	2300      	movs	r3, #0
 8005210:	4630      	mov	r0, r6
 8005212:	4639      	mov	r1, r7
 8005214:	f7fb fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8005218:	b108      	cbz	r0, 800521e <__cvt+0x7c>
 800521a:	f8cd 900c 	str.w	r9, [sp, #12]
 800521e:	2230      	movs	r2, #48	@ 0x30
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	454b      	cmp	r3, r9
 8005224:	d31e      	bcc.n	8005264 <__cvt+0xc2>
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800522a:	1b5b      	subs	r3, r3, r5
 800522c:	4628      	mov	r0, r5
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	b004      	add	sp, #16
 8005232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005236:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800523a:	eb00 0904 	add.w	r9, r0, r4
 800523e:	d1e5      	bne.n	800520c <__cvt+0x6a>
 8005240:	7803      	ldrb	r3, [r0, #0]
 8005242:	2b30      	cmp	r3, #48	@ 0x30
 8005244:	d10a      	bne.n	800525c <__cvt+0xba>
 8005246:	2200      	movs	r2, #0
 8005248:	2300      	movs	r3, #0
 800524a:	4630      	mov	r0, r6
 800524c:	4639      	mov	r1, r7
 800524e:	f7fb fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005252:	b918      	cbnz	r0, 800525c <__cvt+0xba>
 8005254:	f1c4 0401 	rsb	r4, r4, #1
 8005258:	f8ca 4000 	str.w	r4, [sl]
 800525c:	f8da 3000 	ldr.w	r3, [sl]
 8005260:	4499      	add	r9, r3
 8005262:	e7d3      	b.n	800520c <__cvt+0x6a>
 8005264:	1c59      	adds	r1, r3, #1
 8005266:	9103      	str	r1, [sp, #12]
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e7d9      	b.n	8005220 <__cvt+0x7e>

0800526c <__exponent>:
 800526c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800526e:	2900      	cmp	r1, #0
 8005270:	bfba      	itte	lt
 8005272:	4249      	neglt	r1, r1
 8005274:	232d      	movlt	r3, #45	@ 0x2d
 8005276:	232b      	movge	r3, #43	@ 0x2b
 8005278:	2909      	cmp	r1, #9
 800527a:	7002      	strb	r2, [r0, #0]
 800527c:	7043      	strb	r3, [r0, #1]
 800527e:	dd29      	ble.n	80052d4 <__exponent+0x68>
 8005280:	f10d 0307 	add.w	r3, sp, #7
 8005284:	461d      	mov	r5, r3
 8005286:	270a      	movs	r7, #10
 8005288:	461a      	mov	r2, r3
 800528a:	fbb1 f6f7 	udiv	r6, r1, r7
 800528e:	fb07 1416 	mls	r4, r7, r6, r1
 8005292:	3430      	adds	r4, #48	@ 0x30
 8005294:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005298:	460c      	mov	r4, r1
 800529a:	2c63      	cmp	r4, #99	@ 0x63
 800529c:	f103 33ff 	add.w	r3, r3, #4294967295
 80052a0:	4631      	mov	r1, r6
 80052a2:	dcf1      	bgt.n	8005288 <__exponent+0x1c>
 80052a4:	3130      	adds	r1, #48	@ 0x30
 80052a6:	1e94      	subs	r4, r2, #2
 80052a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052ac:	1c41      	adds	r1, r0, #1
 80052ae:	4623      	mov	r3, r4
 80052b0:	42ab      	cmp	r3, r5
 80052b2:	d30a      	bcc.n	80052ca <__exponent+0x5e>
 80052b4:	f10d 0309 	add.w	r3, sp, #9
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	42ac      	cmp	r4, r5
 80052bc:	bf88      	it	hi
 80052be:	2300      	movhi	r3, #0
 80052c0:	3302      	adds	r3, #2
 80052c2:	4403      	add	r3, r0
 80052c4:	1a18      	subs	r0, r3, r0
 80052c6:	b003      	add	sp, #12
 80052c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052d2:	e7ed      	b.n	80052b0 <__exponent+0x44>
 80052d4:	2330      	movs	r3, #48	@ 0x30
 80052d6:	3130      	adds	r1, #48	@ 0x30
 80052d8:	7083      	strb	r3, [r0, #2]
 80052da:	70c1      	strb	r1, [r0, #3]
 80052dc:	1d03      	adds	r3, r0, #4
 80052de:	e7f1      	b.n	80052c4 <__exponent+0x58>

080052e0 <_printf_float>:
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	b08d      	sub	sp, #52	@ 0x34
 80052e6:	460c      	mov	r4, r1
 80052e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80052ec:	4616      	mov	r6, r2
 80052ee:	461f      	mov	r7, r3
 80052f0:	4605      	mov	r5, r0
 80052f2:	f000 fccd 	bl	8005c90 <_localeconv_r>
 80052f6:	6803      	ldr	r3, [r0, #0]
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fa ffb8 	bl	8000270 <strlen>
 8005300:	2300      	movs	r3, #0
 8005302:	930a      	str	r3, [sp, #40]	@ 0x28
 8005304:	f8d8 3000 	ldr.w	r3, [r8]
 8005308:	9005      	str	r0, [sp, #20]
 800530a:	3307      	adds	r3, #7
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	f103 0208 	add.w	r2, r3, #8
 8005314:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005318:	f8d4 b000 	ldr.w	fp, [r4]
 800531c:	f8c8 2000 	str.w	r2, [r8]
 8005320:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005324:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005328:	9307      	str	r3, [sp, #28]
 800532a:	f8cd 8018 	str.w	r8, [sp, #24]
 800532e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005336:	4b9c      	ldr	r3, [pc, #624]	@ (80055a8 <_printf_float+0x2c8>)
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	f7fb fbf6 	bl	8000b2c <__aeabi_dcmpun>
 8005340:	bb70      	cbnz	r0, 80053a0 <_printf_float+0xc0>
 8005342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005346:	4b98      	ldr	r3, [pc, #608]	@ (80055a8 <_printf_float+0x2c8>)
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	f7fb fbd0 	bl	8000af0 <__aeabi_dcmple>
 8005350:	bb30      	cbnz	r0, 80053a0 <_printf_float+0xc0>
 8005352:	2200      	movs	r2, #0
 8005354:	2300      	movs	r3, #0
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fb fbbf 	bl	8000adc <__aeabi_dcmplt>
 800535e:	b110      	cbz	r0, 8005366 <_printf_float+0x86>
 8005360:	232d      	movs	r3, #45	@ 0x2d
 8005362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005366:	4a91      	ldr	r2, [pc, #580]	@ (80055ac <_printf_float+0x2cc>)
 8005368:	4b91      	ldr	r3, [pc, #580]	@ (80055b0 <_printf_float+0x2d0>)
 800536a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800536e:	bf94      	ite	ls
 8005370:	4690      	movls	r8, r2
 8005372:	4698      	movhi	r8, r3
 8005374:	2303      	movs	r3, #3
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	f02b 0304 	bic.w	r3, fp, #4
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	f04f 0900 	mov.w	r9, #0
 8005382:	9700      	str	r7, [sp, #0]
 8005384:	4633      	mov	r3, r6
 8005386:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005388:	4621      	mov	r1, r4
 800538a:	4628      	mov	r0, r5
 800538c:	f000 f9d2 	bl	8005734 <_printf_common>
 8005390:	3001      	adds	r0, #1
 8005392:	f040 808d 	bne.w	80054b0 <_printf_float+0x1d0>
 8005396:	f04f 30ff 	mov.w	r0, #4294967295
 800539a:	b00d      	add	sp, #52	@ 0x34
 800539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	4640      	mov	r0, r8
 80053a6:	4649      	mov	r1, r9
 80053a8:	f7fb fbc0 	bl	8000b2c <__aeabi_dcmpun>
 80053ac:	b140      	cbz	r0, 80053c0 <_printf_float+0xe0>
 80053ae:	464b      	mov	r3, r9
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bfbc      	itt	lt
 80053b4:	232d      	movlt	r3, #45	@ 0x2d
 80053b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053ba:	4a7e      	ldr	r2, [pc, #504]	@ (80055b4 <_printf_float+0x2d4>)
 80053bc:	4b7e      	ldr	r3, [pc, #504]	@ (80055b8 <_printf_float+0x2d8>)
 80053be:	e7d4      	b.n	800536a <_printf_float+0x8a>
 80053c0:	6863      	ldr	r3, [r4, #4]
 80053c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80053c6:	9206      	str	r2, [sp, #24]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	d13b      	bne.n	8005444 <_printf_float+0x164>
 80053cc:	2306      	movs	r3, #6
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80053d4:	2300      	movs	r3, #0
 80053d6:	6022      	str	r2, [r4, #0]
 80053d8:	9303      	str	r3, [sp, #12]
 80053da:	ab0a      	add	r3, sp, #40	@ 0x28
 80053dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80053e0:	ab09      	add	r3, sp, #36	@ 0x24
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	6861      	ldr	r1, [r4, #4]
 80053e6:	ec49 8b10 	vmov	d0, r8, r9
 80053ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80053ee:	4628      	mov	r0, r5
 80053f0:	f7ff fed7 	bl	80051a2 <__cvt>
 80053f4:	9b06      	ldr	r3, [sp, #24]
 80053f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053f8:	2b47      	cmp	r3, #71	@ 0x47
 80053fa:	4680      	mov	r8, r0
 80053fc:	d129      	bne.n	8005452 <_printf_float+0x172>
 80053fe:	1cc8      	adds	r0, r1, #3
 8005400:	db02      	blt.n	8005408 <_printf_float+0x128>
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	4299      	cmp	r1, r3
 8005406:	dd41      	ble.n	800548c <_printf_float+0x1ac>
 8005408:	f1aa 0a02 	sub.w	sl, sl, #2
 800540c:	fa5f fa8a 	uxtb.w	sl, sl
 8005410:	3901      	subs	r1, #1
 8005412:	4652      	mov	r2, sl
 8005414:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005418:	9109      	str	r1, [sp, #36]	@ 0x24
 800541a:	f7ff ff27 	bl	800526c <__exponent>
 800541e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005420:	1813      	adds	r3, r2, r0
 8005422:	2a01      	cmp	r2, #1
 8005424:	4681      	mov	r9, r0
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	dc02      	bgt.n	8005430 <_printf_float+0x150>
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	07d2      	lsls	r2, r2, #31
 800542e:	d501      	bpl.n	8005434 <_printf_float+0x154>
 8005430:	3301      	adds	r3, #1
 8005432:	6123      	str	r3, [r4, #16]
 8005434:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0a2      	beq.n	8005382 <_printf_float+0xa2>
 800543c:	232d      	movs	r3, #45	@ 0x2d
 800543e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005442:	e79e      	b.n	8005382 <_printf_float+0xa2>
 8005444:	9a06      	ldr	r2, [sp, #24]
 8005446:	2a47      	cmp	r2, #71	@ 0x47
 8005448:	d1c2      	bne.n	80053d0 <_printf_float+0xf0>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1c0      	bne.n	80053d0 <_printf_float+0xf0>
 800544e:	2301      	movs	r3, #1
 8005450:	e7bd      	b.n	80053ce <_printf_float+0xee>
 8005452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005456:	d9db      	bls.n	8005410 <_printf_float+0x130>
 8005458:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800545c:	d118      	bne.n	8005490 <_printf_float+0x1b0>
 800545e:	2900      	cmp	r1, #0
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	dd0b      	ble.n	800547c <_printf_float+0x19c>
 8005464:	6121      	str	r1, [r4, #16]
 8005466:	b913      	cbnz	r3, 800546e <_printf_float+0x18e>
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	07d0      	lsls	r0, r2, #31
 800546c:	d502      	bpl.n	8005474 <_printf_float+0x194>
 800546e:	3301      	adds	r3, #1
 8005470:	440b      	add	r3, r1
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005476:	f04f 0900 	mov.w	r9, #0
 800547a:	e7db      	b.n	8005434 <_printf_float+0x154>
 800547c:	b913      	cbnz	r3, 8005484 <_printf_float+0x1a4>
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	07d2      	lsls	r2, r2, #31
 8005482:	d501      	bpl.n	8005488 <_printf_float+0x1a8>
 8005484:	3302      	adds	r3, #2
 8005486:	e7f4      	b.n	8005472 <_printf_float+0x192>
 8005488:	2301      	movs	r3, #1
 800548a:	e7f2      	b.n	8005472 <_printf_float+0x192>
 800548c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005492:	4299      	cmp	r1, r3
 8005494:	db05      	blt.n	80054a2 <_printf_float+0x1c2>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	6121      	str	r1, [r4, #16]
 800549a:	07d8      	lsls	r0, r3, #31
 800549c:	d5ea      	bpl.n	8005474 <_printf_float+0x194>
 800549e:	1c4b      	adds	r3, r1, #1
 80054a0:	e7e7      	b.n	8005472 <_printf_float+0x192>
 80054a2:	2900      	cmp	r1, #0
 80054a4:	bfd4      	ite	le
 80054a6:	f1c1 0202 	rsble	r2, r1, #2
 80054aa:	2201      	movgt	r2, #1
 80054ac:	4413      	add	r3, r2
 80054ae:	e7e0      	b.n	8005472 <_printf_float+0x192>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	055a      	lsls	r2, r3, #21
 80054b4:	d407      	bmi.n	80054c6 <_printf_float+0x1e6>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	4642      	mov	r2, r8
 80054ba:	4631      	mov	r1, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	d12b      	bne.n	800551c <_printf_float+0x23c>
 80054c4:	e767      	b.n	8005396 <_printf_float+0xb6>
 80054c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054ca:	f240 80dd 	bls.w	8005688 <_printf_float+0x3a8>
 80054ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054d2:	2200      	movs	r2, #0
 80054d4:	2300      	movs	r3, #0
 80054d6:	f7fb faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80054da:	2800      	cmp	r0, #0
 80054dc:	d033      	beq.n	8005546 <_printf_float+0x266>
 80054de:	4a37      	ldr	r2, [pc, #220]	@ (80055bc <_printf_float+0x2dc>)
 80054e0:	2301      	movs	r3, #1
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f af54 	beq.w	8005396 <_printf_float+0xb6>
 80054ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80054f2:	4543      	cmp	r3, r8
 80054f4:	db02      	blt.n	80054fc <_printf_float+0x21c>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	07d8      	lsls	r0, r3, #31
 80054fa:	d50f      	bpl.n	800551c <_printf_float+0x23c>
 80054fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005500:	4631      	mov	r1, r6
 8005502:	4628      	mov	r0, r5
 8005504:	47b8      	blx	r7
 8005506:	3001      	adds	r0, #1
 8005508:	f43f af45 	beq.w	8005396 <_printf_float+0xb6>
 800550c:	f04f 0900 	mov.w	r9, #0
 8005510:	f108 38ff 	add.w	r8, r8, #4294967295
 8005514:	f104 0a1a 	add.w	sl, r4, #26
 8005518:	45c8      	cmp	r8, r9
 800551a:	dc09      	bgt.n	8005530 <_printf_float+0x250>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	079b      	lsls	r3, r3, #30
 8005520:	f100 8103 	bmi.w	800572a <_printf_float+0x44a>
 8005524:	68e0      	ldr	r0, [r4, #12]
 8005526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005528:	4298      	cmp	r0, r3
 800552a:	bfb8      	it	lt
 800552c:	4618      	movlt	r0, r3
 800552e:	e734      	b.n	800539a <_printf_float+0xba>
 8005530:	2301      	movs	r3, #1
 8005532:	4652      	mov	r2, sl
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f af2b 	beq.w	8005396 <_printf_float+0xb6>
 8005540:	f109 0901 	add.w	r9, r9, #1
 8005544:	e7e8      	b.n	8005518 <_printf_float+0x238>
 8005546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005548:	2b00      	cmp	r3, #0
 800554a:	dc39      	bgt.n	80055c0 <_printf_float+0x2e0>
 800554c:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <_printf_float+0x2dc>)
 800554e:	2301      	movs	r3, #1
 8005550:	4631      	mov	r1, r6
 8005552:	4628      	mov	r0, r5
 8005554:	47b8      	blx	r7
 8005556:	3001      	adds	r0, #1
 8005558:	f43f af1d 	beq.w	8005396 <_printf_float+0xb6>
 800555c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005560:	ea59 0303 	orrs.w	r3, r9, r3
 8005564:	d102      	bne.n	800556c <_printf_float+0x28c>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	07d9      	lsls	r1, r3, #31
 800556a:	d5d7      	bpl.n	800551c <_printf_float+0x23c>
 800556c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005570:	4631      	mov	r1, r6
 8005572:	4628      	mov	r0, r5
 8005574:	47b8      	blx	r7
 8005576:	3001      	adds	r0, #1
 8005578:	f43f af0d 	beq.w	8005396 <_printf_float+0xb6>
 800557c:	f04f 0a00 	mov.w	sl, #0
 8005580:	f104 0b1a 	add.w	fp, r4, #26
 8005584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005586:	425b      	negs	r3, r3
 8005588:	4553      	cmp	r3, sl
 800558a:	dc01      	bgt.n	8005590 <_printf_float+0x2b0>
 800558c:	464b      	mov	r3, r9
 800558e:	e793      	b.n	80054b8 <_printf_float+0x1d8>
 8005590:	2301      	movs	r3, #1
 8005592:	465a      	mov	r2, fp
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f aefb 	beq.w	8005396 <_printf_float+0xb6>
 80055a0:	f10a 0a01 	add.w	sl, sl, #1
 80055a4:	e7ee      	b.n	8005584 <_printf_float+0x2a4>
 80055a6:	bf00      	nop
 80055a8:	7fefffff 	.word	0x7fefffff
 80055ac:	08007b40 	.word	0x08007b40
 80055b0:	08007b44 	.word	0x08007b44
 80055b4:	08007b48 	.word	0x08007b48
 80055b8:	08007b4c 	.word	0x08007b4c
 80055bc:	08007b50 	.word	0x08007b50
 80055c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055c6:	4553      	cmp	r3, sl
 80055c8:	bfa8      	it	ge
 80055ca:	4653      	movge	r3, sl
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	4699      	mov	r9, r3
 80055d0:	dc36      	bgt.n	8005640 <_printf_float+0x360>
 80055d2:	f04f 0b00 	mov.w	fp, #0
 80055d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055da:	f104 021a 	add.w	r2, r4, #26
 80055de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055e0:	9306      	str	r3, [sp, #24]
 80055e2:	eba3 0309 	sub.w	r3, r3, r9
 80055e6:	455b      	cmp	r3, fp
 80055e8:	dc31      	bgt.n	800564e <_printf_float+0x36e>
 80055ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ec:	459a      	cmp	sl, r3
 80055ee:	dc3a      	bgt.n	8005666 <_printf_float+0x386>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	07da      	lsls	r2, r3, #31
 80055f4:	d437      	bmi.n	8005666 <_printf_float+0x386>
 80055f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f8:	ebaa 0903 	sub.w	r9, sl, r3
 80055fc:	9b06      	ldr	r3, [sp, #24]
 80055fe:	ebaa 0303 	sub.w	r3, sl, r3
 8005602:	4599      	cmp	r9, r3
 8005604:	bfa8      	it	ge
 8005606:	4699      	movge	r9, r3
 8005608:	f1b9 0f00 	cmp.w	r9, #0
 800560c:	dc33      	bgt.n	8005676 <_printf_float+0x396>
 800560e:	f04f 0800 	mov.w	r8, #0
 8005612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005616:	f104 0b1a 	add.w	fp, r4, #26
 800561a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800561c:	ebaa 0303 	sub.w	r3, sl, r3
 8005620:	eba3 0309 	sub.w	r3, r3, r9
 8005624:	4543      	cmp	r3, r8
 8005626:	f77f af79 	ble.w	800551c <_printf_float+0x23c>
 800562a:	2301      	movs	r3, #1
 800562c:	465a      	mov	r2, fp
 800562e:	4631      	mov	r1, r6
 8005630:	4628      	mov	r0, r5
 8005632:	47b8      	blx	r7
 8005634:	3001      	adds	r0, #1
 8005636:	f43f aeae 	beq.w	8005396 <_printf_float+0xb6>
 800563a:	f108 0801 	add.w	r8, r8, #1
 800563e:	e7ec      	b.n	800561a <_printf_float+0x33a>
 8005640:	4642      	mov	r2, r8
 8005642:	4631      	mov	r1, r6
 8005644:	4628      	mov	r0, r5
 8005646:	47b8      	blx	r7
 8005648:	3001      	adds	r0, #1
 800564a:	d1c2      	bne.n	80055d2 <_printf_float+0x2f2>
 800564c:	e6a3      	b.n	8005396 <_printf_float+0xb6>
 800564e:	2301      	movs	r3, #1
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	9206      	str	r2, [sp, #24]
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	f43f ae9c 	beq.w	8005396 <_printf_float+0xb6>
 800565e:	9a06      	ldr	r2, [sp, #24]
 8005660:	f10b 0b01 	add.w	fp, fp, #1
 8005664:	e7bb      	b.n	80055de <_printf_float+0x2fe>
 8005666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	d1c0      	bne.n	80055f6 <_printf_float+0x316>
 8005674:	e68f      	b.n	8005396 <_printf_float+0xb6>
 8005676:	9a06      	ldr	r2, [sp, #24]
 8005678:	464b      	mov	r3, r9
 800567a:	4442      	add	r2, r8
 800567c:	4631      	mov	r1, r6
 800567e:	4628      	mov	r0, r5
 8005680:	47b8      	blx	r7
 8005682:	3001      	adds	r0, #1
 8005684:	d1c3      	bne.n	800560e <_printf_float+0x32e>
 8005686:	e686      	b.n	8005396 <_printf_float+0xb6>
 8005688:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800568c:	f1ba 0f01 	cmp.w	sl, #1
 8005690:	dc01      	bgt.n	8005696 <_printf_float+0x3b6>
 8005692:	07db      	lsls	r3, r3, #31
 8005694:	d536      	bpl.n	8005704 <_printf_float+0x424>
 8005696:	2301      	movs	r3, #1
 8005698:	4642      	mov	r2, r8
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f ae78 	beq.w	8005396 <_printf_float+0xb6>
 80056a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f ae70 	beq.w	8005396 <_printf_float+0xb6>
 80056b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056ba:	2200      	movs	r2, #0
 80056bc:	2300      	movs	r3, #0
 80056be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056c2:	f7fb fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 80056c6:	b9c0      	cbnz	r0, 80056fa <_printf_float+0x41a>
 80056c8:	4653      	mov	r3, sl
 80056ca:	f108 0201 	add.w	r2, r8, #1
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	d10c      	bne.n	80056f2 <_printf_float+0x412>
 80056d8:	e65d      	b.n	8005396 <_printf_float+0xb6>
 80056da:	2301      	movs	r3, #1
 80056dc:	465a      	mov	r2, fp
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	f43f ae56 	beq.w	8005396 <_printf_float+0xb6>
 80056ea:	f108 0801 	add.w	r8, r8, #1
 80056ee:	45d0      	cmp	r8, sl
 80056f0:	dbf3      	blt.n	80056da <_printf_float+0x3fa>
 80056f2:	464b      	mov	r3, r9
 80056f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80056f8:	e6df      	b.n	80054ba <_printf_float+0x1da>
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	f104 0b1a 	add.w	fp, r4, #26
 8005702:	e7f4      	b.n	80056ee <_printf_float+0x40e>
 8005704:	2301      	movs	r3, #1
 8005706:	4642      	mov	r2, r8
 8005708:	e7e1      	b.n	80056ce <_printf_float+0x3ee>
 800570a:	2301      	movs	r3, #1
 800570c:	464a      	mov	r2, r9
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	47b8      	blx	r7
 8005714:	3001      	adds	r0, #1
 8005716:	f43f ae3e 	beq.w	8005396 <_printf_float+0xb6>
 800571a:	f108 0801 	add.w	r8, r8, #1
 800571e:	68e3      	ldr	r3, [r4, #12]
 8005720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005722:	1a5b      	subs	r3, r3, r1
 8005724:	4543      	cmp	r3, r8
 8005726:	dcf0      	bgt.n	800570a <_printf_float+0x42a>
 8005728:	e6fc      	b.n	8005524 <_printf_float+0x244>
 800572a:	f04f 0800 	mov.w	r8, #0
 800572e:	f104 0919 	add.w	r9, r4, #25
 8005732:	e7f4      	b.n	800571e <_printf_float+0x43e>

08005734 <_printf_common>:
 8005734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005738:	4616      	mov	r6, r2
 800573a:	4698      	mov	r8, r3
 800573c:	688a      	ldr	r2, [r1, #8]
 800573e:	690b      	ldr	r3, [r1, #16]
 8005740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005744:	4293      	cmp	r3, r2
 8005746:	bfb8      	it	lt
 8005748:	4613      	movlt	r3, r2
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005750:	4607      	mov	r7, r0
 8005752:	460c      	mov	r4, r1
 8005754:	b10a      	cbz	r2, 800575a <_printf_common+0x26>
 8005756:	3301      	adds	r3, #1
 8005758:	6033      	str	r3, [r6, #0]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	0699      	lsls	r1, r3, #26
 800575e:	bf42      	ittt	mi
 8005760:	6833      	ldrmi	r3, [r6, #0]
 8005762:	3302      	addmi	r3, #2
 8005764:	6033      	strmi	r3, [r6, #0]
 8005766:	6825      	ldr	r5, [r4, #0]
 8005768:	f015 0506 	ands.w	r5, r5, #6
 800576c:	d106      	bne.n	800577c <_printf_common+0x48>
 800576e:	f104 0a19 	add.w	sl, r4, #25
 8005772:	68e3      	ldr	r3, [r4, #12]
 8005774:	6832      	ldr	r2, [r6, #0]
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	42ab      	cmp	r3, r5
 800577a:	dc26      	bgt.n	80057ca <_printf_common+0x96>
 800577c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	3b00      	subs	r3, #0
 8005784:	bf18      	it	ne
 8005786:	2301      	movne	r3, #1
 8005788:	0692      	lsls	r2, r2, #26
 800578a:	d42b      	bmi.n	80057e4 <_printf_common+0xb0>
 800578c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005790:	4641      	mov	r1, r8
 8005792:	4638      	mov	r0, r7
 8005794:	47c8      	blx	r9
 8005796:	3001      	adds	r0, #1
 8005798:	d01e      	beq.n	80057d8 <_printf_common+0xa4>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	f003 0306 	and.w	r3, r3, #6
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	bf02      	ittt	eq
 80057a6:	68e5      	ldreq	r5, [r4, #12]
 80057a8:	6833      	ldreq	r3, [r6, #0]
 80057aa:	1aed      	subeq	r5, r5, r3
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	bf0c      	ite	eq
 80057b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057b4:	2500      	movne	r5, #0
 80057b6:	4293      	cmp	r3, r2
 80057b8:	bfc4      	itt	gt
 80057ba:	1a9b      	subgt	r3, r3, r2
 80057bc:	18ed      	addgt	r5, r5, r3
 80057be:	2600      	movs	r6, #0
 80057c0:	341a      	adds	r4, #26
 80057c2:	42b5      	cmp	r5, r6
 80057c4:	d11a      	bne.n	80057fc <_printf_common+0xc8>
 80057c6:	2000      	movs	r0, #0
 80057c8:	e008      	b.n	80057dc <_printf_common+0xa8>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4652      	mov	r2, sl
 80057ce:	4641      	mov	r1, r8
 80057d0:	4638      	mov	r0, r7
 80057d2:	47c8      	blx	r9
 80057d4:	3001      	adds	r0, #1
 80057d6:	d103      	bne.n	80057e0 <_printf_common+0xac>
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e0:	3501      	adds	r5, #1
 80057e2:	e7c6      	b.n	8005772 <_printf_common+0x3e>
 80057e4:	18e1      	adds	r1, r4, r3
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	2030      	movs	r0, #48	@ 0x30
 80057ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057ee:	4422      	add	r2, r4
 80057f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057f8:	3302      	adds	r3, #2
 80057fa:	e7c7      	b.n	800578c <_printf_common+0x58>
 80057fc:	2301      	movs	r3, #1
 80057fe:	4622      	mov	r2, r4
 8005800:	4641      	mov	r1, r8
 8005802:	4638      	mov	r0, r7
 8005804:	47c8      	blx	r9
 8005806:	3001      	adds	r0, #1
 8005808:	d0e6      	beq.n	80057d8 <_printf_common+0xa4>
 800580a:	3601      	adds	r6, #1
 800580c:	e7d9      	b.n	80057c2 <_printf_common+0x8e>
	...

08005810 <_printf_i>:
 8005810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	7e0f      	ldrb	r7, [r1, #24]
 8005816:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005818:	2f78      	cmp	r7, #120	@ 0x78
 800581a:	4691      	mov	r9, r2
 800581c:	4680      	mov	r8, r0
 800581e:	460c      	mov	r4, r1
 8005820:	469a      	mov	sl, r3
 8005822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005826:	d807      	bhi.n	8005838 <_printf_i+0x28>
 8005828:	2f62      	cmp	r7, #98	@ 0x62
 800582a:	d80a      	bhi.n	8005842 <_printf_i+0x32>
 800582c:	2f00      	cmp	r7, #0
 800582e:	f000 80d2 	beq.w	80059d6 <_printf_i+0x1c6>
 8005832:	2f58      	cmp	r7, #88	@ 0x58
 8005834:	f000 80b9 	beq.w	80059aa <_printf_i+0x19a>
 8005838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800583c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005840:	e03a      	b.n	80058b8 <_printf_i+0xa8>
 8005842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005846:	2b15      	cmp	r3, #21
 8005848:	d8f6      	bhi.n	8005838 <_printf_i+0x28>
 800584a:	a101      	add	r1, pc, #4	@ (adr r1, 8005850 <_printf_i+0x40>)
 800584c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005850:	080058a9 	.word	0x080058a9
 8005854:	080058bd 	.word	0x080058bd
 8005858:	08005839 	.word	0x08005839
 800585c:	08005839 	.word	0x08005839
 8005860:	08005839 	.word	0x08005839
 8005864:	08005839 	.word	0x08005839
 8005868:	080058bd 	.word	0x080058bd
 800586c:	08005839 	.word	0x08005839
 8005870:	08005839 	.word	0x08005839
 8005874:	08005839 	.word	0x08005839
 8005878:	08005839 	.word	0x08005839
 800587c:	080059bd 	.word	0x080059bd
 8005880:	080058e7 	.word	0x080058e7
 8005884:	08005977 	.word	0x08005977
 8005888:	08005839 	.word	0x08005839
 800588c:	08005839 	.word	0x08005839
 8005890:	080059df 	.word	0x080059df
 8005894:	08005839 	.word	0x08005839
 8005898:	080058e7 	.word	0x080058e7
 800589c:	08005839 	.word	0x08005839
 80058a0:	08005839 	.word	0x08005839
 80058a4:	0800597f 	.word	0x0800597f
 80058a8:	6833      	ldr	r3, [r6, #0]
 80058aa:	1d1a      	adds	r2, r3, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6032      	str	r2, [r6, #0]
 80058b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058b8:	2301      	movs	r3, #1
 80058ba:	e09d      	b.n	80059f8 <_printf_i+0x1e8>
 80058bc:	6833      	ldr	r3, [r6, #0]
 80058be:	6820      	ldr	r0, [r4, #0]
 80058c0:	1d19      	adds	r1, r3, #4
 80058c2:	6031      	str	r1, [r6, #0]
 80058c4:	0606      	lsls	r6, r0, #24
 80058c6:	d501      	bpl.n	80058cc <_printf_i+0xbc>
 80058c8:	681d      	ldr	r5, [r3, #0]
 80058ca:	e003      	b.n	80058d4 <_printf_i+0xc4>
 80058cc:	0645      	lsls	r5, r0, #25
 80058ce:	d5fb      	bpl.n	80058c8 <_printf_i+0xb8>
 80058d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058d4:	2d00      	cmp	r5, #0
 80058d6:	da03      	bge.n	80058e0 <_printf_i+0xd0>
 80058d8:	232d      	movs	r3, #45	@ 0x2d
 80058da:	426d      	negs	r5, r5
 80058dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058e0:	4859      	ldr	r0, [pc, #356]	@ (8005a48 <_printf_i+0x238>)
 80058e2:	230a      	movs	r3, #10
 80058e4:	e011      	b.n	800590a <_printf_i+0xfa>
 80058e6:	6821      	ldr	r1, [r4, #0]
 80058e8:	6833      	ldr	r3, [r6, #0]
 80058ea:	0608      	lsls	r0, r1, #24
 80058ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80058f0:	d402      	bmi.n	80058f8 <_printf_i+0xe8>
 80058f2:	0649      	lsls	r1, r1, #25
 80058f4:	bf48      	it	mi
 80058f6:	b2ad      	uxthmi	r5, r5
 80058f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80058fa:	4853      	ldr	r0, [pc, #332]	@ (8005a48 <_printf_i+0x238>)
 80058fc:	6033      	str	r3, [r6, #0]
 80058fe:	bf14      	ite	ne
 8005900:	230a      	movne	r3, #10
 8005902:	2308      	moveq	r3, #8
 8005904:	2100      	movs	r1, #0
 8005906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800590a:	6866      	ldr	r6, [r4, #4]
 800590c:	60a6      	str	r6, [r4, #8]
 800590e:	2e00      	cmp	r6, #0
 8005910:	bfa2      	ittt	ge
 8005912:	6821      	ldrge	r1, [r4, #0]
 8005914:	f021 0104 	bicge.w	r1, r1, #4
 8005918:	6021      	strge	r1, [r4, #0]
 800591a:	b90d      	cbnz	r5, 8005920 <_printf_i+0x110>
 800591c:	2e00      	cmp	r6, #0
 800591e:	d04b      	beq.n	80059b8 <_printf_i+0x1a8>
 8005920:	4616      	mov	r6, r2
 8005922:	fbb5 f1f3 	udiv	r1, r5, r3
 8005926:	fb03 5711 	mls	r7, r3, r1, r5
 800592a:	5dc7      	ldrb	r7, [r0, r7]
 800592c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005930:	462f      	mov	r7, r5
 8005932:	42bb      	cmp	r3, r7
 8005934:	460d      	mov	r5, r1
 8005936:	d9f4      	bls.n	8005922 <_printf_i+0x112>
 8005938:	2b08      	cmp	r3, #8
 800593a:	d10b      	bne.n	8005954 <_printf_i+0x144>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	07df      	lsls	r7, r3, #31
 8005940:	d508      	bpl.n	8005954 <_printf_i+0x144>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	6861      	ldr	r1, [r4, #4]
 8005946:	4299      	cmp	r1, r3
 8005948:	bfde      	ittt	le
 800594a:	2330      	movle	r3, #48	@ 0x30
 800594c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005950:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005954:	1b92      	subs	r2, r2, r6
 8005956:	6122      	str	r2, [r4, #16]
 8005958:	f8cd a000 	str.w	sl, [sp]
 800595c:	464b      	mov	r3, r9
 800595e:	aa03      	add	r2, sp, #12
 8005960:	4621      	mov	r1, r4
 8005962:	4640      	mov	r0, r8
 8005964:	f7ff fee6 	bl	8005734 <_printf_common>
 8005968:	3001      	adds	r0, #1
 800596a:	d14a      	bne.n	8005a02 <_printf_i+0x1f2>
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	b004      	add	sp, #16
 8005972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f043 0320 	orr.w	r3, r3, #32
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	4833      	ldr	r0, [pc, #204]	@ (8005a4c <_printf_i+0x23c>)
 8005980:	2778      	movs	r7, #120	@ 0x78
 8005982:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	6831      	ldr	r1, [r6, #0]
 800598a:	061f      	lsls	r7, r3, #24
 800598c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005990:	d402      	bmi.n	8005998 <_printf_i+0x188>
 8005992:	065f      	lsls	r7, r3, #25
 8005994:	bf48      	it	mi
 8005996:	b2ad      	uxthmi	r5, r5
 8005998:	6031      	str	r1, [r6, #0]
 800599a:	07d9      	lsls	r1, r3, #31
 800599c:	bf44      	itt	mi
 800599e:	f043 0320 	orrmi.w	r3, r3, #32
 80059a2:	6023      	strmi	r3, [r4, #0]
 80059a4:	b11d      	cbz	r5, 80059ae <_printf_i+0x19e>
 80059a6:	2310      	movs	r3, #16
 80059a8:	e7ac      	b.n	8005904 <_printf_i+0xf4>
 80059aa:	4827      	ldr	r0, [pc, #156]	@ (8005a48 <_printf_i+0x238>)
 80059ac:	e7e9      	b.n	8005982 <_printf_i+0x172>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f023 0320 	bic.w	r3, r3, #32
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	e7f6      	b.n	80059a6 <_printf_i+0x196>
 80059b8:	4616      	mov	r6, r2
 80059ba:	e7bd      	b.n	8005938 <_printf_i+0x128>
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	6825      	ldr	r5, [r4, #0]
 80059c0:	6961      	ldr	r1, [r4, #20]
 80059c2:	1d18      	adds	r0, r3, #4
 80059c4:	6030      	str	r0, [r6, #0]
 80059c6:	062e      	lsls	r6, r5, #24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	d501      	bpl.n	80059d0 <_printf_i+0x1c0>
 80059cc:	6019      	str	r1, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <_printf_i+0x1c6>
 80059d0:	0668      	lsls	r0, r5, #25
 80059d2:	d5fb      	bpl.n	80059cc <_printf_i+0x1bc>
 80059d4:	8019      	strh	r1, [r3, #0]
 80059d6:	2300      	movs	r3, #0
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	4616      	mov	r6, r2
 80059dc:	e7bc      	b.n	8005958 <_printf_i+0x148>
 80059de:	6833      	ldr	r3, [r6, #0]
 80059e0:	1d1a      	adds	r2, r3, #4
 80059e2:	6032      	str	r2, [r6, #0]
 80059e4:	681e      	ldr	r6, [r3, #0]
 80059e6:	6862      	ldr	r2, [r4, #4]
 80059e8:	2100      	movs	r1, #0
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fa fbf0 	bl	80001d0 <memchr>
 80059f0:	b108      	cbz	r0, 80059f6 <_printf_i+0x1e6>
 80059f2:	1b80      	subs	r0, r0, r6
 80059f4:	6060      	str	r0, [r4, #4]
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	6123      	str	r3, [r4, #16]
 80059fa:	2300      	movs	r3, #0
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a00:	e7aa      	b.n	8005958 <_printf_i+0x148>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	4632      	mov	r2, r6
 8005a06:	4649      	mov	r1, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	47d0      	blx	sl
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d0ad      	beq.n	800596c <_printf_i+0x15c>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	079b      	lsls	r3, r3, #30
 8005a14:	d413      	bmi.n	8005a3e <_printf_i+0x22e>
 8005a16:	68e0      	ldr	r0, [r4, #12]
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	4298      	cmp	r0, r3
 8005a1c:	bfb8      	it	lt
 8005a1e:	4618      	movlt	r0, r3
 8005a20:	e7a6      	b.n	8005970 <_printf_i+0x160>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4632      	mov	r2, r6
 8005a26:	4649      	mov	r1, r9
 8005a28:	4640      	mov	r0, r8
 8005a2a:	47d0      	blx	sl
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d09d      	beq.n	800596c <_printf_i+0x15c>
 8005a30:	3501      	adds	r5, #1
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	9903      	ldr	r1, [sp, #12]
 8005a36:	1a5b      	subs	r3, r3, r1
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dcf2      	bgt.n	8005a22 <_printf_i+0x212>
 8005a3c:	e7eb      	b.n	8005a16 <_printf_i+0x206>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	f104 0619 	add.w	r6, r4, #25
 8005a44:	e7f5      	b.n	8005a32 <_printf_i+0x222>
 8005a46:	bf00      	nop
 8005a48:	08007b52 	.word	0x08007b52
 8005a4c:	08007b63 	.word	0x08007b63

08005a50 <std>:
 8005a50:	2300      	movs	r3, #0
 8005a52:	b510      	push	{r4, lr}
 8005a54:	4604      	mov	r4, r0
 8005a56:	e9c0 3300 	strd	r3, r3, [r0]
 8005a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a5e:	6083      	str	r3, [r0, #8]
 8005a60:	8181      	strh	r1, [r0, #12]
 8005a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a64:	81c2      	strh	r2, [r0, #14]
 8005a66:	6183      	str	r3, [r0, #24]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	305c      	adds	r0, #92	@ 0x5c
 8005a6e:	f000 f906 	bl	8005c7e <memset>
 8005a72:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa8 <std+0x58>)
 8005a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a76:	4b0d      	ldr	r3, [pc, #52]	@ (8005aac <std+0x5c>)
 8005a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <std+0x60>)
 8005a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <std+0x64>)
 8005a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <std+0x68>)
 8005a84:	6224      	str	r4, [r4, #32]
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d006      	beq.n	8005a98 <std+0x48>
 8005a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a8e:	4294      	cmp	r4, r2
 8005a90:	d002      	beq.n	8005a98 <std+0x48>
 8005a92:	33d0      	adds	r3, #208	@ 0xd0
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d105      	bne.n	8005aa4 <std+0x54>
 8005a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	f000 b96a 	b.w	8005d78 <__retarget_lock_init_recursive>
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08005bf9 	.word	0x08005bf9
 8005aac:	08005c1b 	.word	0x08005c1b
 8005ab0:	08005c53 	.word	0x08005c53
 8005ab4:	08005c77 	.word	0x08005c77
 8005ab8:	20000338 	.word	0x20000338

08005abc <stdio_exit_handler>:
 8005abc:	4a02      	ldr	r2, [pc, #8]	@ (8005ac8 <stdio_exit_handler+0xc>)
 8005abe:	4903      	ldr	r1, [pc, #12]	@ (8005acc <stdio_exit_handler+0x10>)
 8005ac0:	4803      	ldr	r0, [pc, #12]	@ (8005ad0 <stdio_exit_handler+0x14>)
 8005ac2:	f000 b869 	b.w	8005b98 <_fwalk_sglue>
 8005ac6:	bf00      	nop
 8005ac8:	2000000c 	.word	0x2000000c
 8005acc:	080076a9 	.word	0x080076a9
 8005ad0:	2000001c 	.word	0x2000001c

08005ad4 <cleanup_stdio>:
 8005ad4:	6841      	ldr	r1, [r0, #4]
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b08 <cleanup_stdio+0x34>)
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	b510      	push	{r4, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	d001      	beq.n	8005ae4 <cleanup_stdio+0x10>
 8005ae0:	f001 fde2 	bl	80076a8 <_fflush_r>
 8005ae4:	68a1      	ldr	r1, [r4, #8]
 8005ae6:	4b09      	ldr	r3, [pc, #36]	@ (8005b0c <cleanup_stdio+0x38>)
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	d002      	beq.n	8005af2 <cleanup_stdio+0x1e>
 8005aec:	4620      	mov	r0, r4
 8005aee:	f001 fddb 	bl	80076a8 <_fflush_r>
 8005af2:	68e1      	ldr	r1, [r4, #12]
 8005af4:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <cleanup_stdio+0x3c>)
 8005af6:	4299      	cmp	r1, r3
 8005af8:	d004      	beq.n	8005b04 <cleanup_stdio+0x30>
 8005afa:	4620      	mov	r0, r4
 8005afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b00:	f001 bdd2 	b.w	80076a8 <_fflush_r>
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	bf00      	nop
 8005b08:	20000338 	.word	0x20000338
 8005b0c:	200003a0 	.word	0x200003a0
 8005b10:	20000408 	.word	0x20000408

08005b14 <global_stdio_init.part.0>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <global_stdio_init.part.0+0x30>)
 8005b18:	4c0b      	ldr	r4, [pc, #44]	@ (8005b48 <global_stdio_init.part.0+0x34>)
 8005b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b4c <global_stdio_init.part.0+0x38>)
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	4620      	mov	r0, r4
 8005b20:	2200      	movs	r2, #0
 8005b22:	2104      	movs	r1, #4
 8005b24:	f7ff ff94 	bl	8005a50 <std>
 8005b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	2109      	movs	r1, #9
 8005b30:	f7ff ff8e 	bl	8005a50 <std>
 8005b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b38:	2202      	movs	r2, #2
 8005b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3e:	2112      	movs	r1, #18
 8005b40:	f7ff bf86 	b.w	8005a50 <std>
 8005b44:	20000470 	.word	0x20000470
 8005b48:	20000338 	.word	0x20000338
 8005b4c:	08005abd 	.word	0x08005abd

08005b50 <__sfp_lock_acquire>:
 8005b50:	4801      	ldr	r0, [pc, #4]	@ (8005b58 <__sfp_lock_acquire+0x8>)
 8005b52:	f000 b912 	b.w	8005d7a <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	20000479 	.word	0x20000479

08005b5c <__sfp_lock_release>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	@ (8005b64 <__sfp_lock_release+0x8>)
 8005b5e:	f000 b90d 	b.w	8005d7c <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	20000479 	.word	0x20000479

08005b68 <__sinit>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	f7ff fff0 	bl	8005b50 <__sfp_lock_acquire>
 8005b70:	6a23      	ldr	r3, [r4, #32]
 8005b72:	b11b      	cbz	r3, 8005b7c <__sinit+0x14>
 8005b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b78:	f7ff bff0 	b.w	8005b5c <__sfp_lock_release>
 8005b7c:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <__sinit+0x28>)
 8005b7e:	6223      	str	r3, [r4, #32]
 8005b80:	4b04      	ldr	r3, [pc, #16]	@ (8005b94 <__sinit+0x2c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f5      	bne.n	8005b74 <__sinit+0xc>
 8005b88:	f7ff ffc4 	bl	8005b14 <global_stdio_init.part.0>
 8005b8c:	e7f2      	b.n	8005b74 <__sinit+0xc>
 8005b8e:	bf00      	nop
 8005b90:	08005ad5 	.word	0x08005ad5
 8005b94:	20000470 	.word	0x20000470

08005b98 <_fwalk_sglue>:
 8005b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	4688      	mov	r8, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bac:	d505      	bpl.n	8005bba <_fwalk_sglue+0x22>
 8005bae:	6824      	ldr	r4, [r4, #0]
 8005bb0:	2c00      	cmp	r4, #0
 8005bb2:	d1f7      	bne.n	8005ba4 <_fwalk_sglue+0xc>
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bba:	89ab      	ldrh	r3, [r5, #12]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d907      	bls.n	8005bd0 <_fwalk_sglue+0x38>
 8005bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	d003      	beq.n	8005bd0 <_fwalk_sglue+0x38>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4638      	mov	r0, r7
 8005bcc:	47c0      	blx	r8
 8005bce:	4306      	orrs	r6, r0
 8005bd0:	3568      	adds	r5, #104	@ 0x68
 8005bd2:	e7e9      	b.n	8005ba8 <_fwalk_sglue+0x10>

08005bd4 <iprintf>:
 8005bd4:	b40f      	push	{r0, r1, r2, r3}
 8005bd6:	b507      	push	{r0, r1, r2, lr}
 8005bd8:	4906      	ldr	r1, [pc, #24]	@ (8005bf4 <iprintf+0x20>)
 8005bda:	ab04      	add	r3, sp, #16
 8005bdc:	6808      	ldr	r0, [r1, #0]
 8005bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be2:	6881      	ldr	r1, [r0, #8]
 8005be4:	9301      	str	r3, [sp, #4]
 8005be6:	f001 fbc3 	bl	8007370 <_vfiprintf_r>
 8005bea:	b003      	add	sp, #12
 8005bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bf0:	b004      	add	sp, #16
 8005bf2:	4770      	bx	lr
 8005bf4:	20000018 	.word	0x20000018

08005bf8 <__sread>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	f000 f86c 	bl	8005cdc <_read_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	bfab      	itete	ge
 8005c08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c0c:	181b      	addge	r3, r3, r0
 8005c0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c12:	bfac      	ite	ge
 8005c14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c16:	81a3      	strhlt	r3, [r4, #12]
 8005c18:	bd10      	pop	{r4, pc}

08005c1a <__swrite>:
 8005c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	461f      	mov	r7, r3
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	05db      	lsls	r3, r3, #23
 8005c24:	4605      	mov	r5, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4616      	mov	r6, r2
 8005c2a:	d505      	bpl.n	8005c38 <__swrite+0x1e>
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	2302      	movs	r3, #2
 8005c32:	2200      	movs	r2, #0
 8005c34:	f000 f840 	bl	8005cb8 <_lseek_r>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4e:	f000 b857 	b.w	8005d00 <_write_r>

08005c52 <__sseek>:
 8005c52:	b510      	push	{r4, lr}
 8005c54:	460c      	mov	r4, r1
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 f82d 	bl	8005cb8 <_lseek_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	bf15      	itete	ne
 8005c64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c6e:	81a3      	strheq	r3, [r4, #12]
 8005c70:	bf18      	it	ne
 8005c72:	81a3      	strhne	r3, [r4, #12]
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <__sclose>:
 8005c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7a:	f000 b80d 	b.w	8005c98 <_close_r>

08005c7e <memset>:
 8005c7e:	4402      	add	r2, r0
 8005c80:	4603      	mov	r3, r0
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d100      	bne.n	8005c88 <memset+0xa>
 8005c86:	4770      	bx	lr
 8005c88:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8c:	e7f9      	b.n	8005c82 <memset+0x4>
	...

08005c90 <_localeconv_r>:
 8005c90:	4800      	ldr	r0, [pc, #0]	@ (8005c94 <_localeconv_r+0x4>)
 8005c92:	4770      	bx	lr
 8005c94:	20000158 	.word	0x20000158

08005c98 <_close_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d06      	ldr	r5, [pc, #24]	@ (8005cb4 <_close_r+0x1c>)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f7fb fe6a 	bl	800197c <_close>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_close_r+0x1a>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_close_r+0x1a>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	20000474 	.word	0x20000474

08005cb8 <_lseek_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d07      	ldr	r5, [pc, #28]	@ (8005cd8 <_lseek_r+0x20>)
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f7fb fe7f 	bl	80019ca <_lseek>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_lseek_r+0x1e>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_lseek_r+0x1e>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	20000474 	.word	0x20000474

08005cdc <_read_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d07      	ldr	r5, [pc, #28]	@ (8005cfc <_read_r+0x20>)
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	602a      	str	r2, [r5, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f7fb fe0d 	bl	800190a <_read>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_read_r+0x1e>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_read_r+0x1e>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000474 	.word	0x20000474

08005d00 <_write_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	@ (8005d20 <_write_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fb fe18 	bl	8001944 <_write>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_write_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_write_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20000474 	.word	0x20000474

08005d24 <__errno>:
 8005d24:	4b01      	ldr	r3, [pc, #4]	@ (8005d2c <__errno+0x8>)
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000018 	.word	0x20000018

08005d30 <__libc_init_array>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	4d0d      	ldr	r5, [pc, #52]	@ (8005d68 <__libc_init_array+0x38>)
 8005d34:	4c0d      	ldr	r4, [pc, #52]	@ (8005d6c <__libc_init_array+0x3c>)
 8005d36:	1b64      	subs	r4, r4, r5
 8005d38:	10a4      	asrs	r4, r4, #2
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	42a6      	cmp	r6, r4
 8005d3e:	d109      	bne.n	8005d54 <__libc_init_array+0x24>
 8005d40:	4d0b      	ldr	r5, [pc, #44]	@ (8005d70 <__libc_init_array+0x40>)
 8005d42:	4c0c      	ldr	r4, [pc, #48]	@ (8005d74 <__libc_init_array+0x44>)
 8005d44:	f001 febe 	bl	8007ac4 <_init>
 8005d48:	1b64      	subs	r4, r4, r5
 8005d4a:	10a4      	asrs	r4, r4, #2
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	42a6      	cmp	r6, r4
 8005d50:	d105      	bne.n	8005d5e <__libc_init_array+0x2e>
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d58:	4798      	blx	r3
 8005d5a:	3601      	adds	r6, #1
 8005d5c:	e7ee      	b.n	8005d3c <__libc_init_array+0xc>
 8005d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d62:	4798      	blx	r3
 8005d64:	3601      	adds	r6, #1
 8005d66:	e7f2      	b.n	8005d4e <__libc_init_array+0x1e>
 8005d68:	08007eb8 	.word	0x08007eb8
 8005d6c:	08007eb8 	.word	0x08007eb8
 8005d70:	08007eb8 	.word	0x08007eb8
 8005d74:	08007ebc 	.word	0x08007ebc

08005d78 <__retarget_lock_init_recursive>:
 8005d78:	4770      	bx	lr

08005d7a <__retarget_lock_acquire_recursive>:
 8005d7a:	4770      	bx	lr

08005d7c <__retarget_lock_release_recursive>:
 8005d7c:	4770      	bx	lr

08005d7e <quorem>:
 8005d7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d82:	6903      	ldr	r3, [r0, #16]
 8005d84:	690c      	ldr	r4, [r1, #16]
 8005d86:	42a3      	cmp	r3, r4
 8005d88:	4607      	mov	r7, r0
 8005d8a:	db7e      	blt.n	8005e8a <quorem+0x10c>
 8005d8c:	3c01      	subs	r4, #1
 8005d8e:	f101 0814 	add.w	r8, r1, #20
 8005d92:	00a3      	lsls	r3, r4, #2
 8005d94:	f100 0514 	add.w	r5, r0, #20
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005da8:	3301      	adds	r3, #1
 8005daa:	429a      	cmp	r2, r3
 8005dac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005db0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005db4:	d32e      	bcc.n	8005e14 <quorem+0x96>
 8005db6:	f04f 0a00 	mov.w	sl, #0
 8005dba:	46c4      	mov	ip, r8
 8005dbc:	46ae      	mov	lr, r5
 8005dbe:	46d3      	mov	fp, sl
 8005dc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005dc4:	b298      	uxth	r0, r3
 8005dc6:	fb06 a000 	mla	r0, r6, r0, sl
 8005dca:	0c02      	lsrs	r2, r0, #16
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	fb06 2303 	mla	r3, r6, r3, r2
 8005dd2:	f8de 2000 	ldr.w	r2, [lr]
 8005dd6:	b280      	uxth	r0, r0
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	1a12      	subs	r2, r2, r0
 8005ddc:	445a      	add	r2, fp
 8005dde:	f8de 0000 	ldr.w	r0, [lr]
 8005de2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005dec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005df0:	b292      	uxth	r2, r2
 8005df2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005df6:	45e1      	cmp	r9, ip
 8005df8:	f84e 2b04 	str.w	r2, [lr], #4
 8005dfc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e00:	d2de      	bcs.n	8005dc0 <quorem+0x42>
 8005e02:	9b00      	ldr	r3, [sp, #0]
 8005e04:	58eb      	ldr	r3, [r5, r3]
 8005e06:	b92b      	cbnz	r3, 8005e14 <quorem+0x96>
 8005e08:	9b01      	ldr	r3, [sp, #4]
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	429d      	cmp	r5, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	d32f      	bcc.n	8005e72 <quorem+0xf4>
 8005e12:	613c      	str	r4, [r7, #16]
 8005e14:	4638      	mov	r0, r7
 8005e16:	f001 f979 	bl	800710c <__mcmp>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	db25      	blt.n	8005e6a <quorem+0xec>
 8005e1e:	4629      	mov	r1, r5
 8005e20:	2000      	movs	r0, #0
 8005e22:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e26:	f8d1 c000 	ldr.w	ip, [r1]
 8005e2a:	fa1f fe82 	uxth.w	lr, r2
 8005e2e:	fa1f f38c 	uxth.w	r3, ip
 8005e32:	eba3 030e 	sub.w	r3, r3, lr
 8005e36:	4403      	add	r3, r0
 8005e38:	0c12      	lsrs	r2, r2, #16
 8005e3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e48:	45c1      	cmp	r9, r8
 8005e4a:	f841 3b04 	str.w	r3, [r1], #4
 8005e4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e52:	d2e6      	bcs.n	8005e22 <quorem+0xa4>
 8005e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e5c:	b922      	cbnz	r2, 8005e68 <quorem+0xea>
 8005e5e:	3b04      	subs	r3, #4
 8005e60:	429d      	cmp	r5, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	d30b      	bcc.n	8005e7e <quorem+0x100>
 8005e66:	613c      	str	r4, [r7, #16]
 8005e68:	3601      	adds	r6, #1
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	b003      	add	sp, #12
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d1cb      	bne.n	8005e12 <quorem+0x94>
 8005e7a:	3c01      	subs	r4, #1
 8005e7c:	e7c6      	b.n	8005e0c <quorem+0x8e>
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	d1ef      	bne.n	8005e66 <quorem+0xe8>
 8005e86:	3c01      	subs	r4, #1
 8005e88:	e7ea      	b.n	8005e60 <quorem+0xe2>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e7ee      	b.n	8005e6c <quorem+0xee>
	...

08005e90 <_dtoa_r>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	69c7      	ldr	r7, [r0, #28]
 8005e96:	b099      	sub	sp, #100	@ 0x64
 8005e98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e9c:	ec55 4b10 	vmov	r4, r5, d0
 8005ea0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005ea2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ea4:	4683      	mov	fp, r0
 8005ea6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ea8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005eaa:	b97f      	cbnz	r7, 8005ecc <_dtoa_r+0x3c>
 8005eac:	2010      	movs	r0, #16
 8005eae:	f000 fdfd 	bl	8006aac <malloc>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005eb8:	b920      	cbnz	r0, 8005ec4 <_dtoa_r+0x34>
 8005eba:	4ba7      	ldr	r3, [pc, #668]	@ (8006158 <_dtoa_r+0x2c8>)
 8005ebc:	21ef      	movs	r1, #239	@ 0xef
 8005ebe:	48a7      	ldr	r0, [pc, #668]	@ (800615c <_dtoa_r+0x2cc>)
 8005ec0:	f001 fccc 	bl	800785c <__assert_func>
 8005ec4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ec8:	6007      	str	r7, [r0, #0]
 8005eca:	60c7      	str	r7, [r0, #12]
 8005ecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ed0:	6819      	ldr	r1, [r3, #0]
 8005ed2:	b159      	cbz	r1, 8005eec <_dtoa_r+0x5c>
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	604a      	str	r2, [r1, #4]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4093      	lsls	r3, r2
 8005edc:	608b      	str	r3, [r1, #8]
 8005ede:	4658      	mov	r0, fp
 8005ee0:	f000 feda 	bl	8006c98 <_Bfree>
 8005ee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	1e2b      	subs	r3, r5, #0
 8005eee:	bfb9      	ittee	lt
 8005ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ef4:	9303      	strlt	r3, [sp, #12]
 8005ef6:	2300      	movge	r3, #0
 8005ef8:	6033      	strge	r3, [r6, #0]
 8005efa:	9f03      	ldr	r7, [sp, #12]
 8005efc:	4b98      	ldr	r3, [pc, #608]	@ (8006160 <_dtoa_r+0x2d0>)
 8005efe:	bfbc      	itt	lt
 8005f00:	2201      	movlt	r2, #1
 8005f02:	6032      	strlt	r2, [r6, #0]
 8005f04:	43bb      	bics	r3, r7
 8005f06:	d112      	bne.n	8005f2e <_dtoa_r+0x9e>
 8005f08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f14:	4323      	orrs	r3, r4
 8005f16:	f000 854d 	beq.w	80069b4 <_dtoa_r+0xb24>
 8005f1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006174 <_dtoa_r+0x2e4>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 854f 	beq.w	80069c4 <_dtoa_r+0xb34>
 8005f26:	f10a 0303 	add.w	r3, sl, #3
 8005f2a:	f000 bd49 	b.w	80069c0 <_dtoa_r+0xb30>
 8005f2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f32:	2200      	movs	r2, #0
 8005f34:	ec51 0b17 	vmov	r0, r1, d7
 8005f38:	2300      	movs	r3, #0
 8005f3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f3e:	f7fa fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f42:	4680      	mov	r8, r0
 8005f44:	b158      	cbz	r0, 8005f5e <_dtoa_r+0xce>
 8005f46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f48:	2301      	movs	r3, #1
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f4e:	b113      	cbz	r3, 8005f56 <_dtoa_r+0xc6>
 8005f50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f52:	4b84      	ldr	r3, [pc, #528]	@ (8006164 <_dtoa_r+0x2d4>)
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006178 <_dtoa_r+0x2e8>
 8005f5a:	f000 bd33 	b.w	80069c4 <_dtoa_r+0xb34>
 8005f5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f62:	aa16      	add	r2, sp, #88	@ 0x58
 8005f64:	a917      	add	r1, sp, #92	@ 0x5c
 8005f66:	4658      	mov	r0, fp
 8005f68:	f001 f980 	bl	800726c <__d2b>
 8005f6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f70:	4681      	mov	r9, r0
 8005f72:	2e00      	cmp	r6, #0
 8005f74:	d077      	beq.n	8006066 <_dtoa_r+0x1d6>
 8005f76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f90:	4619      	mov	r1, r3
 8005f92:	2200      	movs	r2, #0
 8005f94:	4b74      	ldr	r3, [pc, #464]	@ (8006168 <_dtoa_r+0x2d8>)
 8005f96:	f7fa f977 	bl	8000288 <__aeabi_dsub>
 8005f9a:	a369      	add	r3, pc, #420	@ (adr r3, 8006140 <_dtoa_r+0x2b0>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa fb2a 	bl	80005f8 <__aeabi_dmul>
 8005fa4:	a368      	add	r3, pc, #416	@ (adr r3, 8006148 <_dtoa_r+0x2b8>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f7fa f96f 	bl	800028c <__adddf3>
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	f7fa fab6 	bl	8000524 <__aeabi_i2d>
 8005fb8:	a365      	add	r3, pc, #404	@ (adr r3, 8006150 <_dtoa_r+0x2c0>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	f7fa f95f 	bl	800028c <__adddf3>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	f7fa fdc1 	bl	8000b58 <__aeabi_d2iz>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4607      	mov	r7, r0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	4620      	mov	r0, r4
 8005fde:	4629      	mov	r1, r5
 8005fe0:	f7fa fd7c 	bl	8000adc <__aeabi_dcmplt>
 8005fe4:	b140      	cbz	r0, 8005ff8 <_dtoa_r+0x168>
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	f7fa fa9c 	bl	8000524 <__aeabi_i2d>
 8005fec:	4622      	mov	r2, r4
 8005fee:	462b      	mov	r3, r5
 8005ff0:	f7fa fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ff4:	b900      	cbnz	r0, 8005ff8 <_dtoa_r+0x168>
 8005ff6:	3f01      	subs	r7, #1
 8005ff8:	2f16      	cmp	r7, #22
 8005ffa:	d851      	bhi.n	80060a0 <_dtoa_r+0x210>
 8005ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800616c <_dtoa_r+0x2dc>)
 8005ffe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800600a:	f7fa fd67 	bl	8000adc <__aeabi_dcmplt>
 800600e:	2800      	cmp	r0, #0
 8006010:	d048      	beq.n	80060a4 <_dtoa_r+0x214>
 8006012:	3f01      	subs	r7, #1
 8006014:	2300      	movs	r3, #0
 8006016:	9312      	str	r3, [sp, #72]	@ 0x48
 8006018:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800601a:	1b9b      	subs	r3, r3, r6
 800601c:	1e5a      	subs	r2, r3, #1
 800601e:	bf44      	itt	mi
 8006020:	f1c3 0801 	rsbmi	r8, r3, #1
 8006024:	2300      	movmi	r3, #0
 8006026:	9208      	str	r2, [sp, #32]
 8006028:	bf54      	ite	pl
 800602a:	f04f 0800 	movpl.w	r8, #0
 800602e:	9308      	strmi	r3, [sp, #32]
 8006030:	2f00      	cmp	r7, #0
 8006032:	db39      	blt.n	80060a8 <_dtoa_r+0x218>
 8006034:	9b08      	ldr	r3, [sp, #32]
 8006036:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006038:	443b      	add	r3, r7
 800603a:	9308      	str	r3, [sp, #32]
 800603c:	2300      	movs	r3, #0
 800603e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006042:	2b09      	cmp	r3, #9
 8006044:	d864      	bhi.n	8006110 <_dtoa_r+0x280>
 8006046:	2b05      	cmp	r3, #5
 8006048:	bfc4      	itt	gt
 800604a:	3b04      	subgt	r3, #4
 800604c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800604e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006050:	f1a3 0302 	sub.w	r3, r3, #2
 8006054:	bfcc      	ite	gt
 8006056:	2400      	movgt	r4, #0
 8006058:	2401      	movle	r4, #1
 800605a:	2b03      	cmp	r3, #3
 800605c:	d863      	bhi.n	8006126 <_dtoa_r+0x296>
 800605e:	e8df f003 	tbb	[pc, r3]
 8006062:	372a      	.short	0x372a
 8006064:	5535      	.short	0x5535
 8006066:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800606a:	441e      	add	r6, r3
 800606c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006070:	2b20      	cmp	r3, #32
 8006072:	bfc1      	itttt	gt
 8006074:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006078:	409f      	lslgt	r7, r3
 800607a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800607e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006082:	bfd6      	itet	le
 8006084:	f1c3 0320 	rsble	r3, r3, #32
 8006088:	ea47 0003 	orrgt.w	r0, r7, r3
 800608c:	fa04 f003 	lslle.w	r0, r4, r3
 8006090:	f7fa fa38 	bl	8000504 <__aeabi_ui2d>
 8006094:	2201      	movs	r2, #1
 8006096:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800609a:	3e01      	subs	r6, #1
 800609c:	9214      	str	r2, [sp, #80]	@ 0x50
 800609e:	e777      	b.n	8005f90 <_dtoa_r+0x100>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e7b8      	b.n	8006016 <_dtoa_r+0x186>
 80060a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80060a6:	e7b7      	b.n	8006018 <_dtoa_r+0x188>
 80060a8:	427b      	negs	r3, r7
 80060aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80060ac:	2300      	movs	r3, #0
 80060ae:	eba8 0807 	sub.w	r8, r8, r7
 80060b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060b4:	e7c4      	b.n	8006040 <_dtoa_r+0x1b0>
 80060b6:	2300      	movs	r3, #0
 80060b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dc35      	bgt.n	800612c <_dtoa_r+0x29c>
 80060c0:	2301      	movs	r3, #1
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	9307      	str	r3, [sp, #28]
 80060c6:	461a      	mov	r2, r3
 80060c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060ca:	e00b      	b.n	80060e4 <_dtoa_r+0x254>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e7f3      	b.n	80060b8 <_dtoa_r+0x228>
 80060d0:	2300      	movs	r3, #0
 80060d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	2b01      	cmp	r3, #1
 80060de:	9307      	str	r3, [sp, #28]
 80060e0:	bfb8      	it	lt
 80060e2:	2301      	movlt	r3, #1
 80060e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80060e8:	2100      	movs	r1, #0
 80060ea:	2204      	movs	r2, #4
 80060ec:	f102 0514 	add.w	r5, r2, #20
 80060f0:	429d      	cmp	r5, r3
 80060f2:	d91f      	bls.n	8006134 <_dtoa_r+0x2a4>
 80060f4:	6041      	str	r1, [r0, #4]
 80060f6:	4658      	mov	r0, fp
 80060f8:	f000 fd8e 	bl	8006c18 <_Balloc>
 80060fc:	4682      	mov	sl, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	d13c      	bne.n	800617c <_dtoa_r+0x2ec>
 8006102:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <_dtoa_r+0x2e0>)
 8006104:	4602      	mov	r2, r0
 8006106:	f240 11af 	movw	r1, #431	@ 0x1af
 800610a:	e6d8      	b.n	8005ebe <_dtoa_r+0x2e>
 800610c:	2301      	movs	r3, #1
 800610e:	e7e0      	b.n	80060d2 <_dtoa_r+0x242>
 8006110:	2401      	movs	r4, #1
 8006112:	2300      	movs	r3, #0
 8006114:	9309      	str	r3, [sp, #36]	@ 0x24
 8006116:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	2200      	movs	r2, #0
 8006122:	2312      	movs	r3, #18
 8006124:	e7d0      	b.n	80060c8 <_dtoa_r+0x238>
 8006126:	2301      	movs	r3, #1
 8006128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800612a:	e7f5      	b.n	8006118 <_dtoa_r+0x288>
 800612c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	e7d7      	b.n	80060e4 <_dtoa_r+0x254>
 8006134:	3101      	adds	r1, #1
 8006136:	0052      	lsls	r2, r2, #1
 8006138:	e7d8      	b.n	80060ec <_dtoa_r+0x25c>
 800613a:	bf00      	nop
 800613c:	f3af 8000 	nop.w
 8006140:	636f4361 	.word	0x636f4361
 8006144:	3fd287a7 	.word	0x3fd287a7
 8006148:	8b60c8b3 	.word	0x8b60c8b3
 800614c:	3fc68a28 	.word	0x3fc68a28
 8006150:	509f79fb 	.word	0x509f79fb
 8006154:	3fd34413 	.word	0x3fd34413
 8006158:	08007b81 	.word	0x08007b81
 800615c:	08007b98 	.word	0x08007b98
 8006160:	7ff00000 	.word	0x7ff00000
 8006164:	08007b51 	.word	0x08007b51
 8006168:	3ff80000 	.word	0x3ff80000
 800616c:	08007c90 	.word	0x08007c90
 8006170:	08007bf0 	.word	0x08007bf0
 8006174:	08007b7d 	.word	0x08007b7d
 8006178:	08007b50 	.word	0x08007b50
 800617c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006180:	6018      	str	r0, [r3, #0]
 8006182:	9b07      	ldr	r3, [sp, #28]
 8006184:	2b0e      	cmp	r3, #14
 8006186:	f200 80a4 	bhi.w	80062d2 <_dtoa_r+0x442>
 800618a:	2c00      	cmp	r4, #0
 800618c:	f000 80a1 	beq.w	80062d2 <_dtoa_r+0x442>
 8006190:	2f00      	cmp	r7, #0
 8006192:	dd33      	ble.n	80061fc <_dtoa_r+0x36c>
 8006194:	4bad      	ldr	r3, [pc, #692]	@ (800644c <_dtoa_r+0x5bc>)
 8006196:	f007 020f 	and.w	r2, r7, #15
 800619a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800619e:	ed93 7b00 	vldr	d7, [r3]
 80061a2:	05f8      	lsls	r0, r7, #23
 80061a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061ac:	d516      	bpl.n	80061dc <_dtoa_r+0x34c>
 80061ae:	4ba8      	ldr	r3, [pc, #672]	@ (8006450 <_dtoa_r+0x5c0>)
 80061b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061b8:	f7fa fb48 	bl	800084c <__aeabi_ddiv>
 80061bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c0:	f004 040f 	and.w	r4, r4, #15
 80061c4:	2603      	movs	r6, #3
 80061c6:	4da2      	ldr	r5, [pc, #648]	@ (8006450 <_dtoa_r+0x5c0>)
 80061c8:	b954      	cbnz	r4, 80061e0 <_dtoa_r+0x350>
 80061ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d2:	f7fa fb3b 	bl	800084c <__aeabi_ddiv>
 80061d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061da:	e028      	b.n	800622e <_dtoa_r+0x39e>
 80061dc:	2602      	movs	r6, #2
 80061de:	e7f2      	b.n	80061c6 <_dtoa_r+0x336>
 80061e0:	07e1      	lsls	r1, r4, #31
 80061e2:	d508      	bpl.n	80061f6 <_dtoa_r+0x366>
 80061e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061ec:	f7fa fa04 	bl	80005f8 <__aeabi_dmul>
 80061f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061f4:	3601      	adds	r6, #1
 80061f6:	1064      	asrs	r4, r4, #1
 80061f8:	3508      	adds	r5, #8
 80061fa:	e7e5      	b.n	80061c8 <_dtoa_r+0x338>
 80061fc:	f000 80d2 	beq.w	80063a4 <_dtoa_r+0x514>
 8006200:	427c      	negs	r4, r7
 8006202:	4b92      	ldr	r3, [pc, #584]	@ (800644c <_dtoa_r+0x5bc>)
 8006204:	4d92      	ldr	r5, [pc, #584]	@ (8006450 <_dtoa_r+0x5c0>)
 8006206:	f004 020f 	and.w	r2, r4, #15
 800620a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006216:	f7fa f9ef 	bl	80005f8 <__aeabi_dmul>
 800621a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800621e:	1124      	asrs	r4, r4, #4
 8006220:	2300      	movs	r3, #0
 8006222:	2602      	movs	r6, #2
 8006224:	2c00      	cmp	r4, #0
 8006226:	f040 80b2 	bne.w	800638e <_dtoa_r+0x4fe>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1d3      	bne.n	80061d6 <_dtoa_r+0x346>
 800622e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006230:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80b7 	beq.w	80063a8 <_dtoa_r+0x518>
 800623a:	4b86      	ldr	r3, [pc, #536]	@ (8006454 <_dtoa_r+0x5c4>)
 800623c:	2200      	movs	r2, #0
 800623e:	4620      	mov	r0, r4
 8006240:	4629      	mov	r1, r5
 8006242:	f7fa fc4b 	bl	8000adc <__aeabi_dcmplt>
 8006246:	2800      	cmp	r0, #0
 8006248:	f000 80ae 	beq.w	80063a8 <_dtoa_r+0x518>
 800624c:	9b07      	ldr	r3, [sp, #28]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80aa 	beq.w	80063a8 <_dtoa_r+0x518>
 8006254:	9b00      	ldr	r3, [sp, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	dd37      	ble.n	80062ca <_dtoa_r+0x43a>
 800625a:	1e7b      	subs	r3, r7, #1
 800625c:	9304      	str	r3, [sp, #16]
 800625e:	4620      	mov	r0, r4
 8006260:	4b7d      	ldr	r3, [pc, #500]	@ (8006458 <_dtoa_r+0x5c8>)
 8006262:	2200      	movs	r2, #0
 8006264:	4629      	mov	r1, r5
 8006266:	f7fa f9c7 	bl	80005f8 <__aeabi_dmul>
 800626a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626e:	9c00      	ldr	r4, [sp, #0]
 8006270:	3601      	adds	r6, #1
 8006272:	4630      	mov	r0, r6
 8006274:	f7fa f956 	bl	8000524 <__aeabi_i2d>
 8006278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800627c:	f7fa f9bc 	bl	80005f8 <__aeabi_dmul>
 8006280:	4b76      	ldr	r3, [pc, #472]	@ (800645c <_dtoa_r+0x5cc>)
 8006282:	2200      	movs	r2, #0
 8006284:	f7fa f802 	bl	800028c <__adddf3>
 8006288:	4605      	mov	r5, r0
 800628a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800628e:	2c00      	cmp	r4, #0
 8006290:	f040 808d 	bne.w	80063ae <_dtoa_r+0x51e>
 8006294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006298:	4b71      	ldr	r3, [pc, #452]	@ (8006460 <_dtoa_r+0x5d0>)
 800629a:	2200      	movs	r2, #0
 800629c:	f7f9 fff4 	bl	8000288 <__aeabi_dsub>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062a8:	462a      	mov	r2, r5
 80062aa:	4633      	mov	r3, r6
 80062ac:	f7fa fc34 	bl	8000b18 <__aeabi_dcmpgt>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	f040 828b 	bne.w	80067cc <_dtoa_r+0x93c>
 80062b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ba:	462a      	mov	r2, r5
 80062bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062c0:	f7fa fc0c 	bl	8000adc <__aeabi_dcmplt>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	f040 8128 	bne.w	800651a <_dtoa_r+0x68a>
 80062ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80062d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f2c0 815a 	blt.w	800658e <_dtoa_r+0x6fe>
 80062da:	2f0e      	cmp	r7, #14
 80062dc:	f300 8157 	bgt.w	800658e <_dtoa_r+0x6fe>
 80062e0:	4b5a      	ldr	r3, [pc, #360]	@ (800644c <_dtoa_r+0x5bc>)
 80062e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062e6:	ed93 7b00 	vldr	d7, [r3]
 80062ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	ed8d 7b00 	vstr	d7, [sp]
 80062f2:	da03      	bge.n	80062fc <_dtoa_r+0x46c>
 80062f4:	9b07      	ldr	r3, [sp, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f340 8101 	ble.w	80064fe <_dtoa_r+0x66e>
 80062fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006300:	4656      	mov	r6, sl
 8006302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	f7fa fa9f 	bl	800084c <__aeabi_ddiv>
 800630e:	f7fa fc23 	bl	8000b58 <__aeabi_d2iz>
 8006312:	4680      	mov	r8, r0
 8006314:	f7fa f906 	bl	8000524 <__aeabi_i2d>
 8006318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800631c:	f7fa f96c 	bl	80005f8 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800632c:	f7f9 ffac 	bl	8000288 <__aeabi_dsub>
 8006330:	f806 4b01 	strb.w	r4, [r6], #1
 8006334:	9d07      	ldr	r5, [sp, #28]
 8006336:	eba6 040a 	sub.w	r4, r6, sl
 800633a:	42a5      	cmp	r5, r4
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	f040 8117 	bne.w	8006572 <_dtoa_r+0x6e2>
 8006344:	f7f9 ffa2 	bl	800028c <__adddf3>
 8006348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800634c:	4604      	mov	r4, r0
 800634e:	460d      	mov	r5, r1
 8006350:	f7fa fbe2 	bl	8000b18 <__aeabi_dcmpgt>
 8006354:	2800      	cmp	r0, #0
 8006356:	f040 80f9 	bne.w	800654c <_dtoa_r+0x6bc>
 800635a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	f7fa fbb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006366:	b118      	cbz	r0, 8006370 <_dtoa_r+0x4e0>
 8006368:	f018 0f01 	tst.w	r8, #1
 800636c:	f040 80ee 	bne.w	800654c <_dtoa_r+0x6bc>
 8006370:	4649      	mov	r1, r9
 8006372:	4658      	mov	r0, fp
 8006374:	f000 fc90 	bl	8006c98 <_Bfree>
 8006378:	2300      	movs	r3, #0
 800637a:	7033      	strb	r3, [r6, #0]
 800637c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800637e:	3701      	adds	r7, #1
 8006380:	601f      	str	r7, [r3, #0]
 8006382:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 831d 	beq.w	80069c4 <_dtoa_r+0xb34>
 800638a:	601e      	str	r6, [r3, #0]
 800638c:	e31a      	b.n	80069c4 <_dtoa_r+0xb34>
 800638e:	07e2      	lsls	r2, r4, #31
 8006390:	d505      	bpl.n	800639e <_dtoa_r+0x50e>
 8006392:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006396:	f7fa f92f 	bl	80005f8 <__aeabi_dmul>
 800639a:	3601      	adds	r6, #1
 800639c:	2301      	movs	r3, #1
 800639e:	1064      	asrs	r4, r4, #1
 80063a0:	3508      	adds	r5, #8
 80063a2:	e73f      	b.n	8006224 <_dtoa_r+0x394>
 80063a4:	2602      	movs	r6, #2
 80063a6:	e742      	b.n	800622e <_dtoa_r+0x39e>
 80063a8:	9c07      	ldr	r4, [sp, #28]
 80063aa:	9704      	str	r7, [sp, #16]
 80063ac:	e761      	b.n	8006272 <_dtoa_r+0x3e2>
 80063ae:	4b27      	ldr	r3, [pc, #156]	@ (800644c <_dtoa_r+0x5bc>)
 80063b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063ba:	4454      	add	r4, sl
 80063bc:	2900      	cmp	r1, #0
 80063be:	d053      	beq.n	8006468 <_dtoa_r+0x5d8>
 80063c0:	4928      	ldr	r1, [pc, #160]	@ (8006464 <_dtoa_r+0x5d4>)
 80063c2:	2000      	movs	r0, #0
 80063c4:	f7fa fa42 	bl	800084c <__aeabi_ddiv>
 80063c8:	4633      	mov	r3, r6
 80063ca:	462a      	mov	r2, r5
 80063cc:	f7f9 ff5c 	bl	8000288 <__aeabi_dsub>
 80063d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063d4:	4656      	mov	r6, sl
 80063d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063da:	f7fa fbbd 	bl	8000b58 <__aeabi_d2iz>
 80063de:	4605      	mov	r5, r0
 80063e0:	f7fa f8a0 	bl	8000524 <__aeabi_i2d>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ec:	f7f9 ff4c 	bl	8000288 <__aeabi_dsub>
 80063f0:	3530      	adds	r5, #48	@ 0x30
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063fa:	f806 5b01 	strb.w	r5, [r6], #1
 80063fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006402:	f7fa fb6b 	bl	8000adc <__aeabi_dcmplt>
 8006406:	2800      	cmp	r0, #0
 8006408:	d171      	bne.n	80064ee <_dtoa_r+0x65e>
 800640a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800640e:	4911      	ldr	r1, [pc, #68]	@ (8006454 <_dtoa_r+0x5c4>)
 8006410:	2000      	movs	r0, #0
 8006412:	f7f9 ff39 	bl	8000288 <__aeabi_dsub>
 8006416:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800641a:	f7fa fb5f 	bl	8000adc <__aeabi_dcmplt>
 800641e:	2800      	cmp	r0, #0
 8006420:	f040 8095 	bne.w	800654e <_dtoa_r+0x6be>
 8006424:	42a6      	cmp	r6, r4
 8006426:	f43f af50 	beq.w	80062ca <_dtoa_r+0x43a>
 800642a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800642e:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <_dtoa_r+0x5c8>)
 8006430:	2200      	movs	r2, #0
 8006432:	f7fa f8e1 	bl	80005f8 <__aeabi_dmul>
 8006436:	4b08      	ldr	r3, [pc, #32]	@ (8006458 <_dtoa_r+0x5c8>)
 8006438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800643c:	2200      	movs	r2, #0
 800643e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006442:	f7fa f8d9 	bl	80005f8 <__aeabi_dmul>
 8006446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800644a:	e7c4      	b.n	80063d6 <_dtoa_r+0x546>
 800644c:	08007c90 	.word	0x08007c90
 8006450:	08007c68 	.word	0x08007c68
 8006454:	3ff00000 	.word	0x3ff00000
 8006458:	40240000 	.word	0x40240000
 800645c:	401c0000 	.word	0x401c0000
 8006460:	40140000 	.word	0x40140000
 8006464:	3fe00000 	.word	0x3fe00000
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	f7fa f8c4 	bl	80005f8 <__aeabi_dmul>
 8006470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006474:	9415      	str	r4, [sp, #84]	@ 0x54
 8006476:	4656      	mov	r6, sl
 8006478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800647c:	f7fa fb6c 	bl	8000b58 <__aeabi_d2iz>
 8006480:	4605      	mov	r5, r0
 8006482:	f7fa f84f 	bl	8000524 <__aeabi_i2d>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648e:	f7f9 fefb 	bl	8000288 <__aeabi_dsub>
 8006492:	3530      	adds	r5, #48	@ 0x30
 8006494:	f806 5b01 	strb.w	r5, [r6], #1
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	42a6      	cmp	r6, r4
 800649e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	d124      	bne.n	80064f2 <_dtoa_r+0x662>
 80064a8:	4bac      	ldr	r3, [pc, #688]	@ (800675c <_dtoa_r+0x8cc>)
 80064aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064ae:	f7f9 feed 	bl	800028c <__adddf3>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ba:	f7fa fb2d 	bl	8000b18 <__aeabi_dcmpgt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d145      	bne.n	800654e <_dtoa_r+0x6be>
 80064c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064c6:	49a5      	ldr	r1, [pc, #660]	@ (800675c <_dtoa_r+0x8cc>)
 80064c8:	2000      	movs	r0, #0
 80064ca:	f7f9 fedd 	bl	8000288 <__aeabi_dsub>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d6:	f7fa fb01 	bl	8000adc <__aeabi_dcmplt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	f43f aef5 	beq.w	80062ca <_dtoa_r+0x43a>
 80064e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80064e2:	1e73      	subs	r3, r6, #1
 80064e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80064e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064ea:	2b30      	cmp	r3, #48	@ 0x30
 80064ec:	d0f8      	beq.n	80064e0 <_dtoa_r+0x650>
 80064ee:	9f04      	ldr	r7, [sp, #16]
 80064f0:	e73e      	b.n	8006370 <_dtoa_r+0x4e0>
 80064f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006760 <_dtoa_r+0x8d0>)
 80064f4:	f7fa f880 	bl	80005f8 <__aeabi_dmul>
 80064f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064fc:	e7bc      	b.n	8006478 <_dtoa_r+0x5e8>
 80064fe:	d10c      	bne.n	800651a <_dtoa_r+0x68a>
 8006500:	4b98      	ldr	r3, [pc, #608]	@ (8006764 <_dtoa_r+0x8d4>)
 8006502:	2200      	movs	r2, #0
 8006504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006508:	f7fa f876 	bl	80005f8 <__aeabi_dmul>
 800650c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006510:	f7fa faf8 	bl	8000b04 <__aeabi_dcmpge>
 8006514:	2800      	cmp	r0, #0
 8006516:	f000 8157 	beq.w	80067c8 <_dtoa_r+0x938>
 800651a:	2400      	movs	r4, #0
 800651c:	4625      	mov	r5, r4
 800651e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006520:	43db      	mvns	r3, r3
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	4656      	mov	r6, sl
 8006526:	2700      	movs	r7, #0
 8006528:	4621      	mov	r1, r4
 800652a:	4658      	mov	r0, fp
 800652c:	f000 fbb4 	bl	8006c98 <_Bfree>
 8006530:	2d00      	cmp	r5, #0
 8006532:	d0dc      	beq.n	80064ee <_dtoa_r+0x65e>
 8006534:	b12f      	cbz	r7, 8006542 <_dtoa_r+0x6b2>
 8006536:	42af      	cmp	r7, r5
 8006538:	d003      	beq.n	8006542 <_dtoa_r+0x6b2>
 800653a:	4639      	mov	r1, r7
 800653c:	4658      	mov	r0, fp
 800653e:	f000 fbab 	bl	8006c98 <_Bfree>
 8006542:	4629      	mov	r1, r5
 8006544:	4658      	mov	r0, fp
 8006546:	f000 fba7 	bl	8006c98 <_Bfree>
 800654a:	e7d0      	b.n	80064ee <_dtoa_r+0x65e>
 800654c:	9704      	str	r7, [sp, #16]
 800654e:	4633      	mov	r3, r6
 8006550:	461e      	mov	r6, r3
 8006552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006556:	2a39      	cmp	r2, #57	@ 0x39
 8006558:	d107      	bne.n	800656a <_dtoa_r+0x6da>
 800655a:	459a      	cmp	sl, r3
 800655c:	d1f8      	bne.n	8006550 <_dtoa_r+0x6c0>
 800655e:	9a04      	ldr	r2, [sp, #16]
 8006560:	3201      	adds	r2, #1
 8006562:	9204      	str	r2, [sp, #16]
 8006564:	2230      	movs	r2, #48	@ 0x30
 8006566:	f88a 2000 	strb.w	r2, [sl]
 800656a:	781a      	ldrb	r2, [r3, #0]
 800656c:	3201      	adds	r2, #1
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	e7bd      	b.n	80064ee <_dtoa_r+0x65e>
 8006572:	4b7b      	ldr	r3, [pc, #492]	@ (8006760 <_dtoa_r+0x8d0>)
 8006574:	2200      	movs	r2, #0
 8006576:	f7fa f83f 	bl	80005f8 <__aeabi_dmul>
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	4604      	mov	r4, r0
 8006580:	460d      	mov	r5, r1
 8006582:	f7fa faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006586:	2800      	cmp	r0, #0
 8006588:	f43f aebb 	beq.w	8006302 <_dtoa_r+0x472>
 800658c:	e6f0      	b.n	8006370 <_dtoa_r+0x4e0>
 800658e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006590:	2a00      	cmp	r2, #0
 8006592:	f000 80db 	beq.w	800674c <_dtoa_r+0x8bc>
 8006596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006598:	2a01      	cmp	r2, #1
 800659a:	f300 80bf 	bgt.w	800671c <_dtoa_r+0x88c>
 800659e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	f000 80b7 	beq.w	8006714 <_dtoa_r+0x884>
 80065a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065ac:	4646      	mov	r6, r8
 80065ae:	9a08      	ldr	r2, [sp, #32]
 80065b0:	2101      	movs	r1, #1
 80065b2:	441a      	add	r2, r3
 80065b4:	4658      	mov	r0, fp
 80065b6:	4498      	add	r8, r3
 80065b8:	9208      	str	r2, [sp, #32]
 80065ba:	f000 fc21 	bl	8006e00 <__i2b>
 80065be:	4605      	mov	r5, r0
 80065c0:	b15e      	cbz	r6, 80065da <_dtoa_r+0x74a>
 80065c2:	9b08      	ldr	r3, [sp, #32]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dd08      	ble.n	80065da <_dtoa_r+0x74a>
 80065c8:	42b3      	cmp	r3, r6
 80065ca:	9a08      	ldr	r2, [sp, #32]
 80065cc:	bfa8      	it	ge
 80065ce:	4633      	movge	r3, r6
 80065d0:	eba8 0803 	sub.w	r8, r8, r3
 80065d4:	1af6      	subs	r6, r6, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	9308      	str	r3, [sp, #32]
 80065da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065dc:	b1f3      	cbz	r3, 800661c <_dtoa_r+0x78c>
 80065de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80b7 	beq.w	8006754 <_dtoa_r+0x8c4>
 80065e6:	b18c      	cbz	r4, 800660c <_dtoa_r+0x77c>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4622      	mov	r2, r4
 80065ec:	4658      	mov	r0, fp
 80065ee:	f000 fcc7 	bl	8006f80 <__pow5mult>
 80065f2:	464a      	mov	r2, r9
 80065f4:	4601      	mov	r1, r0
 80065f6:	4605      	mov	r5, r0
 80065f8:	4658      	mov	r0, fp
 80065fa:	f000 fc17 	bl	8006e2c <__multiply>
 80065fe:	4649      	mov	r1, r9
 8006600:	9004      	str	r0, [sp, #16]
 8006602:	4658      	mov	r0, fp
 8006604:	f000 fb48 	bl	8006c98 <_Bfree>
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	4699      	mov	r9, r3
 800660c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800660e:	1b1a      	subs	r2, r3, r4
 8006610:	d004      	beq.n	800661c <_dtoa_r+0x78c>
 8006612:	4649      	mov	r1, r9
 8006614:	4658      	mov	r0, fp
 8006616:	f000 fcb3 	bl	8006f80 <__pow5mult>
 800661a:	4681      	mov	r9, r0
 800661c:	2101      	movs	r1, #1
 800661e:	4658      	mov	r0, fp
 8006620:	f000 fbee 	bl	8006e00 <__i2b>
 8006624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006626:	4604      	mov	r4, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 81cf 	beq.w	80069cc <_dtoa_r+0xb3c>
 800662e:	461a      	mov	r2, r3
 8006630:	4601      	mov	r1, r0
 8006632:	4658      	mov	r0, fp
 8006634:	f000 fca4 	bl	8006f80 <__pow5mult>
 8006638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800663a:	2b01      	cmp	r3, #1
 800663c:	4604      	mov	r4, r0
 800663e:	f300 8095 	bgt.w	800676c <_dtoa_r+0x8dc>
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8087 	bne.w	8006758 <_dtoa_r+0x8c8>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 8089 	bne.w	8006768 <_dtoa_r+0x8d8>
 8006656:	9b03      	ldr	r3, [sp, #12]
 8006658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800665c:	0d1b      	lsrs	r3, r3, #20
 800665e:	051b      	lsls	r3, r3, #20
 8006660:	b12b      	cbz	r3, 800666e <_dtoa_r+0x7de>
 8006662:	9b08      	ldr	r3, [sp, #32]
 8006664:	3301      	adds	r3, #1
 8006666:	9308      	str	r3, [sp, #32]
 8006668:	f108 0801 	add.w	r8, r8, #1
 800666c:	2301      	movs	r3, #1
 800666e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 81b0 	beq.w	80069d8 <_dtoa_r+0xb48>
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800667e:	6918      	ldr	r0, [r3, #16]
 8006680:	f000 fb72 	bl	8006d68 <__hi0bits>
 8006684:	f1c0 0020 	rsb	r0, r0, #32
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	4418      	add	r0, r3
 800668c:	f010 001f 	ands.w	r0, r0, #31
 8006690:	d077      	beq.n	8006782 <_dtoa_r+0x8f2>
 8006692:	f1c0 0320 	rsb	r3, r0, #32
 8006696:	2b04      	cmp	r3, #4
 8006698:	dd6b      	ble.n	8006772 <_dtoa_r+0x8e2>
 800669a:	9b08      	ldr	r3, [sp, #32]
 800669c:	f1c0 001c 	rsb	r0, r0, #28
 80066a0:	4403      	add	r3, r0
 80066a2:	4480      	add	r8, r0
 80066a4:	4406      	add	r6, r0
 80066a6:	9308      	str	r3, [sp, #32]
 80066a8:	f1b8 0f00 	cmp.w	r8, #0
 80066ac:	dd05      	ble.n	80066ba <_dtoa_r+0x82a>
 80066ae:	4649      	mov	r1, r9
 80066b0:	4642      	mov	r2, r8
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 fcbe 	bl	8007034 <__lshift>
 80066b8:	4681      	mov	r9, r0
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dd05      	ble.n	80066cc <_dtoa_r+0x83c>
 80066c0:	4621      	mov	r1, r4
 80066c2:	461a      	mov	r2, r3
 80066c4:	4658      	mov	r0, fp
 80066c6:	f000 fcb5 	bl	8007034 <__lshift>
 80066ca:	4604      	mov	r4, r0
 80066cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d059      	beq.n	8006786 <_dtoa_r+0x8f6>
 80066d2:	4621      	mov	r1, r4
 80066d4:	4648      	mov	r0, r9
 80066d6:	f000 fd19 	bl	800710c <__mcmp>
 80066da:	2800      	cmp	r0, #0
 80066dc:	da53      	bge.n	8006786 <_dtoa_r+0x8f6>
 80066de:	1e7b      	subs	r3, r7, #1
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	4649      	mov	r1, r9
 80066e4:	2300      	movs	r3, #0
 80066e6:	220a      	movs	r2, #10
 80066e8:	4658      	mov	r0, fp
 80066ea:	f000 faf7 	bl	8006cdc <__multadd>
 80066ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066f0:	4681      	mov	r9, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8172 	beq.w	80069dc <_dtoa_r+0xb4c>
 80066f8:	2300      	movs	r3, #0
 80066fa:	4629      	mov	r1, r5
 80066fc:	220a      	movs	r2, #10
 80066fe:	4658      	mov	r0, fp
 8006700:	f000 faec 	bl	8006cdc <__multadd>
 8006704:	9b00      	ldr	r3, [sp, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	4605      	mov	r5, r0
 800670a:	dc67      	bgt.n	80067dc <_dtoa_r+0x94c>
 800670c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670e:	2b02      	cmp	r3, #2
 8006710:	dc41      	bgt.n	8006796 <_dtoa_r+0x906>
 8006712:	e063      	b.n	80067dc <_dtoa_r+0x94c>
 8006714:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006716:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800671a:	e746      	b.n	80065aa <_dtoa_r+0x71a>
 800671c:	9b07      	ldr	r3, [sp, #28]
 800671e:	1e5c      	subs	r4, r3, #1
 8006720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006722:	42a3      	cmp	r3, r4
 8006724:	bfbf      	itttt	lt
 8006726:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006728:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800672a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800672c:	1ae3      	sublt	r3, r4, r3
 800672e:	bfb4      	ite	lt
 8006730:	18d2      	addlt	r2, r2, r3
 8006732:	1b1c      	subge	r4, r3, r4
 8006734:	9b07      	ldr	r3, [sp, #28]
 8006736:	bfbc      	itt	lt
 8006738:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800673a:	2400      	movlt	r4, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfb5      	itete	lt
 8006740:	eba8 0603 	sublt.w	r6, r8, r3
 8006744:	9b07      	ldrge	r3, [sp, #28]
 8006746:	2300      	movlt	r3, #0
 8006748:	4646      	movge	r6, r8
 800674a:	e730      	b.n	80065ae <_dtoa_r+0x71e>
 800674c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800674e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006750:	4646      	mov	r6, r8
 8006752:	e735      	b.n	80065c0 <_dtoa_r+0x730>
 8006754:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006756:	e75c      	b.n	8006612 <_dtoa_r+0x782>
 8006758:	2300      	movs	r3, #0
 800675a:	e788      	b.n	800666e <_dtoa_r+0x7de>
 800675c:	3fe00000 	.word	0x3fe00000
 8006760:	40240000 	.word	0x40240000
 8006764:	40140000 	.word	0x40140000
 8006768:	9b02      	ldr	r3, [sp, #8]
 800676a:	e780      	b.n	800666e <_dtoa_r+0x7de>
 800676c:	2300      	movs	r3, #0
 800676e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006770:	e782      	b.n	8006678 <_dtoa_r+0x7e8>
 8006772:	d099      	beq.n	80066a8 <_dtoa_r+0x818>
 8006774:	9a08      	ldr	r2, [sp, #32]
 8006776:	331c      	adds	r3, #28
 8006778:	441a      	add	r2, r3
 800677a:	4498      	add	r8, r3
 800677c:	441e      	add	r6, r3
 800677e:	9208      	str	r2, [sp, #32]
 8006780:	e792      	b.n	80066a8 <_dtoa_r+0x818>
 8006782:	4603      	mov	r3, r0
 8006784:	e7f6      	b.n	8006774 <_dtoa_r+0x8e4>
 8006786:	9b07      	ldr	r3, [sp, #28]
 8006788:	9704      	str	r7, [sp, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	dc20      	bgt.n	80067d0 <_dtoa_r+0x940>
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006792:	2b02      	cmp	r3, #2
 8006794:	dd1e      	ble.n	80067d4 <_dtoa_r+0x944>
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f47f aec0 	bne.w	800651e <_dtoa_r+0x68e>
 800679e:	4621      	mov	r1, r4
 80067a0:	2205      	movs	r2, #5
 80067a2:	4658      	mov	r0, fp
 80067a4:	f000 fa9a 	bl	8006cdc <__multadd>
 80067a8:	4601      	mov	r1, r0
 80067aa:	4604      	mov	r4, r0
 80067ac:	4648      	mov	r0, r9
 80067ae:	f000 fcad 	bl	800710c <__mcmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f77f aeb3 	ble.w	800651e <_dtoa_r+0x68e>
 80067b8:	4656      	mov	r6, sl
 80067ba:	2331      	movs	r3, #49	@ 0x31
 80067bc:	f806 3b01 	strb.w	r3, [r6], #1
 80067c0:	9b04      	ldr	r3, [sp, #16]
 80067c2:	3301      	adds	r3, #1
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	e6ae      	b.n	8006526 <_dtoa_r+0x696>
 80067c8:	9c07      	ldr	r4, [sp, #28]
 80067ca:	9704      	str	r7, [sp, #16]
 80067cc:	4625      	mov	r5, r4
 80067ce:	e7f3      	b.n	80067b8 <_dtoa_r+0x928>
 80067d0:	9b07      	ldr	r3, [sp, #28]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8104 	beq.w	80069e4 <_dtoa_r+0xb54>
 80067dc:	2e00      	cmp	r6, #0
 80067de:	dd05      	ble.n	80067ec <_dtoa_r+0x95c>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4632      	mov	r2, r6
 80067e4:	4658      	mov	r0, fp
 80067e6:	f000 fc25 	bl	8007034 <__lshift>
 80067ea:	4605      	mov	r5, r0
 80067ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d05a      	beq.n	80068a8 <_dtoa_r+0xa18>
 80067f2:	6869      	ldr	r1, [r5, #4]
 80067f4:	4658      	mov	r0, fp
 80067f6:	f000 fa0f 	bl	8006c18 <_Balloc>
 80067fa:	4606      	mov	r6, r0
 80067fc:	b928      	cbnz	r0, 800680a <_dtoa_r+0x97a>
 80067fe:	4b84      	ldr	r3, [pc, #528]	@ (8006a10 <_dtoa_r+0xb80>)
 8006800:	4602      	mov	r2, r0
 8006802:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006806:	f7ff bb5a 	b.w	8005ebe <_dtoa_r+0x2e>
 800680a:	692a      	ldr	r2, [r5, #16]
 800680c:	3202      	adds	r2, #2
 800680e:	0092      	lsls	r2, r2, #2
 8006810:	f105 010c 	add.w	r1, r5, #12
 8006814:	300c      	adds	r0, #12
 8006816:	f001 f813 	bl	8007840 <memcpy>
 800681a:	2201      	movs	r2, #1
 800681c:	4631      	mov	r1, r6
 800681e:	4658      	mov	r0, fp
 8006820:	f000 fc08 	bl	8007034 <__lshift>
 8006824:	f10a 0301 	add.w	r3, sl, #1
 8006828:	9307      	str	r3, [sp, #28]
 800682a:	9b00      	ldr	r3, [sp, #0]
 800682c:	4453      	add	r3, sl
 800682e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006830:	9b02      	ldr	r3, [sp, #8]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	462f      	mov	r7, r5
 8006838:	930a      	str	r3, [sp, #40]	@ 0x28
 800683a:	4605      	mov	r5, r0
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	4621      	mov	r1, r4
 8006840:	3b01      	subs	r3, #1
 8006842:	4648      	mov	r0, r9
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	f7ff fa9a 	bl	8005d7e <quorem>
 800684a:	4639      	mov	r1, r7
 800684c:	9002      	str	r0, [sp, #8]
 800684e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006852:	4648      	mov	r0, r9
 8006854:	f000 fc5a 	bl	800710c <__mcmp>
 8006858:	462a      	mov	r2, r5
 800685a:	9008      	str	r0, [sp, #32]
 800685c:	4621      	mov	r1, r4
 800685e:	4658      	mov	r0, fp
 8006860:	f000 fc70 	bl	8007144 <__mdiff>
 8006864:	68c2      	ldr	r2, [r0, #12]
 8006866:	4606      	mov	r6, r0
 8006868:	bb02      	cbnz	r2, 80068ac <_dtoa_r+0xa1c>
 800686a:	4601      	mov	r1, r0
 800686c:	4648      	mov	r0, r9
 800686e:	f000 fc4d 	bl	800710c <__mcmp>
 8006872:	4602      	mov	r2, r0
 8006874:	4631      	mov	r1, r6
 8006876:	4658      	mov	r0, fp
 8006878:	920e      	str	r2, [sp, #56]	@ 0x38
 800687a:	f000 fa0d 	bl	8006c98 <_Bfree>
 800687e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006882:	9e07      	ldr	r6, [sp, #28]
 8006884:	ea43 0102 	orr.w	r1, r3, r2
 8006888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800688a:	4319      	orrs	r1, r3
 800688c:	d110      	bne.n	80068b0 <_dtoa_r+0xa20>
 800688e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006892:	d029      	beq.n	80068e8 <_dtoa_r+0xa58>
 8006894:	9b08      	ldr	r3, [sp, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	dd02      	ble.n	80068a0 <_dtoa_r+0xa10>
 800689a:	9b02      	ldr	r3, [sp, #8]
 800689c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80068a0:	9b00      	ldr	r3, [sp, #0]
 80068a2:	f883 8000 	strb.w	r8, [r3]
 80068a6:	e63f      	b.n	8006528 <_dtoa_r+0x698>
 80068a8:	4628      	mov	r0, r5
 80068aa:	e7bb      	b.n	8006824 <_dtoa_r+0x994>
 80068ac:	2201      	movs	r2, #1
 80068ae:	e7e1      	b.n	8006874 <_dtoa_r+0x9e4>
 80068b0:	9b08      	ldr	r3, [sp, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	db04      	blt.n	80068c0 <_dtoa_r+0xa30>
 80068b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068b8:	430b      	orrs	r3, r1
 80068ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068bc:	430b      	orrs	r3, r1
 80068be:	d120      	bne.n	8006902 <_dtoa_r+0xa72>
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	dded      	ble.n	80068a0 <_dtoa_r+0xa10>
 80068c4:	4649      	mov	r1, r9
 80068c6:	2201      	movs	r2, #1
 80068c8:	4658      	mov	r0, fp
 80068ca:	f000 fbb3 	bl	8007034 <__lshift>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4681      	mov	r9, r0
 80068d2:	f000 fc1b 	bl	800710c <__mcmp>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	dc03      	bgt.n	80068e2 <_dtoa_r+0xa52>
 80068da:	d1e1      	bne.n	80068a0 <_dtoa_r+0xa10>
 80068dc:	f018 0f01 	tst.w	r8, #1
 80068e0:	d0de      	beq.n	80068a0 <_dtoa_r+0xa10>
 80068e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068e6:	d1d8      	bne.n	800689a <_dtoa_r+0xa0a>
 80068e8:	9a00      	ldr	r2, [sp, #0]
 80068ea:	2339      	movs	r3, #57	@ 0x39
 80068ec:	7013      	strb	r3, [r2, #0]
 80068ee:	4633      	mov	r3, r6
 80068f0:	461e      	mov	r6, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068f8:	2a39      	cmp	r2, #57	@ 0x39
 80068fa:	d052      	beq.n	80069a2 <_dtoa_r+0xb12>
 80068fc:	3201      	adds	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	e612      	b.n	8006528 <_dtoa_r+0x698>
 8006902:	2a00      	cmp	r2, #0
 8006904:	dd07      	ble.n	8006916 <_dtoa_r+0xa86>
 8006906:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800690a:	d0ed      	beq.n	80068e8 <_dtoa_r+0xa58>
 800690c:	9a00      	ldr	r2, [sp, #0]
 800690e:	f108 0301 	add.w	r3, r8, #1
 8006912:	7013      	strb	r3, [r2, #0]
 8006914:	e608      	b.n	8006528 <_dtoa_r+0x698>
 8006916:	9b07      	ldr	r3, [sp, #28]
 8006918:	9a07      	ldr	r2, [sp, #28]
 800691a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800691e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006920:	4293      	cmp	r3, r2
 8006922:	d028      	beq.n	8006976 <_dtoa_r+0xae6>
 8006924:	4649      	mov	r1, r9
 8006926:	2300      	movs	r3, #0
 8006928:	220a      	movs	r2, #10
 800692a:	4658      	mov	r0, fp
 800692c:	f000 f9d6 	bl	8006cdc <__multadd>
 8006930:	42af      	cmp	r7, r5
 8006932:	4681      	mov	r9, r0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	f04f 020a 	mov.w	r2, #10
 800693c:	4639      	mov	r1, r7
 800693e:	4658      	mov	r0, fp
 8006940:	d107      	bne.n	8006952 <_dtoa_r+0xac2>
 8006942:	f000 f9cb 	bl	8006cdc <__multadd>
 8006946:	4607      	mov	r7, r0
 8006948:	4605      	mov	r5, r0
 800694a:	9b07      	ldr	r3, [sp, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	e774      	b.n	800683c <_dtoa_r+0x9ac>
 8006952:	f000 f9c3 	bl	8006cdc <__multadd>
 8006956:	4629      	mov	r1, r5
 8006958:	4607      	mov	r7, r0
 800695a:	2300      	movs	r3, #0
 800695c:	220a      	movs	r2, #10
 800695e:	4658      	mov	r0, fp
 8006960:	f000 f9bc 	bl	8006cdc <__multadd>
 8006964:	4605      	mov	r5, r0
 8006966:	e7f0      	b.n	800694a <_dtoa_r+0xaba>
 8006968:	9b00      	ldr	r3, [sp, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfcc      	ite	gt
 800696e:	461e      	movgt	r6, r3
 8006970:	2601      	movle	r6, #1
 8006972:	4456      	add	r6, sl
 8006974:	2700      	movs	r7, #0
 8006976:	4649      	mov	r1, r9
 8006978:	2201      	movs	r2, #1
 800697a:	4658      	mov	r0, fp
 800697c:	f000 fb5a 	bl	8007034 <__lshift>
 8006980:	4621      	mov	r1, r4
 8006982:	4681      	mov	r9, r0
 8006984:	f000 fbc2 	bl	800710c <__mcmp>
 8006988:	2800      	cmp	r0, #0
 800698a:	dcb0      	bgt.n	80068ee <_dtoa_r+0xa5e>
 800698c:	d102      	bne.n	8006994 <_dtoa_r+0xb04>
 800698e:	f018 0f01 	tst.w	r8, #1
 8006992:	d1ac      	bne.n	80068ee <_dtoa_r+0xa5e>
 8006994:	4633      	mov	r3, r6
 8006996:	461e      	mov	r6, r3
 8006998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800699c:	2a30      	cmp	r2, #48	@ 0x30
 800699e:	d0fa      	beq.n	8006996 <_dtoa_r+0xb06>
 80069a0:	e5c2      	b.n	8006528 <_dtoa_r+0x698>
 80069a2:	459a      	cmp	sl, r3
 80069a4:	d1a4      	bne.n	80068f0 <_dtoa_r+0xa60>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	2331      	movs	r3, #49	@ 0x31
 80069ae:	f88a 3000 	strb.w	r3, [sl]
 80069b2:	e5b9      	b.n	8006528 <_dtoa_r+0x698>
 80069b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a14 <_dtoa_r+0xb84>
 80069ba:	b11b      	cbz	r3, 80069c4 <_dtoa_r+0xb34>
 80069bc:	f10a 0308 	add.w	r3, sl, #8
 80069c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	4650      	mov	r0, sl
 80069c6:	b019      	add	sp, #100	@ 0x64
 80069c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	f77f ae37 	ble.w	8006642 <_dtoa_r+0x7b2>
 80069d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d8:	2001      	movs	r0, #1
 80069da:	e655      	b.n	8006688 <_dtoa_r+0x7f8>
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f77f aed6 	ble.w	8006790 <_dtoa_r+0x900>
 80069e4:	4656      	mov	r6, sl
 80069e6:	4621      	mov	r1, r4
 80069e8:	4648      	mov	r0, r9
 80069ea:	f7ff f9c8 	bl	8005d7e <quorem>
 80069ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069f2:	f806 8b01 	strb.w	r8, [r6], #1
 80069f6:	9b00      	ldr	r3, [sp, #0]
 80069f8:	eba6 020a 	sub.w	r2, r6, sl
 80069fc:	4293      	cmp	r3, r2
 80069fe:	ddb3      	ble.n	8006968 <_dtoa_r+0xad8>
 8006a00:	4649      	mov	r1, r9
 8006a02:	2300      	movs	r3, #0
 8006a04:	220a      	movs	r2, #10
 8006a06:	4658      	mov	r0, fp
 8006a08:	f000 f968 	bl	8006cdc <__multadd>
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	e7ea      	b.n	80069e6 <_dtoa_r+0xb56>
 8006a10:	08007bf0 	.word	0x08007bf0
 8006a14:	08007b74 	.word	0x08007b74

08006a18 <_free_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d041      	beq.n	8006aa4 <_free_r+0x8c>
 8006a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a24:	1f0c      	subs	r4, r1, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bfb8      	it	lt
 8006a2a:	18e4      	addlt	r4, r4, r3
 8006a2c:	f000 f8e8 	bl	8006c00 <__malloc_lock>
 8006a30:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa8 <_free_r+0x90>)
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	b933      	cbnz	r3, 8006a44 <_free_r+0x2c>
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	6014      	str	r4, [r2, #0]
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a40:	f000 b8e4 	b.w	8006c0c <__malloc_unlock>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d908      	bls.n	8006a5a <_free_r+0x42>
 8006a48:	6820      	ldr	r0, [r4, #0]
 8006a4a:	1821      	adds	r1, r4, r0
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	bf01      	itttt	eq
 8006a50:	6819      	ldreq	r1, [r3, #0]
 8006a52:	685b      	ldreq	r3, [r3, #4]
 8006a54:	1809      	addeq	r1, r1, r0
 8006a56:	6021      	streq	r1, [r4, #0]
 8006a58:	e7ed      	b.n	8006a36 <_free_r+0x1e>
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	b10b      	cbz	r3, 8006a64 <_free_r+0x4c>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d9fa      	bls.n	8006a5a <_free_r+0x42>
 8006a64:	6811      	ldr	r1, [r2, #0]
 8006a66:	1850      	adds	r0, r2, r1
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d10b      	bne.n	8006a84 <_free_r+0x6c>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	4401      	add	r1, r0
 8006a70:	1850      	adds	r0, r2, r1
 8006a72:	4283      	cmp	r3, r0
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	d1e0      	bne.n	8006a3a <_free_r+0x22>
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	6053      	str	r3, [r2, #4]
 8006a7e:	4408      	add	r0, r1
 8006a80:	6010      	str	r0, [r2, #0]
 8006a82:	e7da      	b.n	8006a3a <_free_r+0x22>
 8006a84:	d902      	bls.n	8006a8c <_free_r+0x74>
 8006a86:	230c      	movs	r3, #12
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	e7d6      	b.n	8006a3a <_free_r+0x22>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	1821      	adds	r1, r4, r0
 8006a90:	428b      	cmp	r3, r1
 8006a92:	bf04      	itt	eq
 8006a94:	6819      	ldreq	r1, [r3, #0]
 8006a96:	685b      	ldreq	r3, [r3, #4]
 8006a98:	6063      	str	r3, [r4, #4]
 8006a9a:	bf04      	itt	eq
 8006a9c:	1809      	addeq	r1, r1, r0
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	6054      	str	r4, [r2, #4]
 8006aa2:	e7ca      	b.n	8006a3a <_free_r+0x22>
 8006aa4:	bd38      	pop	{r3, r4, r5, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000480 	.word	0x20000480

08006aac <malloc>:
 8006aac:	4b02      	ldr	r3, [pc, #8]	@ (8006ab8 <malloc+0xc>)
 8006aae:	4601      	mov	r1, r0
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f000 b825 	b.w	8006b00 <_malloc_r>
 8006ab6:	bf00      	nop
 8006ab8:	20000018 	.word	0x20000018

08006abc <sbrk_aligned>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4e0f      	ldr	r6, [pc, #60]	@ (8006afc <sbrk_aligned+0x40>)
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	6831      	ldr	r1, [r6, #0]
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	b911      	cbnz	r1, 8006ace <sbrk_aligned+0x12>
 8006ac8:	f000 feaa 	bl	8007820 <_sbrk_r>
 8006acc:	6030      	str	r0, [r6, #0]
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f000 fea5 	bl	8007820 <_sbrk_r>
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d103      	bne.n	8006ae2 <sbrk_aligned+0x26>
 8006ada:	f04f 34ff 	mov.w	r4, #4294967295
 8006ade:	4620      	mov	r0, r4
 8006ae0:	bd70      	pop	{r4, r5, r6, pc}
 8006ae2:	1cc4      	adds	r4, r0, #3
 8006ae4:	f024 0403 	bic.w	r4, r4, #3
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d0f8      	beq.n	8006ade <sbrk_aligned+0x22>
 8006aec:	1a21      	subs	r1, r4, r0
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 fe96 	bl	8007820 <_sbrk_r>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d1f2      	bne.n	8006ade <sbrk_aligned+0x22>
 8006af8:	e7ef      	b.n	8006ada <sbrk_aligned+0x1e>
 8006afa:	bf00      	nop
 8006afc:	2000047c 	.word	0x2000047c

08006b00 <_malloc_r>:
 8006b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b04:	1ccd      	adds	r5, r1, #3
 8006b06:	f025 0503 	bic.w	r5, r5, #3
 8006b0a:	3508      	adds	r5, #8
 8006b0c:	2d0c      	cmp	r5, #12
 8006b0e:	bf38      	it	cc
 8006b10:	250c      	movcc	r5, #12
 8006b12:	2d00      	cmp	r5, #0
 8006b14:	4606      	mov	r6, r0
 8006b16:	db01      	blt.n	8006b1c <_malloc_r+0x1c>
 8006b18:	42a9      	cmp	r1, r5
 8006b1a:	d904      	bls.n	8006b26 <_malloc_r+0x26>
 8006b1c:	230c      	movs	r3, #12
 8006b1e:	6033      	str	r3, [r6, #0]
 8006b20:	2000      	movs	r0, #0
 8006b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bfc <_malloc_r+0xfc>
 8006b2a:	f000 f869 	bl	8006c00 <__malloc_lock>
 8006b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b32:	461c      	mov	r4, r3
 8006b34:	bb44      	cbnz	r4, 8006b88 <_malloc_r+0x88>
 8006b36:	4629      	mov	r1, r5
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f7ff ffbf 	bl	8006abc <sbrk_aligned>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	4604      	mov	r4, r0
 8006b42:	d158      	bne.n	8006bf6 <_malloc_r+0xf6>
 8006b44:	f8d8 4000 	ldr.w	r4, [r8]
 8006b48:	4627      	mov	r7, r4
 8006b4a:	2f00      	cmp	r7, #0
 8006b4c:	d143      	bne.n	8006bd6 <_malloc_r+0xd6>
 8006b4e:	2c00      	cmp	r4, #0
 8006b50:	d04b      	beq.n	8006bea <_malloc_r+0xea>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	4639      	mov	r1, r7
 8006b56:	4630      	mov	r0, r6
 8006b58:	eb04 0903 	add.w	r9, r4, r3
 8006b5c:	f000 fe60 	bl	8007820 <_sbrk_r>
 8006b60:	4581      	cmp	r9, r0
 8006b62:	d142      	bne.n	8006bea <_malloc_r+0xea>
 8006b64:	6821      	ldr	r1, [r4, #0]
 8006b66:	1a6d      	subs	r5, r5, r1
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff ffa6 	bl	8006abc <sbrk_aligned>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d03a      	beq.n	8006bea <_malloc_r+0xea>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	442b      	add	r3, r5
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	bb62      	cbnz	r2, 8006bdc <_malloc_r+0xdc>
 8006b82:	f8c8 7000 	str.w	r7, [r8]
 8006b86:	e00f      	b.n	8006ba8 <_malloc_r+0xa8>
 8006b88:	6822      	ldr	r2, [r4, #0]
 8006b8a:	1b52      	subs	r2, r2, r5
 8006b8c:	d420      	bmi.n	8006bd0 <_malloc_r+0xd0>
 8006b8e:	2a0b      	cmp	r2, #11
 8006b90:	d917      	bls.n	8006bc2 <_malloc_r+0xc2>
 8006b92:	1961      	adds	r1, r4, r5
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	6025      	str	r5, [r4, #0]
 8006b98:	bf18      	it	ne
 8006b9a:	6059      	strne	r1, [r3, #4]
 8006b9c:	6863      	ldr	r3, [r4, #4]
 8006b9e:	bf08      	it	eq
 8006ba0:	f8c8 1000 	streq.w	r1, [r8]
 8006ba4:	5162      	str	r2, [r4, r5]
 8006ba6:	604b      	str	r3, [r1, #4]
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 f82f 	bl	8006c0c <__malloc_unlock>
 8006bae:	f104 000b 	add.w	r0, r4, #11
 8006bb2:	1d23      	adds	r3, r4, #4
 8006bb4:	f020 0007 	bic.w	r0, r0, #7
 8006bb8:	1ac2      	subs	r2, r0, r3
 8006bba:	bf1c      	itt	ne
 8006bbc:	1a1b      	subne	r3, r3, r0
 8006bbe:	50a3      	strne	r3, [r4, r2]
 8006bc0:	e7af      	b.n	8006b22 <_malloc_r+0x22>
 8006bc2:	6862      	ldr	r2, [r4, #4]
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	bf0c      	ite	eq
 8006bc8:	f8c8 2000 	streq.w	r2, [r8]
 8006bcc:	605a      	strne	r2, [r3, #4]
 8006bce:	e7eb      	b.n	8006ba8 <_malloc_r+0xa8>
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	6864      	ldr	r4, [r4, #4]
 8006bd4:	e7ae      	b.n	8006b34 <_malloc_r+0x34>
 8006bd6:	463c      	mov	r4, r7
 8006bd8:	687f      	ldr	r7, [r7, #4]
 8006bda:	e7b6      	b.n	8006b4a <_malloc_r+0x4a>
 8006bdc:	461a      	mov	r2, r3
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	d1fb      	bne.n	8006bdc <_malloc_r+0xdc>
 8006be4:	2300      	movs	r3, #0
 8006be6:	6053      	str	r3, [r2, #4]
 8006be8:	e7de      	b.n	8006ba8 <_malloc_r+0xa8>
 8006bea:	230c      	movs	r3, #12
 8006bec:	6033      	str	r3, [r6, #0]
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f000 f80c 	bl	8006c0c <__malloc_unlock>
 8006bf4:	e794      	b.n	8006b20 <_malloc_r+0x20>
 8006bf6:	6005      	str	r5, [r0, #0]
 8006bf8:	e7d6      	b.n	8006ba8 <_malloc_r+0xa8>
 8006bfa:	bf00      	nop
 8006bfc:	20000480 	.word	0x20000480

08006c00 <__malloc_lock>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__malloc_lock+0x8>)
 8006c02:	f7ff b8ba 	b.w	8005d7a <__retarget_lock_acquire_recursive>
 8006c06:	bf00      	nop
 8006c08:	20000478 	.word	0x20000478

08006c0c <__malloc_unlock>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	@ (8006c14 <__malloc_unlock+0x8>)
 8006c0e:	f7ff b8b5 	b.w	8005d7c <__retarget_lock_release_recursive>
 8006c12:	bf00      	nop
 8006c14:	20000478 	.word	0x20000478

08006c18 <_Balloc>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	69c6      	ldr	r6, [r0, #28]
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	460d      	mov	r5, r1
 8006c20:	b976      	cbnz	r6, 8006c40 <_Balloc+0x28>
 8006c22:	2010      	movs	r0, #16
 8006c24:	f7ff ff42 	bl	8006aac <malloc>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	61e0      	str	r0, [r4, #28]
 8006c2c:	b920      	cbnz	r0, 8006c38 <_Balloc+0x20>
 8006c2e:	4b18      	ldr	r3, [pc, #96]	@ (8006c90 <_Balloc+0x78>)
 8006c30:	4818      	ldr	r0, [pc, #96]	@ (8006c94 <_Balloc+0x7c>)
 8006c32:	216b      	movs	r1, #107	@ 0x6b
 8006c34:	f000 fe12 	bl	800785c <__assert_func>
 8006c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c3c:	6006      	str	r6, [r0, #0]
 8006c3e:	60c6      	str	r6, [r0, #12]
 8006c40:	69e6      	ldr	r6, [r4, #28]
 8006c42:	68f3      	ldr	r3, [r6, #12]
 8006c44:	b183      	cbz	r3, 8006c68 <_Balloc+0x50>
 8006c46:	69e3      	ldr	r3, [r4, #28]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c4e:	b9b8      	cbnz	r0, 8006c80 <_Balloc+0x68>
 8006c50:	2101      	movs	r1, #1
 8006c52:	fa01 f605 	lsl.w	r6, r1, r5
 8006c56:	1d72      	adds	r2, r6, #5
 8006c58:	0092      	lsls	r2, r2, #2
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fe1c 	bl	8007898 <_calloc_r>
 8006c60:	b160      	cbz	r0, 8006c7c <_Balloc+0x64>
 8006c62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c66:	e00e      	b.n	8006c86 <_Balloc+0x6e>
 8006c68:	2221      	movs	r2, #33	@ 0x21
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 fe13 	bl	8007898 <_calloc_r>
 8006c72:	69e3      	ldr	r3, [r4, #28]
 8006c74:	60f0      	str	r0, [r6, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e4      	bne.n	8006c46 <_Balloc+0x2e>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	6802      	ldr	r2, [r0, #0]
 8006c82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c86:	2300      	movs	r3, #0
 8006c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c8c:	e7f7      	b.n	8006c7e <_Balloc+0x66>
 8006c8e:	bf00      	nop
 8006c90:	08007b81 	.word	0x08007b81
 8006c94:	08007c01 	.word	0x08007c01

08006c98 <_Bfree>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	69c6      	ldr	r6, [r0, #28]
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	b976      	cbnz	r6, 8006cc0 <_Bfree+0x28>
 8006ca2:	2010      	movs	r0, #16
 8006ca4:	f7ff ff02 	bl	8006aac <malloc>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	61e8      	str	r0, [r5, #28]
 8006cac:	b920      	cbnz	r0, 8006cb8 <_Bfree+0x20>
 8006cae:	4b09      	ldr	r3, [pc, #36]	@ (8006cd4 <_Bfree+0x3c>)
 8006cb0:	4809      	ldr	r0, [pc, #36]	@ (8006cd8 <_Bfree+0x40>)
 8006cb2:	218f      	movs	r1, #143	@ 0x8f
 8006cb4:	f000 fdd2 	bl	800785c <__assert_func>
 8006cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cbc:	6006      	str	r6, [r0, #0]
 8006cbe:	60c6      	str	r6, [r0, #12]
 8006cc0:	b13c      	cbz	r4, 8006cd2 <_Bfree+0x3a>
 8006cc2:	69eb      	ldr	r3, [r5, #28]
 8006cc4:	6862      	ldr	r2, [r4, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ccc:	6021      	str	r1, [r4, #0]
 8006cce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	08007b81 	.word	0x08007b81
 8006cd8:	08007c01 	.word	0x08007c01

08006cdc <__multadd>:
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	690d      	ldr	r5, [r1, #16]
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	461e      	mov	r6, r3
 8006ce8:	f101 0c14 	add.w	ip, r1, #20
 8006cec:	2000      	movs	r0, #0
 8006cee:	f8dc 3000 	ldr.w	r3, [ip]
 8006cf2:	b299      	uxth	r1, r3
 8006cf4:	fb02 6101 	mla	r1, r2, r1, r6
 8006cf8:	0c1e      	lsrs	r6, r3, #16
 8006cfa:	0c0b      	lsrs	r3, r1, #16
 8006cfc:	fb02 3306 	mla	r3, r2, r6, r3
 8006d00:	b289      	uxth	r1, r1
 8006d02:	3001      	adds	r0, #1
 8006d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d08:	4285      	cmp	r5, r0
 8006d0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d12:	dcec      	bgt.n	8006cee <__multadd+0x12>
 8006d14:	b30e      	cbz	r6, 8006d5a <__multadd+0x7e>
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dc19      	bgt.n	8006d50 <__multadd+0x74>
 8006d1c:	6861      	ldr	r1, [r4, #4]
 8006d1e:	4638      	mov	r0, r7
 8006d20:	3101      	adds	r1, #1
 8006d22:	f7ff ff79 	bl	8006c18 <_Balloc>
 8006d26:	4680      	mov	r8, r0
 8006d28:	b928      	cbnz	r0, 8006d36 <__multadd+0x5a>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <__multadd+0x84>)
 8006d2e:	480d      	ldr	r0, [pc, #52]	@ (8006d64 <__multadd+0x88>)
 8006d30:	21ba      	movs	r1, #186	@ 0xba
 8006d32:	f000 fd93 	bl	800785c <__assert_func>
 8006d36:	6922      	ldr	r2, [r4, #16]
 8006d38:	3202      	adds	r2, #2
 8006d3a:	f104 010c 	add.w	r1, r4, #12
 8006d3e:	0092      	lsls	r2, r2, #2
 8006d40:	300c      	adds	r0, #12
 8006d42:	f000 fd7d 	bl	8007840 <memcpy>
 8006d46:	4621      	mov	r1, r4
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ffa5 	bl	8006c98 <_Bfree>
 8006d4e:	4644      	mov	r4, r8
 8006d50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d54:	3501      	adds	r5, #1
 8006d56:	615e      	str	r6, [r3, #20]
 8006d58:	6125      	str	r5, [r4, #16]
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	08007bf0 	.word	0x08007bf0
 8006d64:	08007c01 	.word	0x08007c01

08006d68 <__hi0bits>:
 8006d68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	bf36      	itet	cc
 8006d70:	0403      	lslcc	r3, r0, #16
 8006d72:	2000      	movcs	r0, #0
 8006d74:	2010      	movcc	r0, #16
 8006d76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d7a:	bf3c      	itt	cc
 8006d7c:	021b      	lslcc	r3, r3, #8
 8006d7e:	3008      	addcc	r0, #8
 8006d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d84:	bf3c      	itt	cc
 8006d86:	011b      	lslcc	r3, r3, #4
 8006d88:	3004      	addcc	r0, #4
 8006d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8e:	bf3c      	itt	cc
 8006d90:	009b      	lslcc	r3, r3, #2
 8006d92:	3002      	addcc	r0, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	db05      	blt.n	8006da4 <__hi0bits+0x3c>
 8006d98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d9c:	f100 0001 	add.w	r0, r0, #1
 8006da0:	bf08      	it	eq
 8006da2:	2020      	moveq	r0, #32
 8006da4:	4770      	bx	lr

08006da6 <__lo0bits>:
 8006da6:	6803      	ldr	r3, [r0, #0]
 8006da8:	4602      	mov	r2, r0
 8006daa:	f013 0007 	ands.w	r0, r3, #7
 8006dae:	d00b      	beq.n	8006dc8 <__lo0bits+0x22>
 8006db0:	07d9      	lsls	r1, r3, #31
 8006db2:	d421      	bmi.n	8006df8 <__lo0bits+0x52>
 8006db4:	0798      	lsls	r0, r3, #30
 8006db6:	bf49      	itett	mi
 8006db8:	085b      	lsrmi	r3, r3, #1
 8006dba:	089b      	lsrpl	r3, r3, #2
 8006dbc:	2001      	movmi	r0, #1
 8006dbe:	6013      	strmi	r3, [r2, #0]
 8006dc0:	bf5c      	itt	pl
 8006dc2:	6013      	strpl	r3, [r2, #0]
 8006dc4:	2002      	movpl	r0, #2
 8006dc6:	4770      	bx	lr
 8006dc8:	b299      	uxth	r1, r3
 8006dca:	b909      	cbnz	r1, 8006dd0 <__lo0bits+0x2a>
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	2010      	movs	r0, #16
 8006dd0:	b2d9      	uxtb	r1, r3
 8006dd2:	b909      	cbnz	r1, 8006dd8 <__lo0bits+0x32>
 8006dd4:	3008      	adds	r0, #8
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	0719      	lsls	r1, r3, #28
 8006dda:	bf04      	itt	eq
 8006ddc:	091b      	lsreq	r3, r3, #4
 8006dde:	3004      	addeq	r0, #4
 8006de0:	0799      	lsls	r1, r3, #30
 8006de2:	bf04      	itt	eq
 8006de4:	089b      	lsreq	r3, r3, #2
 8006de6:	3002      	addeq	r0, #2
 8006de8:	07d9      	lsls	r1, r3, #31
 8006dea:	d403      	bmi.n	8006df4 <__lo0bits+0x4e>
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	f100 0001 	add.w	r0, r0, #1
 8006df2:	d003      	beq.n	8006dfc <__lo0bits+0x56>
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	4770      	bx	lr
 8006df8:	2000      	movs	r0, #0
 8006dfa:	4770      	bx	lr
 8006dfc:	2020      	movs	r0, #32
 8006dfe:	4770      	bx	lr

08006e00 <__i2b>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	460c      	mov	r4, r1
 8006e04:	2101      	movs	r1, #1
 8006e06:	f7ff ff07 	bl	8006c18 <_Balloc>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	b928      	cbnz	r0, 8006e1a <__i2b+0x1a>
 8006e0e:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <__i2b+0x24>)
 8006e10:	4805      	ldr	r0, [pc, #20]	@ (8006e28 <__i2b+0x28>)
 8006e12:	f240 1145 	movw	r1, #325	@ 0x145
 8006e16:	f000 fd21 	bl	800785c <__assert_func>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	6144      	str	r4, [r0, #20]
 8006e1e:	6103      	str	r3, [r0, #16]
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	bf00      	nop
 8006e24:	08007bf0 	.word	0x08007bf0
 8006e28:	08007c01 	.word	0x08007c01

08006e2c <__multiply>:
 8006e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	4614      	mov	r4, r2
 8006e32:	690a      	ldr	r2, [r1, #16]
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	bfa8      	it	ge
 8006e3a:	4623      	movge	r3, r4
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	bfa4      	itt	ge
 8006e40:	460c      	movge	r4, r1
 8006e42:	461f      	movge	r7, r3
 8006e44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	6861      	ldr	r1, [r4, #4]
 8006e50:	eb0a 0609 	add.w	r6, sl, r9
 8006e54:	42b3      	cmp	r3, r6
 8006e56:	b085      	sub	sp, #20
 8006e58:	bfb8      	it	lt
 8006e5a:	3101      	addlt	r1, #1
 8006e5c:	f7ff fedc 	bl	8006c18 <_Balloc>
 8006e60:	b930      	cbnz	r0, 8006e70 <__multiply+0x44>
 8006e62:	4602      	mov	r2, r0
 8006e64:	4b44      	ldr	r3, [pc, #272]	@ (8006f78 <__multiply+0x14c>)
 8006e66:	4845      	ldr	r0, [pc, #276]	@ (8006f7c <__multiply+0x150>)
 8006e68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e6c:	f000 fcf6 	bl	800785c <__assert_func>
 8006e70:	f100 0514 	add.w	r5, r0, #20
 8006e74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e78:	462b      	mov	r3, r5
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4543      	cmp	r3, r8
 8006e7e:	d321      	bcc.n	8006ec4 <__multiply+0x98>
 8006e80:	f107 0114 	add.w	r1, r7, #20
 8006e84:	f104 0214 	add.w	r2, r4, #20
 8006e88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e90:	9302      	str	r3, [sp, #8]
 8006e92:	1b13      	subs	r3, r2, r4
 8006e94:	3b15      	subs	r3, #21
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	f104 0715 	add.w	r7, r4, #21
 8006ea0:	42ba      	cmp	r2, r7
 8006ea2:	bf38      	it	cc
 8006ea4:	2304      	movcc	r3, #4
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	9b02      	ldr	r3, [sp, #8]
 8006eaa:	9103      	str	r1, [sp, #12]
 8006eac:	428b      	cmp	r3, r1
 8006eae:	d80c      	bhi.n	8006eca <__multiply+0x9e>
 8006eb0:	2e00      	cmp	r6, #0
 8006eb2:	dd03      	ble.n	8006ebc <__multiply+0x90>
 8006eb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d05b      	beq.n	8006f74 <__multiply+0x148>
 8006ebc:	6106      	str	r6, [r0, #16]
 8006ebe:	b005      	add	sp, #20
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec4:	f843 2b04 	str.w	r2, [r3], #4
 8006ec8:	e7d8      	b.n	8006e7c <__multiply+0x50>
 8006eca:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ece:	f1ba 0f00 	cmp.w	sl, #0
 8006ed2:	d024      	beq.n	8006f1e <__multiply+0xf2>
 8006ed4:	f104 0e14 	add.w	lr, r4, #20
 8006ed8:	46a9      	mov	r9, r5
 8006eda:	f04f 0c00 	mov.w	ip, #0
 8006ede:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ee2:	f8d9 3000 	ldr.w	r3, [r9]
 8006ee6:	fa1f fb87 	uxth.w	fp, r7
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ef0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006ef4:	f8d9 7000 	ldr.w	r7, [r9]
 8006ef8:	4463      	add	r3, ip
 8006efa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006efe:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f0c:	4572      	cmp	r2, lr
 8006f0e:	f849 3b04 	str.w	r3, [r9], #4
 8006f12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f16:	d8e2      	bhi.n	8006ede <__multiply+0xb2>
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	f845 c003 	str.w	ip, [r5, r3]
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f24:	3104      	adds	r1, #4
 8006f26:	f1b9 0f00 	cmp.w	r9, #0
 8006f2a:	d021      	beq.n	8006f70 <__multiply+0x144>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	f104 0c14 	add.w	ip, r4, #20
 8006f32:	46ae      	mov	lr, r5
 8006f34:	f04f 0a00 	mov.w	sl, #0
 8006f38:	f8bc b000 	ldrh.w	fp, [ip]
 8006f3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f40:	fb09 770b 	mla	r7, r9, fp, r7
 8006f44:	4457      	add	r7, sl
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f4c:	f84e 3b04 	str.w	r3, [lr], #4
 8006f50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f58:	f8be 3000 	ldrh.w	r3, [lr]
 8006f5c:	fb09 330a 	mla	r3, r9, sl, r3
 8006f60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f64:	4562      	cmp	r2, ip
 8006f66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f6a:	d8e5      	bhi.n	8006f38 <__multiply+0x10c>
 8006f6c:	9f01      	ldr	r7, [sp, #4]
 8006f6e:	51eb      	str	r3, [r5, r7]
 8006f70:	3504      	adds	r5, #4
 8006f72:	e799      	b.n	8006ea8 <__multiply+0x7c>
 8006f74:	3e01      	subs	r6, #1
 8006f76:	e79b      	b.n	8006eb0 <__multiply+0x84>
 8006f78:	08007bf0 	.word	0x08007bf0
 8006f7c:	08007c01 	.word	0x08007c01

08006f80 <__pow5mult>:
 8006f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f84:	4615      	mov	r5, r2
 8006f86:	f012 0203 	ands.w	r2, r2, #3
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	d007      	beq.n	8006fa0 <__pow5mult+0x20>
 8006f90:	4c25      	ldr	r4, [pc, #148]	@ (8007028 <__pow5mult+0xa8>)
 8006f92:	3a01      	subs	r2, #1
 8006f94:	2300      	movs	r3, #0
 8006f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f9a:	f7ff fe9f 	bl	8006cdc <__multadd>
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	10ad      	asrs	r5, r5, #2
 8006fa2:	d03d      	beq.n	8007020 <__pow5mult+0xa0>
 8006fa4:	69fc      	ldr	r4, [r7, #28]
 8006fa6:	b97c      	cbnz	r4, 8006fc8 <__pow5mult+0x48>
 8006fa8:	2010      	movs	r0, #16
 8006faa:	f7ff fd7f 	bl	8006aac <malloc>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	61f8      	str	r0, [r7, #28]
 8006fb2:	b928      	cbnz	r0, 8006fc0 <__pow5mult+0x40>
 8006fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800702c <__pow5mult+0xac>)
 8006fb6:	481e      	ldr	r0, [pc, #120]	@ (8007030 <__pow5mult+0xb0>)
 8006fb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fbc:	f000 fc4e 	bl	800785c <__assert_func>
 8006fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fc4:	6004      	str	r4, [r0, #0]
 8006fc6:	60c4      	str	r4, [r0, #12]
 8006fc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fd0:	b94c      	cbnz	r4, 8006fe6 <__pow5mult+0x66>
 8006fd2:	f240 2171 	movw	r1, #625	@ 0x271
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	f7ff ff12 	bl	8006e00 <__i2b>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	6003      	str	r3, [r0, #0]
 8006fe6:	f04f 0900 	mov.w	r9, #0
 8006fea:	07eb      	lsls	r3, r5, #31
 8006fec:	d50a      	bpl.n	8007004 <__pow5mult+0x84>
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	f7ff ff1a 	bl	8006e2c <__multiply>
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	f7ff fe4b 	bl	8006c98 <_Bfree>
 8007002:	4646      	mov	r6, r8
 8007004:	106d      	asrs	r5, r5, #1
 8007006:	d00b      	beq.n	8007020 <__pow5mult+0xa0>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	b938      	cbnz	r0, 800701c <__pow5mult+0x9c>
 800700c:	4622      	mov	r2, r4
 800700e:	4621      	mov	r1, r4
 8007010:	4638      	mov	r0, r7
 8007012:	f7ff ff0b 	bl	8006e2c <__multiply>
 8007016:	6020      	str	r0, [r4, #0]
 8007018:	f8c0 9000 	str.w	r9, [r0]
 800701c:	4604      	mov	r4, r0
 800701e:	e7e4      	b.n	8006fea <__pow5mult+0x6a>
 8007020:	4630      	mov	r0, r6
 8007022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007026:	bf00      	nop
 8007028:	08007c5c 	.word	0x08007c5c
 800702c:	08007b81 	.word	0x08007b81
 8007030:	08007c01 	.word	0x08007c01

08007034 <__lshift>:
 8007034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	6849      	ldr	r1, [r1, #4]
 800703c:	6923      	ldr	r3, [r4, #16]
 800703e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007042:	68a3      	ldr	r3, [r4, #8]
 8007044:	4607      	mov	r7, r0
 8007046:	4691      	mov	r9, r2
 8007048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800704c:	f108 0601 	add.w	r6, r8, #1
 8007050:	42b3      	cmp	r3, r6
 8007052:	db0b      	blt.n	800706c <__lshift+0x38>
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff fddf 	bl	8006c18 <_Balloc>
 800705a:	4605      	mov	r5, r0
 800705c:	b948      	cbnz	r0, 8007072 <__lshift+0x3e>
 800705e:	4602      	mov	r2, r0
 8007060:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <__lshift+0xd0>)
 8007062:	4829      	ldr	r0, [pc, #164]	@ (8007108 <__lshift+0xd4>)
 8007064:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007068:	f000 fbf8 	bl	800785c <__assert_func>
 800706c:	3101      	adds	r1, #1
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	e7ee      	b.n	8007050 <__lshift+0x1c>
 8007072:	2300      	movs	r3, #0
 8007074:	f100 0114 	add.w	r1, r0, #20
 8007078:	f100 0210 	add.w	r2, r0, #16
 800707c:	4618      	mov	r0, r3
 800707e:	4553      	cmp	r3, sl
 8007080:	db33      	blt.n	80070ea <__lshift+0xb6>
 8007082:	6920      	ldr	r0, [r4, #16]
 8007084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007088:	f104 0314 	add.w	r3, r4, #20
 800708c:	f019 091f 	ands.w	r9, r9, #31
 8007090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007094:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007098:	d02b      	beq.n	80070f2 <__lshift+0xbe>
 800709a:	f1c9 0e20 	rsb	lr, r9, #32
 800709e:	468a      	mov	sl, r1
 80070a0:	2200      	movs	r2, #0
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	fa00 f009 	lsl.w	r0, r0, r9
 80070a8:	4310      	orrs	r0, r2
 80070aa:	f84a 0b04 	str.w	r0, [sl], #4
 80070ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b2:	459c      	cmp	ip, r3
 80070b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80070b8:	d8f3      	bhi.n	80070a2 <__lshift+0x6e>
 80070ba:	ebac 0304 	sub.w	r3, ip, r4
 80070be:	3b15      	subs	r3, #21
 80070c0:	f023 0303 	bic.w	r3, r3, #3
 80070c4:	3304      	adds	r3, #4
 80070c6:	f104 0015 	add.w	r0, r4, #21
 80070ca:	4584      	cmp	ip, r0
 80070cc:	bf38      	it	cc
 80070ce:	2304      	movcc	r3, #4
 80070d0:	50ca      	str	r2, [r1, r3]
 80070d2:	b10a      	cbz	r2, 80070d8 <__lshift+0xa4>
 80070d4:	f108 0602 	add.w	r6, r8, #2
 80070d8:	3e01      	subs	r6, #1
 80070da:	4638      	mov	r0, r7
 80070dc:	612e      	str	r6, [r5, #16]
 80070de:	4621      	mov	r1, r4
 80070e0:	f7ff fdda 	bl	8006c98 <_Bfree>
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80070ee:	3301      	adds	r3, #1
 80070f0:	e7c5      	b.n	800707e <__lshift+0x4a>
 80070f2:	3904      	subs	r1, #4
 80070f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070fc:	459c      	cmp	ip, r3
 80070fe:	d8f9      	bhi.n	80070f4 <__lshift+0xc0>
 8007100:	e7ea      	b.n	80070d8 <__lshift+0xa4>
 8007102:	bf00      	nop
 8007104:	08007bf0 	.word	0x08007bf0
 8007108:	08007c01 	.word	0x08007c01

0800710c <__mcmp>:
 800710c:	690a      	ldr	r2, [r1, #16]
 800710e:	4603      	mov	r3, r0
 8007110:	6900      	ldr	r0, [r0, #16]
 8007112:	1a80      	subs	r0, r0, r2
 8007114:	b530      	push	{r4, r5, lr}
 8007116:	d10e      	bne.n	8007136 <__mcmp+0x2a>
 8007118:	3314      	adds	r3, #20
 800711a:	3114      	adds	r1, #20
 800711c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007120:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007124:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007128:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800712c:	4295      	cmp	r5, r2
 800712e:	d003      	beq.n	8007138 <__mcmp+0x2c>
 8007130:	d205      	bcs.n	800713e <__mcmp+0x32>
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	bd30      	pop	{r4, r5, pc}
 8007138:	42a3      	cmp	r3, r4
 800713a:	d3f3      	bcc.n	8007124 <__mcmp+0x18>
 800713c:	e7fb      	b.n	8007136 <__mcmp+0x2a>
 800713e:	2001      	movs	r0, #1
 8007140:	e7f9      	b.n	8007136 <__mcmp+0x2a>
	...

08007144 <__mdiff>:
 8007144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	4689      	mov	r9, r1
 800714a:	4606      	mov	r6, r0
 800714c:	4611      	mov	r1, r2
 800714e:	4648      	mov	r0, r9
 8007150:	4614      	mov	r4, r2
 8007152:	f7ff ffdb 	bl	800710c <__mcmp>
 8007156:	1e05      	subs	r5, r0, #0
 8007158:	d112      	bne.n	8007180 <__mdiff+0x3c>
 800715a:	4629      	mov	r1, r5
 800715c:	4630      	mov	r0, r6
 800715e:	f7ff fd5b 	bl	8006c18 <_Balloc>
 8007162:	4602      	mov	r2, r0
 8007164:	b928      	cbnz	r0, 8007172 <__mdiff+0x2e>
 8007166:	4b3f      	ldr	r3, [pc, #252]	@ (8007264 <__mdiff+0x120>)
 8007168:	f240 2137 	movw	r1, #567	@ 0x237
 800716c:	483e      	ldr	r0, [pc, #248]	@ (8007268 <__mdiff+0x124>)
 800716e:	f000 fb75 	bl	800785c <__assert_func>
 8007172:	2301      	movs	r3, #1
 8007174:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007178:	4610      	mov	r0, r2
 800717a:	b003      	add	sp, #12
 800717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007180:	bfbc      	itt	lt
 8007182:	464b      	movlt	r3, r9
 8007184:	46a1      	movlt	r9, r4
 8007186:	4630      	mov	r0, r6
 8007188:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800718c:	bfba      	itte	lt
 800718e:	461c      	movlt	r4, r3
 8007190:	2501      	movlt	r5, #1
 8007192:	2500      	movge	r5, #0
 8007194:	f7ff fd40 	bl	8006c18 <_Balloc>
 8007198:	4602      	mov	r2, r0
 800719a:	b918      	cbnz	r0, 80071a4 <__mdiff+0x60>
 800719c:	4b31      	ldr	r3, [pc, #196]	@ (8007264 <__mdiff+0x120>)
 800719e:	f240 2145 	movw	r1, #581	@ 0x245
 80071a2:	e7e3      	b.n	800716c <__mdiff+0x28>
 80071a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071a8:	6926      	ldr	r6, [r4, #16]
 80071aa:	60c5      	str	r5, [r0, #12]
 80071ac:	f109 0310 	add.w	r3, r9, #16
 80071b0:	f109 0514 	add.w	r5, r9, #20
 80071b4:	f104 0e14 	add.w	lr, r4, #20
 80071b8:	f100 0b14 	add.w	fp, r0, #20
 80071bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071c4:	9301      	str	r3, [sp, #4]
 80071c6:	46d9      	mov	r9, fp
 80071c8:	f04f 0c00 	mov.w	ip, #0
 80071cc:	9b01      	ldr	r3, [sp, #4]
 80071ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	fa1f f38a 	uxth.w	r3, sl
 80071dc:	4619      	mov	r1, r3
 80071de:	b283      	uxth	r3, r0
 80071e0:	1acb      	subs	r3, r1, r3
 80071e2:	0c00      	lsrs	r0, r0, #16
 80071e4:	4463      	add	r3, ip
 80071e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071f4:	4576      	cmp	r6, lr
 80071f6:	f849 3b04 	str.w	r3, [r9], #4
 80071fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071fe:	d8e5      	bhi.n	80071cc <__mdiff+0x88>
 8007200:	1b33      	subs	r3, r6, r4
 8007202:	3b15      	subs	r3, #21
 8007204:	f023 0303 	bic.w	r3, r3, #3
 8007208:	3415      	adds	r4, #21
 800720a:	3304      	adds	r3, #4
 800720c:	42a6      	cmp	r6, r4
 800720e:	bf38      	it	cc
 8007210:	2304      	movcc	r3, #4
 8007212:	441d      	add	r5, r3
 8007214:	445b      	add	r3, fp
 8007216:	461e      	mov	r6, r3
 8007218:	462c      	mov	r4, r5
 800721a:	4544      	cmp	r4, r8
 800721c:	d30e      	bcc.n	800723c <__mdiff+0xf8>
 800721e:	f108 0103 	add.w	r1, r8, #3
 8007222:	1b49      	subs	r1, r1, r5
 8007224:	f021 0103 	bic.w	r1, r1, #3
 8007228:	3d03      	subs	r5, #3
 800722a:	45a8      	cmp	r8, r5
 800722c:	bf38      	it	cc
 800722e:	2100      	movcc	r1, #0
 8007230:	440b      	add	r3, r1
 8007232:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007236:	b191      	cbz	r1, 800725e <__mdiff+0x11a>
 8007238:	6117      	str	r7, [r2, #16]
 800723a:	e79d      	b.n	8007178 <__mdiff+0x34>
 800723c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007240:	46e6      	mov	lr, ip
 8007242:	0c08      	lsrs	r0, r1, #16
 8007244:	fa1c fc81 	uxtah	ip, ip, r1
 8007248:	4471      	add	r1, lr
 800724a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800724e:	b289      	uxth	r1, r1
 8007250:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007254:	f846 1b04 	str.w	r1, [r6], #4
 8007258:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800725c:	e7dd      	b.n	800721a <__mdiff+0xd6>
 800725e:	3f01      	subs	r7, #1
 8007260:	e7e7      	b.n	8007232 <__mdiff+0xee>
 8007262:	bf00      	nop
 8007264:	08007bf0 	.word	0x08007bf0
 8007268:	08007c01 	.word	0x08007c01

0800726c <__d2b>:
 800726c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007270:	460f      	mov	r7, r1
 8007272:	2101      	movs	r1, #1
 8007274:	ec59 8b10 	vmov	r8, r9, d0
 8007278:	4616      	mov	r6, r2
 800727a:	f7ff fccd 	bl	8006c18 <_Balloc>
 800727e:	4604      	mov	r4, r0
 8007280:	b930      	cbnz	r0, 8007290 <__d2b+0x24>
 8007282:	4602      	mov	r2, r0
 8007284:	4b23      	ldr	r3, [pc, #140]	@ (8007314 <__d2b+0xa8>)
 8007286:	4824      	ldr	r0, [pc, #144]	@ (8007318 <__d2b+0xac>)
 8007288:	f240 310f 	movw	r1, #783	@ 0x30f
 800728c:	f000 fae6 	bl	800785c <__assert_func>
 8007290:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007294:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007298:	b10d      	cbz	r5, 800729e <__d2b+0x32>
 800729a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	f1b8 0300 	subs.w	r3, r8, #0
 80072a4:	d023      	beq.n	80072ee <__d2b+0x82>
 80072a6:	4668      	mov	r0, sp
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	f7ff fd7c 	bl	8006da6 <__lo0bits>
 80072ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072b2:	b1d0      	cbz	r0, 80072ea <__d2b+0x7e>
 80072b4:	f1c0 0320 	rsb	r3, r0, #32
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	430b      	orrs	r3, r1
 80072be:	40c2      	lsrs	r2, r0
 80072c0:	6163      	str	r3, [r4, #20]
 80072c2:	9201      	str	r2, [sp, #4]
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	61a3      	str	r3, [r4, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bf0c      	ite	eq
 80072cc:	2201      	moveq	r2, #1
 80072ce:	2202      	movne	r2, #2
 80072d0:	6122      	str	r2, [r4, #16]
 80072d2:	b1a5      	cbz	r5, 80072fe <__d2b+0x92>
 80072d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072d8:	4405      	add	r5, r0
 80072da:	603d      	str	r5, [r7, #0]
 80072dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072e0:	6030      	str	r0, [r6, #0]
 80072e2:	4620      	mov	r0, r4
 80072e4:	b003      	add	sp, #12
 80072e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ea:	6161      	str	r1, [r4, #20]
 80072ec:	e7ea      	b.n	80072c4 <__d2b+0x58>
 80072ee:	a801      	add	r0, sp, #4
 80072f0:	f7ff fd59 	bl	8006da6 <__lo0bits>
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	6163      	str	r3, [r4, #20]
 80072f8:	3020      	adds	r0, #32
 80072fa:	2201      	movs	r2, #1
 80072fc:	e7e8      	b.n	80072d0 <__d2b+0x64>
 80072fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007302:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007306:	6038      	str	r0, [r7, #0]
 8007308:	6918      	ldr	r0, [r3, #16]
 800730a:	f7ff fd2d 	bl	8006d68 <__hi0bits>
 800730e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007312:	e7e5      	b.n	80072e0 <__d2b+0x74>
 8007314:	08007bf0 	.word	0x08007bf0
 8007318:	08007c01 	.word	0x08007c01

0800731c <__sfputc_r>:
 800731c:	6893      	ldr	r3, [r2, #8]
 800731e:	3b01      	subs	r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	b410      	push	{r4}
 8007324:	6093      	str	r3, [r2, #8]
 8007326:	da08      	bge.n	800733a <__sfputc_r+0x1e>
 8007328:	6994      	ldr	r4, [r2, #24]
 800732a:	42a3      	cmp	r3, r4
 800732c:	db01      	blt.n	8007332 <__sfputc_r+0x16>
 800732e:	290a      	cmp	r1, #10
 8007330:	d103      	bne.n	800733a <__sfputc_r+0x1e>
 8007332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007336:	f000 b9df 	b.w	80076f8 <__swbuf_r>
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	1c58      	adds	r0, r3, #1
 800733e:	6010      	str	r0, [r2, #0]
 8007340:	7019      	strb	r1, [r3, #0]
 8007342:	4608      	mov	r0, r1
 8007344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007348:	4770      	bx	lr

0800734a <__sfputs_r>:
 800734a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	4614      	mov	r4, r2
 8007352:	18d5      	adds	r5, r2, r3
 8007354:	42ac      	cmp	r4, r5
 8007356:	d101      	bne.n	800735c <__sfputs_r+0x12>
 8007358:	2000      	movs	r0, #0
 800735a:	e007      	b.n	800736c <__sfputs_r+0x22>
 800735c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007360:	463a      	mov	r2, r7
 8007362:	4630      	mov	r0, r6
 8007364:	f7ff ffda 	bl	800731c <__sfputc_r>
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d1f3      	bne.n	8007354 <__sfputs_r+0xa>
 800736c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007370 <_vfiprintf_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	460d      	mov	r5, r1
 8007376:	b09d      	sub	sp, #116	@ 0x74
 8007378:	4614      	mov	r4, r2
 800737a:	4698      	mov	r8, r3
 800737c:	4606      	mov	r6, r0
 800737e:	b118      	cbz	r0, 8007388 <_vfiprintf_r+0x18>
 8007380:	6a03      	ldr	r3, [r0, #32]
 8007382:	b90b      	cbnz	r3, 8007388 <_vfiprintf_r+0x18>
 8007384:	f7fe fbf0 	bl	8005b68 <__sinit>
 8007388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800738a:	07d9      	lsls	r1, r3, #31
 800738c:	d405      	bmi.n	800739a <_vfiprintf_r+0x2a>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	059a      	lsls	r2, r3, #22
 8007392:	d402      	bmi.n	800739a <_vfiprintf_r+0x2a>
 8007394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007396:	f7fe fcf0 	bl	8005d7a <__retarget_lock_acquire_recursive>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	071b      	lsls	r3, r3, #28
 800739e:	d501      	bpl.n	80073a4 <_vfiprintf_r+0x34>
 80073a0:	692b      	ldr	r3, [r5, #16]
 80073a2:	b99b      	cbnz	r3, 80073cc <_vfiprintf_r+0x5c>
 80073a4:	4629      	mov	r1, r5
 80073a6:	4630      	mov	r0, r6
 80073a8:	f000 f9e4 	bl	8007774 <__swsetup_r>
 80073ac:	b170      	cbz	r0, 80073cc <_vfiprintf_r+0x5c>
 80073ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073b0:	07dc      	lsls	r4, r3, #31
 80073b2:	d504      	bpl.n	80073be <_vfiprintf_r+0x4e>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	b01d      	add	sp, #116	@ 0x74
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	89ab      	ldrh	r3, [r5, #12]
 80073c0:	0598      	lsls	r0, r3, #22
 80073c2:	d4f7      	bmi.n	80073b4 <_vfiprintf_r+0x44>
 80073c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073c6:	f7fe fcd9 	bl	8005d7c <__retarget_lock_release_recursive>
 80073ca:	e7f3      	b.n	80073b4 <_vfiprintf_r+0x44>
 80073cc:	2300      	movs	r3, #0
 80073ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d0:	2320      	movs	r3, #32
 80073d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80073da:	2330      	movs	r3, #48	@ 0x30
 80073dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800758c <_vfiprintf_r+0x21c>
 80073e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073e4:	f04f 0901 	mov.w	r9, #1
 80073e8:	4623      	mov	r3, r4
 80073ea:	469a      	mov	sl, r3
 80073ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f0:	b10a      	cbz	r2, 80073f6 <_vfiprintf_r+0x86>
 80073f2:	2a25      	cmp	r2, #37	@ 0x25
 80073f4:	d1f9      	bne.n	80073ea <_vfiprintf_r+0x7a>
 80073f6:	ebba 0b04 	subs.w	fp, sl, r4
 80073fa:	d00b      	beq.n	8007414 <_vfiprintf_r+0xa4>
 80073fc:	465b      	mov	r3, fp
 80073fe:	4622      	mov	r2, r4
 8007400:	4629      	mov	r1, r5
 8007402:	4630      	mov	r0, r6
 8007404:	f7ff ffa1 	bl	800734a <__sfputs_r>
 8007408:	3001      	adds	r0, #1
 800740a:	f000 80a7 	beq.w	800755c <_vfiprintf_r+0x1ec>
 800740e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007410:	445a      	add	r2, fp
 8007412:	9209      	str	r2, [sp, #36]	@ 0x24
 8007414:	f89a 3000 	ldrb.w	r3, [sl]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 809f 	beq.w	800755c <_vfiprintf_r+0x1ec>
 800741e:	2300      	movs	r3, #0
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007428:	f10a 0a01 	add.w	sl, sl, #1
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	9307      	str	r3, [sp, #28]
 8007430:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007434:	931a      	str	r3, [sp, #104]	@ 0x68
 8007436:	4654      	mov	r4, sl
 8007438:	2205      	movs	r2, #5
 800743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743e:	4853      	ldr	r0, [pc, #332]	@ (800758c <_vfiprintf_r+0x21c>)
 8007440:	f7f8 fec6 	bl	80001d0 <memchr>
 8007444:	9a04      	ldr	r2, [sp, #16]
 8007446:	b9d8      	cbnz	r0, 8007480 <_vfiprintf_r+0x110>
 8007448:	06d1      	lsls	r1, r2, #27
 800744a:	bf44      	itt	mi
 800744c:	2320      	movmi	r3, #32
 800744e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007452:	0713      	lsls	r3, r2, #28
 8007454:	bf44      	itt	mi
 8007456:	232b      	movmi	r3, #43	@ 0x2b
 8007458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800745c:	f89a 3000 	ldrb.w	r3, [sl]
 8007460:	2b2a      	cmp	r3, #42	@ 0x2a
 8007462:	d015      	beq.n	8007490 <_vfiprintf_r+0x120>
 8007464:	9a07      	ldr	r2, [sp, #28]
 8007466:	4654      	mov	r4, sl
 8007468:	2000      	movs	r0, #0
 800746a:	f04f 0c0a 	mov.w	ip, #10
 800746e:	4621      	mov	r1, r4
 8007470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007474:	3b30      	subs	r3, #48	@ 0x30
 8007476:	2b09      	cmp	r3, #9
 8007478:	d94b      	bls.n	8007512 <_vfiprintf_r+0x1a2>
 800747a:	b1b0      	cbz	r0, 80074aa <_vfiprintf_r+0x13a>
 800747c:	9207      	str	r2, [sp, #28]
 800747e:	e014      	b.n	80074aa <_vfiprintf_r+0x13a>
 8007480:	eba0 0308 	sub.w	r3, r0, r8
 8007484:	fa09 f303 	lsl.w	r3, r9, r3
 8007488:	4313      	orrs	r3, r2
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	46a2      	mov	sl, r4
 800748e:	e7d2      	b.n	8007436 <_vfiprintf_r+0xc6>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	1d19      	adds	r1, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	9103      	str	r1, [sp, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfbb      	ittet	lt
 800749c:	425b      	neglt	r3, r3
 800749e:	f042 0202 	orrlt.w	r2, r2, #2
 80074a2:	9307      	strge	r3, [sp, #28]
 80074a4:	9307      	strlt	r3, [sp, #28]
 80074a6:	bfb8      	it	lt
 80074a8:	9204      	strlt	r2, [sp, #16]
 80074aa:	7823      	ldrb	r3, [r4, #0]
 80074ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ae:	d10a      	bne.n	80074c6 <_vfiprintf_r+0x156>
 80074b0:	7863      	ldrb	r3, [r4, #1]
 80074b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b4:	d132      	bne.n	800751c <_vfiprintf_r+0x1ac>
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	1d1a      	adds	r2, r3, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	9203      	str	r2, [sp, #12]
 80074be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074c2:	3402      	adds	r4, #2
 80074c4:	9305      	str	r3, [sp, #20]
 80074c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800759c <_vfiprintf_r+0x22c>
 80074ca:	7821      	ldrb	r1, [r4, #0]
 80074cc:	2203      	movs	r2, #3
 80074ce:	4650      	mov	r0, sl
 80074d0:	f7f8 fe7e 	bl	80001d0 <memchr>
 80074d4:	b138      	cbz	r0, 80074e6 <_vfiprintf_r+0x176>
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	eba0 000a 	sub.w	r0, r0, sl
 80074dc:	2240      	movs	r2, #64	@ 0x40
 80074de:	4082      	lsls	r2, r0
 80074e0:	4313      	orrs	r3, r2
 80074e2:	3401      	adds	r4, #1
 80074e4:	9304      	str	r3, [sp, #16]
 80074e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ea:	4829      	ldr	r0, [pc, #164]	@ (8007590 <_vfiprintf_r+0x220>)
 80074ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074f0:	2206      	movs	r2, #6
 80074f2:	f7f8 fe6d 	bl	80001d0 <memchr>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d03f      	beq.n	800757a <_vfiprintf_r+0x20a>
 80074fa:	4b26      	ldr	r3, [pc, #152]	@ (8007594 <_vfiprintf_r+0x224>)
 80074fc:	bb1b      	cbnz	r3, 8007546 <_vfiprintf_r+0x1d6>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	3307      	adds	r3, #7
 8007502:	f023 0307 	bic.w	r3, r3, #7
 8007506:	3308      	adds	r3, #8
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750c:	443b      	add	r3, r7
 800750e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007510:	e76a      	b.n	80073e8 <_vfiprintf_r+0x78>
 8007512:	fb0c 3202 	mla	r2, ip, r2, r3
 8007516:	460c      	mov	r4, r1
 8007518:	2001      	movs	r0, #1
 800751a:	e7a8      	b.n	800746e <_vfiprintf_r+0xfe>
 800751c:	2300      	movs	r3, #0
 800751e:	3401      	adds	r4, #1
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	4619      	mov	r1, r3
 8007524:	f04f 0c0a 	mov.w	ip, #10
 8007528:	4620      	mov	r0, r4
 800752a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800752e:	3a30      	subs	r2, #48	@ 0x30
 8007530:	2a09      	cmp	r2, #9
 8007532:	d903      	bls.n	800753c <_vfiprintf_r+0x1cc>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0c6      	beq.n	80074c6 <_vfiprintf_r+0x156>
 8007538:	9105      	str	r1, [sp, #20]
 800753a:	e7c4      	b.n	80074c6 <_vfiprintf_r+0x156>
 800753c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007540:	4604      	mov	r4, r0
 8007542:	2301      	movs	r3, #1
 8007544:	e7f0      	b.n	8007528 <_vfiprintf_r+0x1b8>
 8007546:	ab03      	add	r3, sp, #12
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	462a      	mov	r2, r5
 800754c:	4b12      	ldr	r3, [pc, #72]	@ (8007598 <_vfiprintf_r+0x228>)
 800754e:	a904      	add	r1, sp, #16
 8007550:	4630      	mov	r0, r6
 8007552:	f7fd fec5 	bl	80052e0 <_printf_float>
 8007556:	4607      	mov	r7, r0
 8007558:	1c78      	adds	r0, r7, #1
 800755a:	d1d6      	bne.n	800750a <_vfiprintf_r+0x19a>
 800755c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d405      	bmi.n	800756e <_vfiprintf_r+0x1fe>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	059a      	lsls	r2, r3, #22
 8007566:	d402      	bmi.n	800756e <_vfiprintf_r+0x1fe>
 8007568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800756a:	f7fe fc07 	bl	8005d7c <__retarget_lock_release_recursive>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	065b      	lsls	r3, r3, #25
 8007572:	f53f af1f 	bmi.w	80073b4 <_vfiprintf_r+0x44>
 8007576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007578:	e71e      	b.n	80073b8 <_vfiprintf_r+0x48>
 800757a:	ab03      	add	r3, sp, #12
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	462a      	mov	r2, r5
 8007580:	4b05      	ldr	r3, [pc, #20]	@ (8007598 <_vfiprintf_r+0x228>)
 8007582:	a904      	add	r1, sp, #16
 8007584:	4630      	mov	r0, r6
 8007586:	f7fe f943 	bl	8005810 <_printf_i>
 800758a:	e7e4      	b.n	8007556 <_vfiprintf_r+0x1e6>
 800758c:	08007d58 	.word	0x08007d58
 8007590:	08007d62 	.word	0x08007d62
 8007594:	080052e1 	.word	0x080052e1
 8007598:	0800734b 	.word	0x0800734b
 800759c:	08007d5e 	.word	0x08007d5e

080075a0 <__sflush_r>:
 80075a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	0716      	lsls	r6, r2, #28
 80075aa:	4605      	mov	r5, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	d454      	bmi.n	800765a <__sflush_r+0xba>
 80075b0:	684b      	ldr	r3, [r1, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc02      	bgt.n	80075bc <__sflush_r+0x1c>
 80075b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dd48      	ble.n	800764e <__sflush_r+0xae>
 80075bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075be:	2e00      	cmp	r6, #0
 80075c0:	d045      	beq.n	800764e <__sflush_r+0xae>
 80075c2:	2300      	movs	r3, #0
 80075c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075c8:	682f      	ldr	r7, [r5, #0]
 80075ca:	6a21      	ldr	r1, [r4, #32]
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	d030      	beq.n	8007632 <__sflush_r+0x92>
 80075d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	0759      	lsls	r1, r3, #29
 80075d6:	d505      	bpl.n	80075e4 <__sflush_r+0x44>
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075de:	b10b      	cbz	r3, 80075e4 <__sflush_r+0x44>
 80075e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e8:	6a21      	ldr	r1, [r4, #32]
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b0      	blx	r6
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	d106      	bne.n	8007602 <__sflush_r+0x62>
 80075f4:	6829      	ldr	r1, [r5, #0]
 80075f6:	291d      	cmp	r1, #29
 80075f8:	d82b      	bhi.n	8007652 <__sflush_r+0xb2>
 80075fa:	4a2a      	ldr	r2, [pc, #168]	@ (80076a4 <__sflush_r+0x104>)
 80075fc:	410a      	asrs	r2, r1
 80075fe:	07d6      	lsls	r6, r2, #31
 8007600:	d427      	bmi.n	8007652 <__sflush_r+0xb2>
 8007602:	2200      	movs	r2, #0
 8007604:	6062      	str	r2, [r4, #4]
 8007606:	04d9      	lsls	r1, r3, #19
 8007608:	6922      	ldr	r2, [r4, #16]
 800760a:	6022      	str	r2, [r4, #0]
 800760c:	d504      	bpl.n	8007618 <__sflush_r+0x78>
 800760e:	1c42      	adds	r2, r0, #1
 8007610:	d101      	bne.n	8007616 <__sflush_r+0x76>
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	b903      	cbnz	r3, 8007618 <__sflush_r+0x78>
 8007616:	6560      	str	r0, [r4, #84]	@ 0x54
 8007618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800761a:	602f      	str	r7, [r5, #0]
 800761c:	b1b9      	cbz	r1, 800764e <__sflush_r+0xae>
 800761e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007622:	4299      	cmp	r1, r3
 8007624:	d002      	beq.n	800762c <__sflush_r+0x8c>
 8007626:	4628      	mov	r0, r5
 8007628:	f7ff f9f6 	bl	8006a18 <_free_r>
 800762c:	2300      	movs	r3, #0
 800762e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007630:	e00d      	b.n	800764e <__sflush_r+0xae>
 8007632:	2301      	movs	r3, #1
 8007634:	4628      	mov	r0, r5
 8007636:	47b0      	blx	r6
 8007638:	4602      	mov	r2, r0
 800763a:	1c50      	adds	r0, r2, #1
 800763c:	d1c9      	bne.n	80075d2 <__sflush_r+0x32>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0c6      	beq.n	80075d2 <__sflush_r+0x32>
 8007644:	2b1d      	cmp	r3, #29
 8007646:	d001      	beq.n	800764c <__sflush_r+0xac>
 8007648:	2b16      	cmp	r3, #22
 800764a:	d11e      	bne.n	800768a <__sflush_r+0xea>
 800764c:	602f      	str	r7, [r5, #0]
 800764e:	2000      	movs	r0, #0
 8007650:	e022      	b.n	8007698 <__sflush_r+0xf8>
 8007652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007656:	b21b      	sxth	r3, r3
 8007658:	e01b      	b.n	8007692 <__sflush_r+0xf2>
 800765a:	690f      	ldr	r7, [r1, #16]
 800765c:	2f00      	cmp	r7, #0
 800765e:	d0f6      	beq.n	800764e <__sflush_r+0xae>
 8007660:	0793      	lsls	r3, r2, #30
 8007662:	680e      	ldr	r6, [r1, #0]
 8007664:	bf08      	it	eq
 8007666:	694b      	ldreq	r3, [r1, #20]
 8007668:	600f      	str	r7, [r1, #0]
 800766a:	bf18      	it	ne
 800766c:	2300      	movne	r3, #0
 800766e:	eba6 0807 	sub.w	r8, r6, r7
 8007672:	608b      	str	r3, [r1, #8]
 8007674:	f1b8 0f00 	cmp.w	r8, #0
 8007678:	dde9      	ble.n	800764e <__sflush_r+0xae>
 800767a:	6a21      	ldr	r1, [r4, #32]
 800767c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800767e:	4643      	mov	r3, r8
 8007680:	463a      	mov	r2, r7
 8007682:	4628      	mov	r0, r5
 8007684:	47b0      	blx	r6
 8007686:	2800      	cmp	r0, #0
 8007688:	dc08      	bgt.n	800769c <__sflush_r+0xfc>
 800768a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	4407      	add	r7, r0
 800769e:	eba8 0800 	sub.w	r8, r8, r0
 80076a2:	e7e7      	b.n	8007674 <__sflush_r+0xd4>
 80076a4:	dfbffffe 	.word	0xdfbffffe

080076a8 <_fflush_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	690b      	ldr	r3, [r1, #16]
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	b913      	cbnz	r3, 80076b8 <_fflush_r+0x10>
 80076b2:	2500      	movs	r5, #0
 80076b4:	4628      	mov	r0, r5
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	b118      	cbz	r0, 80076c2 <_fflush_r+0x1a>
 80076ba:	6a03      	ldr	r3, [r0, #32]
 80076bc:	b90b      	cbnz	r3, 80076c2 <_fflush_r+0x1a>
 80076be:	f7fe fa53 	bl	8005b68 <__sinit>
 80076c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f3      	beq.n	80076b2 <_fflush_r+0xa>
 80076ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076cc:	07d0      	lsls	r0, r2, #31
 80076ce:	d404      	bmi.n	80076da <_fflush_r+0x32>
 80076d0:	0599      	lsls	r1, r3, #22
 80076d2:	d402      	bmi.n	80076da <_fflush_r+0x32>
 80076d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076d6:	f7fe fb50 	bl	8005d7a <__retarget_lock_acquire_recursive>
 80076da:	4628      	mov	r0, r5
 80076dc:	4621      	mov	r1, r4
 80076de:	f7ff ff5f 	bl	80075a0 <__sflush_r>
 80076e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076e4:	07da      	lsls	r2, r3, #31
 80076e6:	4605      	mov	r5, r0
 80076e8:	d4e4      	bmi.n	80076b4 <_fflush_r+0xc>
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	059b      	lsls	r3, r3, #22
 80076ee:	d4e1      	bmi.n	80076b4 <_fflush_r+0xc>
 80076f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076f2:	f7fe fb43 	bl	8005d7c <__retarget_lock_release_recursive>
 80076f6:	e7dd      	b.n	80076b4 <_fflush_r+0xc>

080076f8 <__swbuf_r>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	460e      	mov	r6, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	4605      	mov	r5, r0
 8007700:	b118      	cbz	r0, 800770a <__swbuf_r+0x12>
 8007702:	6a03      	ldr	r3, [r0, #32]
 8007704:	b90b      	cbnz	r3, 800770a <__swbuf_r+0x12>
 8007706:	f7fe fa2f 	bl	8005b68 <__sinit>
 800770a:	69a3      	ldr	r3, [r4, #24]
 800770c:	60a3      	str	r3, [r4, #8]
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	071a      	lsls	r2, r3, #28
 8007712:	d501      	bpl.n	8007718 <__swbuf_r+0x20>
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	b943      	cbnz	r3, 800772a <__swbuf_r+0x32>
 8007718:	4621      	mov	r1, r4
 800771a:	4628      	mov	r0, r5
 800771c:	f000 f82a 	bl	8007774 <__swsetup_r>
 8007720:	b118      	cbz	r0, 800772a <__swbuf_r+0x32>
 8007722:	f04f 37ff 	mov.w	r7, #4294967295
 8007726:	4638      	mov	r0, r7
 8007728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	6922      	ldr	r2, [r4, #16]
 800772e:	1a98      	subs	r0, r3, r2
 8007730:	6963      	ldr	r3, [r4, #20]
 8007732:	b2f6      	uxtb	r6, r6
 8007734:	4283      	cmp	r3, r0
 8007736:	4637      	mov	r7, r6
 8007738:	dc05      	bgt.n	8007746 <__swbuf_r+0x4e>
 800773a:	4621      	mov	r1, r4
 800773c:	4628      	mov	r0, r5
 800773e:	f7ff ffb3 	bl	80076a8 <_fflush_r>
 8007742:	2800      	cmp	r0, #0
 8007744:	d1ed      	bne.n	8007722 <__swbuf_r+0x2a>
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	3b01      	subs	r3, #1
 800774a:	60a3      	str	r3, [r4, #8]
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	6022      	str	r2, [r4, #0]
 8007752:	701e      	strb	r6, [r3, #0]
 8007754:	6962      	ldr	r2, [r4, #20]
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	429a      	cmp	r2, r3
 800775a:	d004      	beq.n	8007766 <__swbuf_r+0x6e>
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	07db      	lsls	r3, r3, #31
 8007760:	d5e1      	bpl.n	8007726 <__swbuf_r+0x2e>
 8007762:	2e0a      	cmp	r6, #10
 8007764:	d1df      	bne.n	8007726 <__swbuf_r+0x2e>
 8007766:	4621      	mov	r1, r4
 8007768:	4628      	mov	r0, r5
 800776a:	f7ff ff9d 	bl	80076a8 <_fflush_r>
 800776e:	2800      	cmp	r0, #0
 8007770:	d0d9      	beq.n	8007726 <__swbuf_r+0x2e>
 8007772:	e7d6      	b.n	8007722 <__swbuf_r+0x2a>

08007774 <__swsetup_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4b29      	ldr	r3, [pc, #164]	@ (800781c <__swsetup_r+0xa8>)
 8007778:	4605      	mov	r5, r0
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	460c      	mov	r4, r1
 800777e:	b118      	cbz	r0, 8007788 <__swsetup_r+0x14>
 8007780:	6a03      	ldr	r3, [r0, #32]
 8007782:	b90b      	cbnz	r3, 8007788 <__swsetup_r+0x14>
 8007784:	f7fe f9f0 	bl	8005b68 <__sinit>
 8007788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800778c:	0719      	lsls	r1, r3, #28
 800778e:	d422      	bmi.n	80077d6 <__swsetup_r+0x62>
 8007790:	06da      	lsls	r2, r3, #27
 8007792:	d407      	bmi.n	80077a4 <__swsetup_r+0x30>
 8007794:	2209      	movs	r2, #9
 8007796:	602a      	str	r2, [r5, #0]
 8007798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	f04f 30ff 	mov.w	r0, #4294967295
 80077a2:	e033      	b.n	800780c <__swsetup_r+0x98>
 80077a4:	0758      	lsls	r0, r3, #29
 80077a6:	d512      	bpl.n	80077ce <__swsetup_r+0x5a>
 80077a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077aa:	b141      	cbz	r1, 80077be <__swsetup_r+0x4a>
 80077ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077b0:	4299      	cmp	r1, r3
 80077b2:	d002      	beq.n	80077ba <__swsetup_r+0x46>
 80077b4:	4628      	mov	r0, r5
 80077b6:	f7ff f92f 	bl	8006a18 <_free_r>
 80077ba:	2300      	movs	r3, #0
 80077bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	2300      	movs	r3, #0
 80077c8:	6063      	str	r3, [r4, #4]
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	f043 0308 	orr.w	r3, r3, #8
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	b94b      	cbnz	r3, 80077ee <__swsetup_r+0x7a>
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e4:	d003      	beq.n	80077ee <__swsetup_r+0x7a>
 80077e6:	4621      	mov	r1, r4
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 f8c1 	bl	8007970 <__smakebuf_r>
 80077ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f2:	f013 0201 	ands.w	r2, r3, #1
 80077f6:	d00a      	beq.n	800780e <__swsetup_r+0x9a>
 80077f8:	2200      	movs	r2, #0
 80077fa:	60a2      	str	r2, [r4, #8]
 80077fc:	6962      	ldr	r2, [r4, #20]
 80077fe:	4252      	negs	r2, r2
 8007800:	61a2      	str	r2, [r4, #24]
 8007802:	6922      	ldr	r2, [r4, #16]
 8007804:	b942      	cbnz	r2, 8007818 <__swsetup_r+0xa4>
 8007806:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800780a:	d1c5      	bne.n	8007798 <__swsetup_r+0x24>
 800780c:	bd38      	pop	{r3, r4, r5, pc}
 800780e:	0799      	lsls	r1, r3, #30
 8007810:	bf58      	it	pl
 8007812:	6962      	ldrpl	r2, [r4, #20]
 8007814:	60a2      	str	r2, [r4, #8]
 8007816:	e7f4      	b.n	8007802 <__swsetup_r+0x8e>
 8007818:	2000      	movs	r0, #0
 800781a:	e7f7      	b.n	800780c <__swsetup_r+0x98>
 800781c:	20000018 	.word	0x20000018

08007820 <_sbrk_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d06      	ldr	r5, [pc, #24]	@ (800783c <_sbrk_r+0x1c>)
 8007824:	2300      	movs	r3, #0
 8007826:	4604      	mov	r4, r0
 8007828:	4608      	mov	r0, r1
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	f7fa f8da 	bl	80019e4 <_sbrk>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_sbrk_r+0x1a>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_sbrk_r+0x1a>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000474 	.word	0x20000474

08007840 <memcpy>:
 8007840:	440a      	add	r2, r1
 8007842:	4291      	cmp	r1, r2
 8007844:	f100 33ff 	add.w	r3, r0, #4294967295
 8007848:	d100      	bne.n	800784c <memcpy+0xc>
 800784a:	4770      	bx	lr
 800784c:	b510      	push	{r4, lr}
 800784e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007856:	4291      	cmp	r1, r2
 8007858:	d1f9      	bne.n	800784e <memcpy+0xe>
 800785a:	bd10      	pop	{r4, pc}

0800785c <__assert_func>:
 800785c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800785e:	4614      	mov	r4, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4b09      	ldr	r3, [pc, #36]	@ (8007888 <__assert_func+0x2c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4605      	mov	r5, r0
 8007868:	68d8      	ldr	r0, [r3, #12]
 800786a:	b954      	cbnz	r4, 8007882 <__assert_func+0x26>
 800786c:	4b07      	ldr	r3, [pc, #28]	@ (800788c <__assert_func+0x30>)
 800786e:	461c      	mov	r4, r3
 8007870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007874:	9100      	str	r1, [sp, #0]
 8007876:	462b      	mov	r3, r5
 8007878:	4905      	ldr	r1, [pc, #20]	@ (8007890 <__assert_func+0x34>)
 800787a:	f000 f841 	bl	8007900 <fiprintf>
 800787e:	f000 f8d5 	bl	8007a2c <abort>
 8007882:	4b04      	ldr	r3, [pc, #16]	@ (8007894 <__assert_func+0x38>)
 8007884:	e7f4      	b.n	8007870 <__assert_func+0x14>
 8007886:	bf00      	nop
 8007888:	20000018 	.word	0x20000018
 800788c:	08007dae 	.word	0x08007dae
 8007890:	08007d80 	.word	0x08007d80
 8007894:	08007d73 	.word	0x08007d73

08007898 <_calloc_r>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	fba1 5402 	umull	r5, r4, r1, r2
 800789e:	b93c      	cbnz	r4, 80078b0 <_calloc_r+0x18>
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7ff f92d 	bl	8006b00 <_malloc_r>
 80078a6:	4606      	mov	r6, r0
 80078a8:	b928      	cbnz	r0, 80078b6 <_calloc_r+0x1e>
 80078aa:	2600      	movs	r6, #0
 80078ac:	4630      	mov	r0, r6
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	220c      	movs	r2, #12
 80078b2:	6002      	str	r2, [r0, #0]
 80078b4:	e7f9      	b.n	80078aa <_calloc_r+0x12>
 80078b6:	462a      	mov	r2, r5
 80078b8:	4621      	mov	r1, r4
 80078ba:	f7fe f9e0 	bl	8005c7e <memset>
 80078be:	e7f5      	b.n	80078ac <_calloc_r+0x14>

080078c0 <__ascii_mbtowc>:
 80078c0:	b082      	sub	sp, #8
 80078c2:	b901      	cbnz	r1, 80078c6 <__ascii_mbtowc+0x6>
 80078c4:	a901      	add	r1, sp, #4
 80078c6:	b142      	cbz	r2, 80078da <__ascii_mbtowc+0x1a>
 80078c8:	b14b      	cbz	r3, 80078de <__ascii_mbtowc+0x1e>
 80078ca:	7813      	ldrb	r3, [r2, #0]
 80078cc:	600b      	str	r3, [r1, #0]
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	1e10      	subs	r0, r2, #0
 80078d2:	bf18      	it	ne
 80078d4:	2001      	movne	r0, #1
 80078d6:	b002      	add	sp, #8
 80078d8:	4770      	bx	lr
 80078da:	4610      	mov	r0, r2
 80078dc:	e7fb      	b.n	80078d6 <__ascii_mbtowc+0x16>
 80078de:	f06f 0001 	mvn.w	r0, #1
 80078e2:	e7f8      	b.n	80078d6 <__ascii_mbtowc+0x16>

080078e4 <__ascii_wctomb>:
 80078e4:	4603      	mov	r3, r0
 80078e6:	4608      	mov	r0, r1
 80078e8:	b141      	cbz	r1, 80078fc <__ascii_wctomb+0x18>
 80078ea:	2aff      	cmp	r2, #255	@ 0xff
 80078ec:	d904      	bls.n	80078f8 <__ascii_wctomb+0x14>
 80078ee:	228a      	movs	r2, #138	@ 0x8a
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f04f 30ff 	mov.w	r0, #4294967295
 80078f6:	4770      	bx	lr
 80078f8:	700a      	strb	r2, [r1, #0]
 80078fa:	2001      	movs	r0, #1
 80078fc:	4770      	bx	lr
	...

08007900 <fiprintf>:
 8007900:	b40e      	push	{r1, r2, r3}
 8007902:	b503      	push	{r0, r1, lr}
 8007904:	4601      	mov	r1, r0
 8007906:	ab03      	add	r3, sp, #12
 8007908:	4805      	ldr	r0, [pc, #20]	@ (8007920 <fiprintf+0x20>)
 800790a:	f853 2b04 	ldr.w	r2, [r3], #4
 800790e:	6800      	ldr	r0, [r0, #0]
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	f7ff fd2d 	bl	8007370 <_vfiprintf_r>
 8007916:	b002      	add	sp, #8
 8007918:	f85d eb04 	ldr.w	lr, [sp], #4
 800791c:	b003      	add	sp, #12
 800791e:	4770      	bx	lr
 8007920:	20000018 	.word	0x20000018

08007924 <__swhatbuf_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	460c      	mov	r4, r1
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	2900      	cmp	r1, #0
 800792e:	b096      	sub	sp, #88	@ 0x58
 8007930:	4615      	mov	r5, r2
 8007932:	461e      	mov	r6, r3
 8007934:	da0d      	bge.n	8007952 <__swhatbuf_r+0x2e>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800793c:	f04f 0100 	mov.w	r1, #0
 8007940:	bf14      	ite	ne
 8007942:	2340      	movne	r3, #64	@ 0x40
 8007944:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007948:	2000      	movs	r0, #0
 800794a:	6031      	str	r1, [r6, #0]
 800794c:	602b      	str	r3, [r5, #0]
 800794e:	b016      	add	sp, #88	@ 0x58
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	466a      	mov	r2, sp
 8007954:	f000 f848 	bl	80079e8 <_fstat_r>
 8007958:	2800      	cmp	r0, #0
 800795a:	dbec      	blt.n	8007936 <__swhatbuf_r+0x12>
 800795c:	9901      	ldr	r1, [sp, #4]
 800795e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007962:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007966:	4259      	negs	r1, r3
 8007968:	4159      	adcs	r1, r3
 800796a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800796e:	e7eb      	b.n	8007948 <__swhatbuf_r+0x24>

08007970 <__smakebuf_r>:
 8007970:	898b      	ldrh	r3, [r1, #12]
 8007972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007974:	079d      	lsls	r5, r3, #30
 8007976:	4606      	mov	r6, r0
 8007978:	460c      	mov	r4, r1
 800797a:	d507      	bpl.n	800798c <__smakebuf_r+0x1c>
 800797c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	6123      	str	r3, [r4, #16]
 8007984:	2301      	movs	r3, #1
 8007986:	6163      	str	r3, [r4, #20]
 8007988:	b003      	add	sp, #12
 800798a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800798c:	ab01      	add	r3, sp, #4
 800798e:	466a      	mov	r2, sp
 8007990:	f7ff ffc8 	bl	8007924 <__swhatbuf_r>
 8007994:	9f00      	ldr	r7, [sp, #0]
 8007996:	4605      	mov	r5, r0
 8007998:	4639      	mov	r1, r7
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff f8b0 	bl	8006b00 <_malloc_r>
 80079a0:	b948      	cbnz	r0, 80079b6 <__smakebuf_r+0x46>
 80079a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a6:	059a      	lsls	r2, r3, #22
 80079a8:	d4ee      	bmi.n	8007988 <__smakebuf_r+0x18>
 80079aa:	f023 0303 	bic.w	r3, r3, #3
 80079ae:	f043 0302 	orr.w	r3, r3, #2
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	e7e2      	b.n	800797c <__smakebuf_r+0xc>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	6020      	str	r0, [r4, #0]
 80079ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	9b01      	ldr	r3, [sp, #4]
 80079c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079c6:	b15b      	cbz	r3, 80079e0 <__smakebuf_r+0x70>
 80079c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079cc:	4630      	mov	r0, r6
 80079ce:	f000 f81d 	bl	8007a0c <_isatty_r>
 80079d2:	b128      	cbz	r0, 80079e0 <__smakebuf_r+0x70>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	f043 0301 	orr.w	r3, r3, #1
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	431d      	orrs	r5, r3
 80079e4:	81a5      	strh	r5, [r4, #12]
 80079e6:	e7cf      	b.n	8007988 <__smakebuf_r+0x18>

080079e8 <_fstat_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4d07      	ldr	r5, [pc, #28]	@ (8007a08 <_fstat_r+0x20>)
 80079ec:	2300      	movs	r3, #0
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f7f9 ffcd 	bl	8001994 <_fstat>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d102      	bne.n	8007a04 <_fstat_r+0x1c>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	b103      	cbz	r3, 8007a04 <_fstat_r+0x1c>
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	20000474 	.word	0x20000474

08007a0c <_isatty_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4d06      	ldr	r5, [pc, #24]	@ (8007a28 <_isatty_r+0x1c>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7f9 ffcc 	bl	80019b4 <_isatty>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_isatty_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_isatty_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20000474 	.word	0x20000474

08007a2c <abort>:
 8007a2c:	b508      	push	{r3, lr}
 8007a2e:	2006      	movs	r0, #6
 8007a30:	f000 f82c 	bl	8007a8c <raise>
 8007a34:	2001      	movs	r0, #1
 8007a36:	f7f9 ff5d 	bl	80018f4 <_exit>

08007a3a <_raise_r>:
 8007a3a:	291f      	cmp	r1, #31
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4605      	mov	r5, r0
 8007a40:	460c      	mov	r4, r1
 8007a42:	d904      	bls.n	8007a4e <_raise_r+0x14>
 8007a44:	2316      	movs	r3, #22
 8007a46:	6003      	str	r3, [r0, #0]
 8007a48:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a50:	b112      	cbz	r2, 8007a58 <_raise_r+0x1e>
 8007a52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a56:	b94b      	cbnz	r3, 8007a6c <_raise_r+0x32>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 f831 	bl	8007ac0 <_getpid_r>
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4601      	mov	r1, r0
 8007a62:	4628      	mov	r0, r5
 8007a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a68:	f000 b818 	b.w	8007a9c <_kill_r>
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00a      	beq.n	8007a86 <_raise_r+0x4c>
 8007a70:	1c59      	adds	r1, r3, #1
 8007a72:	d103      	bne.n	8007a7c <_raise_r+0x42>
 8007a74:	2316      	movs	r3, #22
 8007a76:	6003      	str	r3, [r0, #0]
 8007a78:	2001      	movs	r0, #1
 8007a7a:	e7e7      	b.n	8007a4c <_raise_r+0x12>
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a82:	4620      	mov	r0, r4
 8007a84:	4798      	blx	r3
 8007a86:	2000      	movs	r0, #0
 8007a88:	e7e0      	b.n	8007a4c <_raise_r+0x12>
	...

08007a8c <raise>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	@ (8007a98 <raise+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	f7ff bfd2 	b.w	8007a3a <_raise_r>
 8007a96:	bf00      	nop
 8007a98:	20000018 	.word	0x20000018

08007a9c <_kill_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d07      	ldr	r5, [pc, #28]	@ (8007abc <_kill_r+0x20>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	602b      	str	r3, [r5, #0]
 8007aaa:	f7f9 ff13 	bl	80018d4 <_kill>
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	d102      	bne.n	8007ab8 <_kill_r+0x1c>
 8007ab2:	682b      	ldr	r3, [r5, #0]
 8007ab4:	b103      	cbz	r3, 8007ab8 <_kill_r+0x1c>
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	bd38      	pop	{r3, r4, r5, pc}
 8007aba:	bf00      	nop
 8007abc:	20000474 	.word	0x20000474

08007ac0 <_getpid_r>:
 8007ac0:	f7f9 bf00 	b.w	80018c4 <_getpid>

08007ac4 <_init>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr

08007ad0 <_fini>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr
