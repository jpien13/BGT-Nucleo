
BGT-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000436c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  080044fc  080044fc  000054fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004790  08004790  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004798  08004798  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800479c  0800479c  0000579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  080047fc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080047fc  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c130  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9d  00000000  00000000  000121bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00013e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085c  00000000  00000000  00014940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020170  00000000  00000000  0001519c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d141  00000000  00000000  0003530c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1103  00000000  00000000  0004244d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  00103594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001066b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044e4 	.word	0x080044e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080044e4 	.word	0x080044e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <bgt60ltr11_spi_read>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_read(uint8_t reg_addr, uint16_t *data) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[3];
    uint8_t rx_data[3] = {0, 0, 0};
 800057c:	4a20      	ldr	r2, [pc, #128]	@ (8000600 <bgt60ltr11_spi_read+0x90>)
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	4611      	mov	r1, r2
 8000586:	8019      	strh	r1, [r3, #0]
 8000588:	3302      	adds	r3, #2
 800058a:	0c12      	lsrs	r2, r2, #16
 800058c:	701a      	strb	r2, [r3, #0]

    /* We send the register address from where we want to read
     * and then we read 2 bytes with dummy data
     */
    tx_data[0] = (uint8_t)((reg_addr << 1) & 0xFE); //  shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (0)
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	f023 0301 	bic.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0; 								// Dummy byte (ignored by radar)
 800059c:	2300      	movs	r3, #0
 800059e:	737b      	strb	r3, [r7, #13]
    tx_data[2] = 0; 								// Dummy byte (ignored by radar)
 80005a0:	2300      	movs	r3, #0
 80005a2:	73bb      	strb	r3, [r7, #14]

    // CS low to start SPI transfer occurs here
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2110      	movs	r1, #16
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f000 ff44 	bl	8001438 <HAL_GPIO_WritePin>
    if(HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, sizeof(tx_data), 100) != HAL_OK) {
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	f107 010c 	add.w	r1, r7, #12
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2303      	movs	r3, #3
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <bgt60ltr11_spi_read+0x94>)
 80005c0:	f002 fa4c 	bl	8002a5c <HAL_SPI_TransmitReceive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d007      	beq.n	80005da <bgt60ltr11_spi_read+0x6a>
        HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f000 ff31 	bl	8001438 <HAL_GPIO_WritePin>
        return HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e00e      	b.n	80005f8 <bgt60ltr11_spi_read+0x88>
    }
    // CS high to end
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2110      	movs	r1, #16
 80005de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e2:	f000 ff29 	bl	8001438 <HAL_GPIO_WritePin>

    // After transmission, the 16-bit register value is reconstructed from the received bytes:
    *data = ((uint16_t)(rx_data[1] << 8) | (uint16_t)(rx_data[2]));
 80005e6:	7a7b      	ldrb	r3, [r7, #9]
 80005e8:	021b      	lsls	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	7aba      	ldrb	r2, [r7, #10]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	080044fc 	.word	0x080044fc
 8000604:	20000078 	.word	0x20000078

08000608 <bgt60ltr11_spi_write>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_write(uint8_t reg_addr, uint16_t data){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_data[3];
	uint16_t wrdata = data;
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	81fb      	strh	r3, [r7, #14]

	tx_data[0] = (uint8_t)((reg_addr << 1) | 0x01); // Shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (1)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	b25b      	sxtb	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (uint8_t)((wrdata >> 8) & 0xFF);   // Upper 8 bits of data (MSB first)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	0a1b      	lsrs	r3, r3, #8
 8000630:	b29b      	uxth	r3, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (uint8_t)(wrdata & 0xFF);			// Lower 8 bits of data
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	72bb      	strb	r3, [r7, #10]

    // CS low to start SPI transfer occurs here
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2110      	movs	r1, #16
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f000 fef8 	bl	8001438 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, tx_data, sizeof(tx_data)/sizeof(uint8_t), 100) != HAL_OK) {
 8000648:	f107 0108 	add.w	r1, r7, #8
 800064c:	2364      	movs	r3, #100	@ 0x64
 800064e:	2203      	movs	r2, #3
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <bgt60ltr11_spi_write+0x7c>)
 8000652:	f002 f88d 	bl	8002770 <HAL_SPI_Transmit>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d007      	beq.n	800066c <bgt60ltr11_spi_write+0x64>
		HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f000 fee8 	bl	8001438 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e006      	b.n	800067a <bgt60ltr11_spi_write+0x72>
	}
	// CS high to end
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2110      	movs	r1, #16
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f000 fee0 	bl	8001438 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000078 	.word	0x20000078

08000688 <bgt60ltr11_HW_reset>:

uint8_t bgt60ltr11_HW_reset(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 fed0 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000698:	200a      	movs	r0, #10
 800069a:	f000 fc59 	bl	8000f50 <HAL_Delay>
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f000 fec7 	bl	8001438 <HAL_GPIO_WritePin>
	return HAL_OK;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <bgt60ltr11_soft_reset>:
 *  Resampling can be triggered by setting the reset pin or activating the soft reset by writing the soft_reset
 *  bit (Reg15[15]).
 *  There are 56 Registers according to register overview on page 21
 *  Page 6 https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 */
uint8_t bgt60ltr11_soft_reset(uint8_t wait){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	bgt60ltr11_spi_write(0x0F, (1 << 15));
 80006ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006be:	200f      	movs	r0, #15
 80006c0:	f7ff ffa2 	bl	8000608 <bgt60ltr11_spi_write>
	uint16_t reg56 = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	81fb      	strh	r3, [r7, #14]
	uint16_t reg0 = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	81bb      	strh	r3, [r7, #12]

	if (wait){
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d027      	beq.n	8000722 <bgt60ltr11_soft_reset+0x72>
		// wait till init_done in REG56 is set
		for (volatile uint16_t i = 0; i < 2048; i++){
 80006d2:	2300      	movs	r3, #0
 80006d4:	817b      	strh	r3, [r7, #10]
 80006d6:	e01d      	b.n	8000714 <bgt60ltr11_soft_reset+0x64>
			bgt60ltr11_spi_read(0x38, &reg56);
 80006d8:	f107 030e 	add.w	r3, r7, #14
 80006dc:	4619      	mov	r1, r3
 80006de:	2038      	movs	r0, #56	@ 0x38
 80006e0:	f7ff ff46 	bl	8000570 <bgt60ltr11_spi_read>
			bgt60ltr11_spi_read(0x00, &reg0);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff ff40 	bl	8000570 <bgt60ltr11_spi_read>
			// check if REG0 has default values and REG56 bit init_done is set
			if (reg0 == 0 && reg56 & (1 << 13)){
 80006f0:	89bb      	ldrh	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d106      	bne.n	8000704 <bgt60ltr11_soft_reset+0x54>
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <bgt60ltr11_soft_reset+0x54>
				return HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	e00f      	b.n	8000724 <bgt60ltr11_soft_reset+0x74>
			}
			HAL_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fc23 	bl	8000f50 <HAL_Delay>
		for (volatile uint16_t i = 0; i < 2048; i++){
 800070a:	897b      	ldrh	r3, [r7, #10]
 800070c:	b29b      	uxth	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	b29b      	uxth	r3, r3
 8000712:	817b      	strh	r3, [r7, #10]
 8000714:	897b      	ldrh	r3, [r7, #10]
 8000716:	b29b      	uxth	r3, r3
 8000718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800071c:	d3dc      	bcc.n	80006d8 <bgt60ltr11_soft_reset+0x28>
		}
		return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e000      	b.n	8000724 <bgt60ltr11_soft_reset+0x74>
	}
	return HAL_OK;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <bgt60ltr11_ADC_Convert>:
 * A write access to Reg35 starts ADC conversion with the selected settings, even if the same data is written into
 * the register.
 * Address: 0x23
 * reset value: 0x0000
 */
uint8_t bgt60ltr11_ADC_Convert(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if (bgt60ltr11_spi_write(0x23, 0010) != HAL_OK){
 8000730:	2108      	movs	r1, #8
 8000732:	2023      	movs	r0, #35	@ 0x23
 8000734:	f7ff ff68 	bl	8000608 <bgt60ltr11_spi_write>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <bgt60ltr11_ADC_Convert+0x16>
		return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e003      	b.n	800074a <bgt60ltr11_ADC_Convert+0x1e>
	}
	HAL_Delay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fc04 	bl	8000f50 <HAL_Delay>
	return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	bd80      	pop	{r7, pc}

0800074e <bgt60ltr11_get_RAW_data>:
}

/*
 * Read ADC channel data directly into the provided pointers
 */
uint8_t bgt60ltr11_get_RAW_data(uint16_t *ifi, uint16_t *ifq){
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
	if (bgt60ltr11_spi_read(0x28, ifi) != HAL_OK) return HAL_ERROR;
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	2028      	movs	r0, #40	@ 0x28
 800075c:	f7ff ff08 	bl	8000570 <bgt60ltr11_spi_read>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <bgt60ltr11_get_RAW_data+0x1c>
 8000766:	2301      	movs	r3, #1
 8000768:	e009      	b.n	800077e <bgt60ltr11_get_RAW_data+0x30>
	if (bgt60ltr11_spi_read(0x29, ifq) != HAL_OK) return HAL_ERROR;
 800076a:	6839      	ldr	r1, [r7, #0]
 800076c:	2029      	movs	r0, #41	@ 0x29
 800076e:	f7ff feff 	bl	8000570 <bgt60ltr11_spi_read>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <bgt60ltr11_get_RAW_data+0x2e>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <bgt60ltr11_get_RAW_data+0x30>
	return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <bgt60ltr11_pulsed_mode_init>:

uint8_t bgt60ltr11_pulsed_mode_init(void) {
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
	// Perform soft reset
	if (bgt60ltr11_soft_reset(0) != HAL_OK) return HAL_ERROR;
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff90 	bl	80006b0 <bgt60ltr11_soft_reset>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <bgt60ltr11_pulsed_mode_init+0x14>
 8000796:	2301      	movs	r3, #1
 8000798:	e0e1      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fbd8 	bl	8000f50 <HAL_Delay>

	// Write to each register and check the result

	if (bgt60ltr11_spi_write(0x00, 0x0000) != HAL_OK) return HAL_ERROR;
 80007a0:	2100      	movs	r1, #0
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff30 	bl	8000608 <bgt60ltr11_spi_write>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <bgt60ltr11_pulsed_mode_init+0x2c>
 80007ae:	2301      	movs	r3, #1
 80007b0:	e0d5      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 fbcc 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x01, 0x0000) != HAL_OK) return HAL_ERROR;
 80007b8:	2100      	movs	r1, #0
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff ff24 	bl	8000608 <bgt60ltr11_spi_write>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <bgt60ltr11_pulsed_mode_init+0x44>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e0c9      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fbc0 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x02, 0x2A00) != HAL_OK) return HAL_ERROR;
 80007d0:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff ff17 	bl	8000608 <bgt60ltr11_spi_write>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <bgt60ltr11_pulsed_mode_init+0x5e>
 80007e0:	2301      	movs	r3, #1
 80007e2:	e0bc      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f000 fbb3 	bl	8000f50 <HAL_Delay>

	// TODO need to check the value for the REG3

	if (bgt60ltr11_spi_write(0x04, 0x0F3A) != HAL_OK) return HAL_ERROR;
 80007ea:	f640 713a 	movw	r1, #3898	@ 0xf3a
 80007ee:	2004      	movs	r0, #4
 80007f0:	f7ff ff0a 	bl	8000608 <bgt60ltr11_spi_write>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <bgt60ltr11_pulsed_mode_init+0x78>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e0af      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fba6 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x05, 0x0FB0) != HAL_OK) return HAL_ERROR;
 8000804:	f44f 617b 	mov.w	r1, #4016	@ 0xfb0
 8000808:	2005      	movs	r0, #5
 800080a:	f7ff fefd 	bl	8000608 <bgt60ltr11_spi_write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <bgt60ltr11_pulsed_mode_init+0x92>
 8000814:	2301      	movs	r3, #1
 8000816:	e0a2      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 fb99 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x06, 0x6800) != HAL_OK) return HAL_ERROR;
 800081e:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 8000822:	2006      	movs	r0, #6
 8000824:	f7ff fef0 	bl	8000608 <bgt60ltr11_spi_write>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <bgt60ltr11_pulsed_mode_init+0xac>
 800082e:	2301      	movs	r3, #1
 8000830:	e095      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000832:	2001      	movs	r0, #1
 8000834:	f000 fb8c 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x07, 0x0557) != HAL_OK) return HAL_ERROR;
 8000838:	f240 5157 	movw	r1, #1367	@ 0x557
 800083c:	2007      	movs	r0, #7
 800083e:	f7ff fee3 	bl	8000608 <bgt60ltr11_spi_write>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <bgt60ltr11_pulsed_mode_init+0xc6>
 8000848:	2301      	movs	r3, #1
 800084a:	e088      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 fb7f 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x08, 0x000E) != HAL_OK) return HAL_ERROR;
 8000852:	210e      	movs	r1, #14
 8000854:	2008      	movs	r0, #8
 8000856:	f7ff fed7 	bl	8000608 <bgt60ltr11_spi_write>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <bgt60ltr11_pulsed_mode_init+0xde>
 8000860:	2301      	movs	r3, #1
 8000862:	e07c      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fb73 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x09, 0x00E8) != HAL_OK) return HAL_ERROR;
 800086a:	21e8      	movs	r1, #232	@ 0xe8
 800086c:	2009      	movs	r0, #9
 800086e:	f7ff fecb 	bl	8000608 <bgt60ltr11_spi_write>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <bgt60ltr11_pulsed_mode_init+0xf6>
 8000878:	2301      	movs	r3, #1
 800087a:	e070      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f000 fb67 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0A, 0x004F) != HAL_OK) return HAL_ERROR;
 8000882:	214f      	movs	r1, #79	@ 0x4f
 8000884:	200a      	movs	r0, #10
 8000886:	f7ff febf 	bl	8000608 <bgt60ltr11_spi_write>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <bgt60ltr11_pulsed_mode_init+0x10e>
 8000890:	2301      	movs	r3, #1
 8000892:	e064      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fb5b 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0C, 0x0000) != HAL_OK) return HAL_ERROR;
 800089a:	2100      	movs	r1, #0
 800089c:	200c      	movs	r0, #12
 800089e:	f7ff feb3 	bl	8000608 <bgt60ltr11_spi_write>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <bgt60ltr11_pulsed_mode_init+0x126>
 80008a8:	2301      	movs	r3, #1
 80008aa:	e058      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fb4f 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0D, 0x0000) != HAL_OK) return HAL_ERROR;
 80008b2:	2100      	movs	r1, #0
 80008b4:	200d      	movs	r0, #13
 80008b6:	f7ff fea7 	bl	8000608 <bgt60ltr11_spi_write>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <bgt60ltr11_pulsed_mode_init+0x13e>
 80008c0:	2301      	movs	r3, #1
 80008c2:	e04c      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 fb43 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0E, 0x0000) != HAL_OK) return HAL_ERROR;
 80008ca:	2100      	movs	r1, #0
 80008cc:	200e      	movs	r0, #14
 80008ce:	f7ff fe9b 	bl	8000608 <bgt60ltr11_spi_write>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <bgt60ltr11_pulsed_mode_init+0x156>
 80008d8:	2301      	movs	r3, #1
 80008da:	e040      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fb37 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0F, 0x0000) != HAL_OK) return HAL_ERROR;
 80008e2:	2100      	movs	r1, #0
 80008e4:	200f      	movs	r0, #15
 80008e6:	f7ff fe8f 	bl	8000608 <bgt60ltr11_spi_write>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <bgt60ltr11_pulsed_mode_init+0x16e>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e034      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fb2b 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x22, 0x0000) != HAL_OK) return HAL_ERROR;
 80008fa:	2100      	movs	r1, #0
 80008fc:	2022      	movs	r0, #34	@ 0x22
 80008fe:	f7ff fe83 	bl	8000608 <bgt60ltr11_spi_write>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <bgt60ltr11_pulsed_mode_init+0x186>
 8000908:	2301      	movs	r3, #1
 800090a:	e028      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fb1f 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x23, 0x0000) != HAL_OK) return HAL_ERROR;
 8000912:	2100      	movs	r1, #0
 8000914:	2023      	movs	r0, #35	@ 0x23
 8000916:	f7ff fe77 	bl	8000608 <bgt60ltr11_spi_write>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <bgt60ltr11_pulsed_mode_init+0x19e>
 8000920:	2301      	movs	r3, #1
 8000922:	e01c      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fb13 	bl	8000f50 <HAL_Delay>

	if (bgt60ltr11_spi_write(0x24, 0x0000) != HAL_OK) return HAL_ERROR;
 800092a:	2100      	movs	r1, #0
 800092c:	2024      	movs	r0, #36	@ 0x24
 800092e:	f7ff fe6b 	bl	8000608 <bgt60ltr11_spi_write>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <bgt60ltr11_pulsed_mode_init+0x1b6>
 8000938:	2301      	movs	r3, #1
 800093a:	e010      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fb07 	bl	8000f50 <HAL_Delay>
	/*
	// ADC clock EN, bandgap EN, ADC EN
	if (bgt60ltr11_spi_write(0x22, 0x0007) != HAL_OK) return HAL_ERROR;
	HAL_Delay(1);
	*/
	if (bgt60ltr11_spi_write(0x0F, 0x4000) != HAL_OK) return HAL_ERROR;
 8000942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000946:	200f      	movs	r0, #15
 8000948:	f7ff fe5e 	bl	8000608 <bgt60ltr11_spi_write>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <bgt60ltr11_pulsed_mode_init+0x1d0>
 8000952:	2301      	movs	r3, #1
 8000954:	e003      	b.n	800095e <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f000 fafa 	bl	8000f50 <HAL_Delay>

	return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint16_t reg_value = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fa7a 	bl	8000e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f8bf 	bl	8000af4 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_SPI1_Init();
  MX_USART2_UART_Init();
 8000976:	f000 f90f 	bl	8000b98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Print startup message */
  PrintDebug("BGT60LTR11 SPI Test Program\r\n");
 800097a:	484b      	ldr	r0, [pc, #300]	@ (8000aa8 <main+0x144>)
 800097c:	f000 f93c 	bl	8000bf8 <PrintDebug>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2108      	movs	r1, #8
 8000984:	4849      	ldr	r0, [pc, #292]	@ (8000aac <main+0x148>)
 8000986:	f000 fd57 	bl	8001438 <HAL_GPIO_WritePin>
  PrintDebug("Performing hardware reset...\r\n");
 800098a:	4849      	ldr	r0, [pc, #292]	@ (8000ab0 <main+0x14c>)
 800098c:	f000 f934 	bl	8000bf8 <PrintDebug>
  bgt60ltr11_HW_reset();
 8000990:	f7ff fe7a 	bl	8000688 <bgt60ltr11_HW_reset>
  HAL_Delay(100);
 8000994:	2064      	movs	r0, #100	@ 0x64
 8000996:	f000 fadb 	bl	8000f50 <HAL_Delay>
  PrintDebug("Testing SPI communication...\r\n");
 800099a:	4846      	ldr	r0, [pc, #280]	@ (8000ab4 <main+0x150>)
 800099c:	f000 f92c 	bl	8000bf8 <PrintDebug>
  if (bgt60ltr11_spi_read(0x02, &reg_value) != HAL_OK) {
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	4619      	mov	r1, r3
 80009a4:	2002      	movs	r0, #2
 80009a6:	f7ff fde3 	bl	8000570 <bgt60ltr11_spi_read>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d004      	beq.n	80009ba <main+0x56>
	  PrintDebug("ERROR: Failed to read from radar chip!\r\n");
 80009b0:	4841      	ldr	r0, [pc, #260]	@ (8000ab8 <main+0x154>)
 80009b2:	f000 f921 	bl	8000bf8 <PrintDebug>
	  Error_Handler();
 80009b6:	f000 f933 	bl	8000c20 <Error_Handler>
  }
  sprintf(debug_msg, "Read register 0x02: 0x%04X (expected: 0x2A00)\r\n", reg_value);
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	461a      	mov	r2, r3
 80009be:	493f      	ldr	r1, [pc, #252]	@ (8000abc <main+0x158>)
 80009c0:	483f      	ldr	r0, [pc, #252]	@ (8000ac0 <main+0x15c>)
 80009c2:	f003 f8ef 	bl	8003ba4 <siprintf>
  PrintDebug(debug_msg);
 80009c6:	483e      	ldr	r0, [pc, #248]	@ (8000ac0 <main+0x15c>)
 80009c8:	f000 f916 	bl	8000bf8 <PrintDebug>

  if (reg_value != 0x2A00) {
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	f5b3 5f28 	cmp.w	r3, #10752	@ 0x2a00
 80009d2:	d005      	beq.n	80009e0 <main+0x7c>
	  PrintDebug("ERROR: Invalid register value, check connections!\r\n");
 80009d4:	483b      	ldr	r0, [pc, #236]	@ (8000ac4 <main+0x160>)
 80009d6:	f000 f90f 	bl	8000bf8 <PrintDebug>
	  Error_Handler();
 80009da:	f000 f921 	bl	8000c20 <Error_Handler>
 80009de:	e002      	b.n	80009e6 <main+0x82>
  } else {
	  PrintDebug("SPI communication test PASSED!\r\n");
 80009e0:	4839      	ldr	r0, [pc, #228]	@ (8000ac8 <main+0x164>)
 80009e2:	f000 f909 	bl	8000bf8 <PrintDebug>
  }
  PrintDebug("Initializing radar in pulsed mode...\r\n");
 80009e6:	4839      	ldr	r0, [pc, #228]	@ (8000acc <main+0x168>)
 80009e8:	f000 f906 	bl	8000bf8 <PrintDebug>
  if (bgt60ltr11_pulsed_mode_init() != HAL_OK) {
 80009ec:	f7ff fecb 	bl	8000786 <bgt60ltr11_pulsed_mode_init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d004      	beq.n	8000a00 <main+0x9c>
	  PrintDebug("ERROR: Failed to initialize radar!\r\n");
 80009f6:	4836      	ldr	r0, [pc, #216]	@ (8000ad0 <main+0x16c>)
 80009f8:	f000 f8fe 	bl	8000bf8 <PrintDebug>
	  Error_Handler();
 80009fc:	f000 f910 	bl	8000c20 <Error_Handler>
  }

  PrintDebug("Radar initialization complete!\r\n");
 8000a00:	4834      	ldr	r0, [pc, #208]	@ (8000ad4 <main+0x170>)
 8000a02:	f000 f8f9 	bl	8000bf8 <PrintDebug>
  PrintDebug("Starting data acquisition loop...\r\n\r\n");
 8000a06:	4834      	ldr	r0, [pc, #208]	@ (8000ad8 <main+0x174>)
 8000a08:	f000 f8f6 	bl	8000bf8 <PrintDebug>

  /* Initialization successful - blink LED once */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2108      	movs	r1, #8
 8000a10:	4826      	ldr	r0, [pc, #152]	@ (8000aac <main+0x148>)
 8000a12:	f000 fd11 	bl	8001438 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000a16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a1a:	f000 fa99 	bl	8000f50 <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	4822      	ldr	r0, [pc, #136]	@ (8000aac <main+0x148>)
 8000a24:	f000 fd08 	bl	8001438 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Trigger ADC conversion */
	if (bgt60ltr11_ADC_Convert() != HAL_OK) {
 8000a28:	f7ff fe80 	bl	800072c <bgt60ltr11_ADC_Convert>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <main+0xd4>
	PrintDebug("ADC conversion failed!\r\n");
 8000a32:	482a      	ldr	r0, [pc, #168]	@ (8000adc <main+0x178>)
 8000a34:	f000 f8e0 	bl	8000bf8 <PrintDebug>
	}

	/* Wait for conversion to complete */
	HAL_Delay(5);
 8000a38:	2005      	movs	r0, #5
 8000a3a:	f000 fa89 	bl	8000f50 <HAL_Delay>

	/* Get radar data */
	data_valid = 0;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <main+0x17c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
	if (bgt60ltr11_get_RAW_data(&IFI, &IFQ) == HAL_OK) {
 8000a44:	4927      	ldr	r1, [pc, #156]	@ (8000ae4 <main+0x180>)
 8000a46:	4828      	ldr	r0, [pc, #160]	@ (8000ae8 <main+0x184>)
 8000a48:	f7ff fe81 	bl	800074e <bgt60ltr11_get_RAW_data>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11e      	bne.n	8000a90 <main+0x12c>
	data_valid = 1;
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <main+0x17c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]

	/* Format and print the raw data values */
	sprintf(debug_msg, "IFI: %4d (0x%04X)  |  IFQ: %4d (0x%04X)\r\n",
 8000a58:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <main+0x184>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <main+0x184>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <main+0x180>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <main+0x180>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	9200      	str	r2, [sp, #0]
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	491d      	ldr	r1, [pc, #116]	@ (8000aec <main+0x188>)
 8000a78:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <main+0x15c>)
 8000a7a:	f003 f893 	bl	8003ba4 <siprintf>
		  IFI, IFI, IFQ, IFQ);
	PrintDebug(debug_msg);
 8000a7e:	4810      	ldr	r0, [pc, #64]	@ (8000ac0 <main+0x15c>)
 8000a80:	f000 f8ba 	bl	8000bf8 <PrintDebug>

	/* Indicate valid data with LED */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2108      	movs	r1, #8
 8000a88:	4808      	ldr	r0, [pc, #32]	@ (8000aac <main+0x148>)
 8000a8a:	f000 fcd5 	bl	8001438 <HAL_GPIO_WritePin>
 8000a8e:	e007      	b.n	8000aa0 <main+0x13c>
	} else {
	PrintDebug("Failed to read raw data!\r\n");
 8000a90:	4817      	ldr	r0, [pc, #92]	@ (8000af0 <main+0x18c>)
 8000a92:	f000 f8b1 	bl	8000bf8 <PrintDebug>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2108      	movs	r1, #8
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <main+0x148>)
 8000a9c:	f000 fccc 	bl	8001438 <HAL_GPIO_WritePin>
	}

	/* Delay before next sample */
	HAL_Delay(200);
 8000aa0:	20c8      	movs	r0, #200	@ 0xc8
 8000aa2:	f000 fa55 	bl	8000f50 <HAL_Delay>
	if (bgt60ltr11_ADC_Convert() != HAL_OK) {
 8000aa6:	e7bf      	b.n	8000a28 <main+0xc4>
 8000aa8:	08004500 	.word	0x08004500
 8000aac:	48000400 	.word	0x48000400
 8000ab0:	08004520 	.word	0x08004520
 8000ab4:	08004540 	.word	0x08004540
 8000ab8:	08004560 	.word	0x08004560
 8000abc:	0800458c 	.word	0x0800458c
 8000ac0:	2000016c 	.word	0x2000016c
 8000ac4:	080045bc 	.word	0x080045bc
 8000ac8:	080045f0 	.word	0x080045f0
 8000acc:	08004614 	.word	0x08004614
 8000ad0:	0800463c 	.word	0x0800463c
 8000ad4:	08004664 	.word	0x08004664
 8000ad8:	08004688 	.word	0x08004688
 8000adc:	080046b0 	.word	0x080046b0
 8000ae0:	20000168 	.word	0x20000168
 8000ae4:	20000166 	.word	0x20000166
 8000ae8:	20000164 	.word	0x20000164
 8000aec:	080046cc 	.word	0x080046cc
 8000af0:	080046f8 	.word	0x080046f8

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b096      	sub	sp, #88	@ 0x58
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2244      	movs	r2, #68	@ 0x44
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 f86e 	bl	8003be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b1a:	f000 fcb3 	bl	8001484 <HAL_PWREx_ControlVoltageScaling>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b24:	f000 f87c 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b32:	2310      	movs	r3, #16
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b42:	230a      	movs	r3, #10
 8000b44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b46:	2307      	movs	r3, #7
 8000b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fcea 	bl	8001530 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b62:	f000 f85d 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	230f      	movs	r3, #15
 8000b68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f8ea 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b8a:	f000 f849 	bl	8000c20 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3758      	adds	r7, #88	@ 0x58
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f002 fac2 	bl	8003164 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f81b 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000dc 	.word	0x200000dc
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <PrintDebug>:
/**
  * @brief Sends a debug message over UART
  * @param message The null-terminated message to send
  * @retval None
  */
static void PrintDebug(const char* message) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff fae5 	bl	80001d0 <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	2364      	movs	r3, #100	@ 0x64
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <PrintDebug+0x24>)
 8000c10:	f002 faf6 	bl	8003200 <HAL_UART_Transmit>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000dc 	.word	0x200000dc

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09e      	sub	sp, #120	@ 0x78
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2254      	movs	r2, #84	@ 0x54
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 ffa5 	bl	8003be4 <memset>
  if(huart->Instance==USART2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000d1c <HAL_UART_MspInit+0xa8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d136      	bne.n	8000d12 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fa75 	bl	80021a0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f7ff ffb0 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <HAL_UART_MspInit+0xac>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc4:	4a16      	ldr	r2, [pc, #88]	@ (8000d20 <HAL_UART_MspInit+0xac>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <HAL_UART_MspInit+0xac>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_UART_MspInit+0xac>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	4a10      	ldr	r2, [pc, #64]	@ (8000d20 <HAL_UART_MspInit+0xac>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_UART_MspInit+0xac>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d00:	2307      	movs	r3, #7
 8000d02:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0e:	f000 fa29 	bl	8001164 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d12:	bf00      	nop
 8000d14:	3778      	adds	r7, #120	@ 0x78
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7a:	f000 f8c9 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f002 ff1e 	bl	8003bf4 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000c000 	.word	0x2000c000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	200001d0 	.word	0x200001d0
 8000dec:	20000320 	.word	0x20000320

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff ffea 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	@ (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	@ (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f002 fedd 	bl	8003c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e46:	f7ff fd8d 	bl	8000964 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e58:	080047a0 	.word	0x080047a0
  ldr r2, =_sbss
 8000e5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e60:	20000320 	.word	0x20000320

08000e64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_IRQHandler>

08000e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f943 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f80e 	bl	8000e98 <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e88:	f7ff fed0 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <HAL_InitTick+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f941 	bl	800114a <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000edc:	f000 f919 	bl	8001112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_InitTick+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e001      	b.n	8000ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200001d4 	.word	0x200001d4

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200001d4 	.word	0x200001d4

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff47 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5c 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb0 	bl	80010b8 <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e148      	b.n	8001406 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 813a 	beq.w	8001400 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8094 	beq.w	8001400 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b52      	ldr	r3, [pc, #328]	@ (8001424 <HAL_GPIO_Init+0x2c0>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012dc:	4a51      	ldr	r2, [pc, #324]	@ (8001424 <HAL_GPIO_Init+0x2c0>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001424 <HAL_GPIO_Init+0x2c0>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <HAL_GPIO_Init+0x2c4>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800131a:	d00d      	beq.n	8001338 <HAL_GPIO_Init+0x1d4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a43      	ldr	r2, [pc, #268]	@ (800142c <HAL_GPIO_Init+0x2c8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_Init+0x1d0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a42      	ldr	r2, [pc, #264]	@ (8001430 <HAL_GPIO_Init+0x2cc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d101      	bne.n	8001330 <HAL_GPIO_Init+0x1cc>
 800132c:	2302      	movs	r3, #2
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 8001330:	2307      	movs	r3, #7
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 8001338:	2300      	movs	r3, #0
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800134a:	4937      	ldr	r1, [pc, #220]	@ (8001428 <HAL_GPIO_Init+0x2c4>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001358:	4b36      	ldr	r3, [pc, #216]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800137c:	4a2d      	ldr	r2, [pc, #180]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a6:	4a23      	ldr	r2, [pc, #140]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d0:	4a18      	ldr	r2, [pc, #96]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <HAL_GPIO_Init+0x2d0>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f aeaf 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001454:	e002      	b.n	800145c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <HAL_PWREx_GetVoltageRange+0x18>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40007000 	.word	0x40007000

08001484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001492:	d130      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001494:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800149c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014a0:	d038      	beq.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2232      	movs	r2, #50	@ 0x32
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0c9b      	lsrs	r3, r3, #18
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	e002      	b.n	80014d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014dc:	d102      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f2      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f0:	d110      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e00f      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001502:	d007      	beq.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800150c:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001512:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000
 8001528:	20000000 	.word	0x20000000
 800152c:	431bde83 	.word	0x431bde83

08001530 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	f000 bc02 	b.w	8001d48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001544:	4b96      	ldr	r3, [pc, #600]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154e:	4b94      	ldr	r3, [pc, #592]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80e4 	beq.w	800172e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_RCC_OscConfig+0x4c>
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	f040 808b 	bne.w	800168a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b01      	cmp	r3, #1
 8001578:	f040 8087 	bne.w	800168a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157c:	4b88      	ldr	r3, [pc, #544]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_OscConfig+0x64>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e3d9      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	4b81      	ldr	r3, [pc, #516]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <HAL_RCC_OscConfig+0x7e>
 80015a4:	4b7e      	ldr	r3, [pc, #504]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ac:	e005      	b.n	80015ba <HAL_RCC_OscConfig+0x8a>
 80015ae:	4b7c      	ldr	r3, [pc, #496]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d223      	bcs.n	8001606 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fd8c 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3ba      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d2:	4b73      	ldr	r3, [pc, #460]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a72      	ldr	r2, [pc, #456]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b70      	ldr	r3, [pc, #448]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	496d      	ldr	r1, [pc, #436]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f0:	4b6b      	ldr	r3, [pc, #428]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	4968      	ldr	r1, [pc, #416]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e025      	b.n	8001652 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001606:	4b66      	ldr	r3, [pc, #408]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a65      	ldr	r2, [pc, #404]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4960      	ldr	r1, [pc, #384]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001624:	4b5e      	ldr	r3, [pc, #376]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	495b      	ldr	r1, [pc, #364]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd4c 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e37a      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001652:	f000 fc81 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001656:	4602      	mov	r2, r0
 8001658:	4b51      	ldr	r3, [pc, #324]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	4950      	ldr	r1, [pc, #320]	@ (80017a4 <HAL_RCC_OscConfig+0x274>)
 8001664:	5ccb      	ldrb	r3, [r1, r3]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	4a4e      	ldr	r2, [pc, #312]	@ (80017a8 <HAL_RCC_OscConfig+0x278>)
 8001670:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001672:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fc0e 	bl	8000e98 <HAL_InitTick>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d052      	beq.n	800172c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	e35e      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d032      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001692:	4b43      	ldr	r3, [pc, #268]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169e:	f7ff fc4b 	bl	8000f38 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc47 	bl	8000f38 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e347      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b8:	4b39      	ldr	r3, [pc, #228]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c4:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a35      	ldr	r2, [pc, #212]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4930      	ldr	r1, [pc, #192]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	492b      	ldr	r1, [pc, #172]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
 80016f6:	e01a      	b.n	800172e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a28      	ldr	r2, [pc, #160]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001704:	f7ff fc18 	bl	8000f38 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170c:	f7ff fc14 	bl	8000f38 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e314      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171e:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1dc>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d073      	beq.n	8001822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x21c>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d10e      	bne.n	8001764 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d063      	beq.n	8001820 <HAL_RCC_OscConfig+0x2f0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d15f      	bne.n	8001820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e2f1      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x24c>
 800176e:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e025      	b.n	80017c8 <HAL_RCC_OscConfig+0x298>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001784:	d114      	bne.n	80017b0 <HAL_RCC_OscConfig+0x280>
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a02      	ldr	r2, [pc, #8]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e013      	b.n	80017c8 <HAL_RCC_OscConfig+0x298>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	08004714 	.word	0x08004714
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004
 80017b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fbb2 	bl	8000f38 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fbae 	bl	8000f38 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	@ 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e2ae      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	4b92      	ldr	r3, [pc, #584]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2a8>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb9e 	bl	8000f38 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fb9a 	bl	8000f38 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e29a      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001812:	4b88      	ldr	r3, [pc, #544]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x2d0>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d060      	beq.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x310>
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d119      	bne.n	800186e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d116      	bne.n	800186e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	4b7c      	ldr	r3, [pc, #496]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_OscConfig+0x328>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e277      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b76      	ldr	r3, [pc, #472]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	4973      	ldr	r1, [pc, #460]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800186c:	e040      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d023      	beq.n	80018be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001876:	4b6f      	ldr	r3, [pc, #444]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fb59 	bl	8000f38 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fb55 	bl	8000f38 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e255      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	4b65      	ldr	r3, [pc, #404]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b62      	ldr	r3, [pc, #392]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	495f      	ldr	r1, [pc, #380]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e018      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b5d      	ldr	r3, [pc, #372]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fb35 	bl	8000f38 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff fb31 	bl	8000f38 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e231      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d03c      	beq.n	8001976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01c      	beq.n	800193e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff fb10 	bl	8000f38 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fb0c 	bl	8000f38 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e20c      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192e:	4b41      	ldr	r3, [pc, #260]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ef      	beq.n	800191c <HAL_RCC_OscConfig+0x3ec>
 800193c:	e01b      	b.n	8001976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001944:	4a3b      	ldr	r2, [pc, #236]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff faf3 	bl	8000f38 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff faef 	bl	8000f38 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1ef      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001968:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ef      	bne.n	8001956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80a6 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	4a26      	ldr	r2, [pc, #152]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ac:	2301      	movs	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b0:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d118      	bne.n	80019ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c8:	f7ff fab6 	bl	8000f38 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d0:	f7ff fab2 	bl	8000f38 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1b2      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4d8>
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a06:	e029      	b.n	8001a5c <HAL_RCC_OscConfig+0x52c>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d115      	bne.n	8001a3c <HAL_RCC_OscConfig+0x50c>
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a26:	4a03      	ldr	r2, [pc, #12]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x52c>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a42:	4a99      	ldr	r2, [pc, #612]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4c:	4b96      	ldr	r3, [pc, #600]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	4a95      	ldr	r2, [pc, #596]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d016      	beq.n	8001a92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff fa68 	bl	8000f38 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fa64 	bl	8000f38 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e162      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b89      	ldr	r3, [pc, #548]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ed      	beq.n	8001a6c <HAL_RCC_OscConfig+0x53c>
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff fa51 	bl	8000f38 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff fa4d 	bl	8000f38 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e14b      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ed      	bne.n	8001a9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b78      	ldr	r3, [pc, #480]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	4a77      	ldr	r2, [pc, #476]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ae4:	4b70      	ldr	r3, [pc, #448]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aea:	4a6f      	ldr	r2, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa20 	bl	8000f38 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afc:	f7ff fa1c 	bl	8000f38 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e11c      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0e:	4b66      	ldr	r3, [pc, #408]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ef      	beq.n	8001afc <HAL_RCC_OscConfig+0x5cc>
 8001b1c:	e01b      	b.n	8001b56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b1e:	4b62      	ldr	r3, [pc, #392]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b24:	4a60      	ldr	r2, [pc, #384]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fa03 	bl	8000f38 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b36:	f7ff f9ff 	bl	8000f38 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0ff      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b48:	4b57      	ldr	r3, [pc, #348]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ef      	bne.n	8001b36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80f3 	beq.w	8001d46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f040 80c9 	bne.w	8001cfc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d12c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d123      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001baa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d113      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d06b      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d062      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bde:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0ac      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001bf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bfa:	f7ff f99d 	bl	8000f38 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f999 	bl	8000f38 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e099      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_RCC_OscConfig+0x77c>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c3a:	0212      	lsls	r2, r2, #8
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c42:	0852      	lsrs	r2, r2, #1
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0552      	lsls	r2, r2, #21
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	3a01      	subs	r2, #1
 8001c52:	0652      	lsls	r2, r2, #25
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c5a:	06d2      	lsls	r2, r2, #27
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	4912      	ldr	r1, [pc, #72]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c64:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7c:	f7ff f95c 	bl	8000f38 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f958 	bl	8000f38 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca2:	e050      	b.n	8001d46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04f      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d144      	bne.n	8001d46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd4:	f7ff f930 	bl	8000f38 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f92c 	bl	8000f38 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e02c      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x7ac>
 8001cfa:	e024      	b.n	8001d46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d01f      	beq.n	8001d42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f913 	bl	8000f38 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff f90f 	bl	8000f38 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4905      	ldr	r1, [pc, #20]	@ (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x824>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
 8001d40:	e001      	b.n	8001d46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	feeefffc 	.word	0xfeeefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0e7      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b75      	ldr	r3, [pc, #468]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b72      	ldr	r3, [pc, #456]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4970      	ldr	r1, [pc, #448]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cf      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d908      	bls.n	8001dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4960      	ldr	r1, [pc, #384]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04c      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b5a      	ldr	r3, [pc, #360]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0a6      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b54      	ldr	r3, [pc, #336]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e09a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e08e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e086      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4943      	ldr	r1, [pc, #268]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7ff f87a 	bl	8000f38 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff f876 	bl	8000f38 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e06e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d208      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	492b      	ldr	r1, [pc, #172]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d210      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0207 	bic.w	r2, r3, #7
 8001eb4:	4923      	ldr	r1, [pc, #140]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e036      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4918      	ldr	r1, [pc, #96]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4910      	ldr	r1, [pc, #64]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0c:	f000 f824 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	490b      	ldr	r1, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1fc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ffb1 	bl	8000e98 <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08004714 	.word	0x08004714
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b3b      	ldr	r3, [pc, #236]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11e      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f8c:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f98:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e004      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	@ (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d134      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xac>
 8001ffc:	e005      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e002      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	617b      	str	r3, [r7, #20]
      break;
 800200e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0e5b      	lsrs	r3, r3, #25
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	3301      	adds	r3, #1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002050:	69bb      	ldr	r3, [r7, #24]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	0800472c 	.word	0x0800472c
 8002068:	00f42400 	.word	0x00f42400
 800206c:	007a1200 	.word	0x007a1200

08002070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_RCC_GetHCLKFreq+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800208c:	f7ff fff0 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08004724 	.word	0x08004724

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b8:	f7ff ffda 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4904      	ldr	r1, [pc, #16]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08004724 	.word	0x08004724

080020e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9b6 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
 80020fe:	e014      	b.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	@ 0x58
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f9a6 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002130:	d10b      	bne.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	@ 0x80
 8002136:	d919      	bls.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2ba0      	cmp	r3, #160	@ 0xa0
 800213c:	d902      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e013      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e010      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	@ 0x80
 800214e:	d902      	bls.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e00a      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	@ 0x80
 800215a:	d102      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e004      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b70      	cmp	r3, #112	@ 0x70
 8002166:	d101      	bne.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0207 	bic.w	r2, r3, #7
 8002174:	4909      	ldr	r1, [pc, #36]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800217c:	4b07      	ldr	r3, [pc, #28]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ac:	2300      	movs	r3, #0
 80021ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021c4:	d01a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021ca:	d814      	bhi.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021d4:	d10f      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a5c      	ldr	r2, [pc, #368]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e2:	e00c      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f9ce 	bl	800258c <RCCEx_PLLSAI1_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f4:	e003      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	74fb      	strb	r3, [r7, #19]
      break;
 80021fa:	e000      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002204:	4b51      	ldr	r3, [pc, #324]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002212:	494e      	ldr	r1, [pc, #312]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800221a:	e001      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 809e 	beq.w	800236a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002232:	4b46      	ldr	r3, [pc, #280]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	4b40      	ldr	r3, [pc, #256]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	4a3f      	ldr	r2, [pc, #252]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002252:	6593      	str	r3, [r2, #88]	@ 0x58
 8002254:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002260:	2301      	movs	r3, #1
 8002262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002264:	4b3a      	ldr	r3, [pc, #232]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a39      	ldr	r2, [pc, #228]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002270:	f7fe fe62 	bl	8000f38 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002276:	e009      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fe5e 	bl	8000f38 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d902      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	74fb      	strb	r3, [r7, #19]
        break;
 800228a:	e005      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800228c:	4b30      	ldr	r3, [pc, #192]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ef      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d15a      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800229e:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01e      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d019      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ba:	4b24      	ldr	r3, [pc, #144]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c6:	4b21      	ldr	r3, [pc, #132]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022cc:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	4a1b      	ldr	r2, [pc, #108]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e6:	4a19      	ldr	r2, [pc, #100]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d016      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe fe1e 	bl	8000f38 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fe:	e00b      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe fe1a 	bl	8000f38 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d902      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	74fb      	strb	r3, [r7, #19]
            break;
 8002316:	e006      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ec      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002332:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233a:	4904      	ldr	r1, [pc, #16]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
 8002348:	e006      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002358:	7c7b      	ldrb	r3, [r7, #17]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b8a      	ldr	r3, [pc, #552]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	4a89      	ldr	r2, [pc, #548]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002376:	4b84      	ldr	r3, [pc, #528]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f023 0203 	bic.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4980      	ldr	r1, [pc, #512]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002398:	4b7b      	ldr	r3, [pc, #492]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f023 020c 	bic.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	4978      	ldr	r1, [pc, #480]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ba:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	496f      	ldr	r1, [pc, #444]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ea:	4967      	ldr	r1, [pc, #412]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023fe:	4b62      	ldr	r3, [pc, #392]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	495e      	ldr	r1, [pc, #376]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002420:	4b59      	ldr	r3, [pc, #356]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	4956      	ldr	r1, [pc, #344]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002442:	4b51      	ldr	r3, [pc, #324]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002448:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	494d      	ldr	r1, [pc, #308]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d028      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002464:	4b48      	ldr	r3, [pc, #288]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	4945      	ldr	r1, [pc, #276]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002482:	d106      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002484:	4b40      	ldr	r3, [pc, #256]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a3f      	ldr	r2, [pc, #252]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800248e:	60d3      	str	r3, [r2, #12]
 8002490:	e011      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800249a:	d10c      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	2101      	movs	r1, #1
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f872 	bl	800258c <RCCEx_PLLSAI1_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d028      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024c2:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	492d      	ldr	r1, [pc, #180]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e2:	4b29      	ldr	r3, [pc, #164]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ec:	60d3      	str	r3, [r2, #12]
 80024ee:	e011      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2101      	movs	r1, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f000 f843 	bl	800258c <RCCEx_PLLSAI1_Config>
 8002506:	4603      	mov	r3, r0
 8002508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252e:	4916      	ldr	r1, [pc, #88]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800253e:	d10c      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	2102      	movs	r1, #2
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f820 	bl	800258c <RCCEx_PLLSAI1_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002566:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4904      	ldr	r1, [pc, #16]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800257c:	7cbb      	ldrb	r3, [r7, #18]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800259a:	4b74      	ldr	r3, [pc, #464]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025a6:	4b71      	ldr	r3, [pc, #452]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0203 	and.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d10d      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025be:	4b6b      	ldr	r3, [pc, #428]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
       ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d047      	beq.n	8002662 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e044      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d018      	beq.n	8002612 <RCCEx_PLLSAI1_Config+0x86>
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d825      	bhi.n	8002630 <RCCEx_PLLSAI1_Config+0xa4>
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d002      	beq.n	80025ee <RCCEx_PLLSAI1_Config+0x62>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d009      	beq.n	8002600 <RCCEx_PLLSAI1_Config+0x74>
 80025ec:	e020      	b.n	8002630 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ee:	4b5f      	ldr	r3, [pc, #380]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11d      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fe:	e01a      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002600:	4b5a      	ldr	r3, [pc, #360]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d116      	bne.n	800263a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002610:	e013      	b.n	800263a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002612:	4b56      	ldr	r3, [pc, #344]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800261e:	4b53      	ldr	r3, [pc, #332]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800262e:	e006      	b.n	800263e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e004      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002636:	bf00      	nop
 8002638:	e002      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002646:	4b49      	ldr	r3, [pc, #292]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	430b      	orrs	r3, r1
 800265c:	4943      	ldr	r1, [pc, #268]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d17c      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002668:	4b40      	ldr	r3, [pc, #256]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3f      	ldr	r2, [pc, #252]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 800266e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002674:	f7fe fc60 	bl	8000f38 <HAL_GetTick>
 8002678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800267a:	e009      	b.n	8002690 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800267c:	f7fe fc5c 	bl	8000f38 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d902      	bls.n	8002690 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	73fb      	strb	r3, [r7, #15]
        break;
 800268e:	e005      	b.n	800269c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002690:	4b36      	ldr	r3, [pc, #216]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ef      	bne.n	800267c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d15f      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d110      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a8:	4b30      	ldr	r3, [pc, #192]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80026b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6892      	ldr	r2, [r2, #8]
 80026b8:	0211      	lsls	r1, r2, #8
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	06d2      	lsls	r2, r2, #27
 80026c0:	430a      	orrs	r2, r1
 80026c2:	492a      	ldr	r1, [pc, #168]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	610b      	str	r3, [r1, #16]
 80026c8:	e027      	b.n	800271a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d112      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d0:	4b26      	ldr	r3, [pc, #152]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6892      	ldr	r2, [r2, #8]
 80026e0:	0211      	lsls	r1, r2, #8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6912      	ldr	r2, [r2, #16]
 80026e6:	0852      	lsrs	r2, r2, #1
 80026e8:	3a01      	subs	r2, #1
 80026ea:	0552      	lsls	r2, r2, #21
 80026ec:	430a      	orrs	r2, r1
 80026ee:	491f      	ldr	r1, [pc, #124]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	610b      	str	r3, [r1, #16]
 80026f4:	e011      	b.n	800271a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f6:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	0211      	lsls	r1, r2, #8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6952      	ldr	r2, [r2, #20]
 800270c:	0852      	lsrs	r2, r2, #1
 800270e:	3a01      	subs	r2, #1
 8002710:	0652      	lsls	r2, r2, #25
 8002712:	430a      	orrs	r2, r1
 8002714:	4915      	ldr	r1, [pc, #84]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002716:	4313      	orrs	r3, r2
 8002718:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800271a:	4b14      	ldr	r3, [pc, #80]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a13      	ldr	r2, [pc, #76]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002724:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fe fc07 	bl	8000f38 <HAL_GetTick>
 800272a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272c:	e009      	b.n	8002742 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800272e:	f7fe fc03 	bl	8000f38 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d902      	bls.n	8002742 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	73fb      	strb	r3, [r7, #15]
          break;
 8002740:	e005      	b.n	800274e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002742:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ef      	beq.n	800272e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4903      	ldr	r1, [pc, #12]	@ (800276c <RCCEx_PLLSAI1_Config+0x1e0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002780:	f7fe fbda 	bl	8000f38 <HAL_GetTick>
 8002784:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
 8002798:	e15c      	b.n	8002a54 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_Transmit+0x36>
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e154      	b.n	8002a54 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_SPI_Transmit+0x48>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e14d      	b.n	8002a54 <HAL_SPI_Transmit+0x2e4>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2203      	movs	r2, #3
 80027c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800280a:	d10f      	bne.n	800282c <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800281a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800282a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	2b40      	cmp	r3, #64	@ 0x40
 8002838:	d007      	beq.n	800284a <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002852:	d952      	bls.n	80028fa <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_SPI_Transmit+0xf2>
 800285c:	8b7b      	ldrh	r3, [r7, #26]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d145      	bne.n	80028ee <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002866:	881a      	ldrh	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	1c9a      	adds	r2, r3, #2
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002886:	e032      	b.n	80028ee <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d112      	bne.n	80028bc <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a6:	1c9a      	adds	r2, r3, #2
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028ba:	e018      	b.n	80028ee <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028bc:	f7fe fb3c 	bl	8000f38 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d803      	bhi.n	80028d4 <HAL_SPI_Transmit+0x164>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028d2:	d102      	bne.n	80028da <HAL_SPI_Transmit+0x16a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0b2      	b.n	8002a54 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1c7      	bne.n	8002888 <HAL_SPI_Transmit+0x118>
 80028f8:	e083      	b.n	8002a02 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Transmit+0x198>
 8002902:	8b7b      	ldrh	r3, [r7, #26]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d177      	bne.n	80029f8 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d912      	bls.n	8002938 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002916:	881a      	ldrh	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	1c9a      	adds	r2, r3, #2
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b02      	subs	r3, #2
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002936:	e05f      	b.n	80029f8 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800295e:	e04b      	b.n	80029f8 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d12b      	bne.n	80029c6 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d912      	bls.n	800299e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	881a      	ldrh	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	1c9a      	adds	r2, r3, #2
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b02      	subs	r3, #2
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800299c:	e02c      	b.n	80029f8 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029c4:	e018      	b.n	80029f8 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029c6:	f7fe fab7 	bl	8000f38 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d803      	bhi.n	80029de <HAL_SPI_Transmit+0x26e>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029dc:	d102      	bne.n	80029e4 <HAL_SPI_Transmit+0x274>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e02d      	b.n	8002a54 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ae      	bne.n	8002960 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fb66 	bl	80030d8 <SPI_EndRxTxTransaction>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002a52:	2300      	movs	r3, #0
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6e:	f7fe fa63 	bl	8000f38 <HAL_GetTick>
 8002a72:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a7a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d00c      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x4e>
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a96:	d106      	bne.n	8002aa6 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_TransmitReceive+0x4a>
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d001      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e1f3      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x60>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x60>
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e1e8      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_SPI_TransmitReceive+0x72>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e1e1      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x436>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d003      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2205      	movs	r2, #5
 8002ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	887a      	ldrh	r2, [r7, #2]
 8002afa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	887a      	ldrh	r2, [r7, #2]
 8002b02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b2c:	d802      	bhi.n	8002b34 <HAL_SPI_TransmitReceive+0xd8>
 8002b2e:	8abb      	ldrh	r3, [r7, #20]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d908      	bls.n	8002b46 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	e007      	b.n	8002b56 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b60:	2b40      	cmp	r3, #64	@ 0x40
 8002b62:	d007      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b7c:	f240 8083 	bls.w	8002c86 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x132>
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d16f      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	881a      	ldrh	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb2:	e05c      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d11b      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x19e>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0x19e>
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d113      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be2:	1c9a      	adds	r2, r3, #2
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d11c      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x1e6>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	1c9a      	adds	r2, r3, #2
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c42:	f7fe f979 	bl	8000f38 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d80d      	bhi.n	8002c6e <HAL_SPI_TransmitReceive+0x212>
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c58:	d009      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e111      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d19d      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x158>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d197      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x158>
 8002c84:	e0e5      	b.n	8002e52 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x23a>
 8002c8e:	8afb      	ldrh	r3, [r7, #22]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f040 80d1 	bne.w	8002e38 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d912      	bls.n	8002cc6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b02      	subs	r3, #2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cc4:	e0b8      	b.n	8002e38 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cec:	e0a4      	b.n	8002e38 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d134      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x30a>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02f      	beq.n	8002d66 <HAL_SPI_TransmitReceive+0x30a>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d12c      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d912      	bls.n	8002d3c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	1c9a      	adds	r2, r3, #2
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b02      	subs	r3, #2
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d3a:	e012      	b.n	8002d62 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	7812      	ldrb	r2, [r2, #0]
 8002d48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d148      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x3aa>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d042      	beq.n	8002e06 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d923      	bls.n	8002dd4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	b292      	uxth	r2, r2
 8002d98:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b02      	subs	r3, #2
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d81f      	bhi.n	8002e02 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	e016      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f103 020c 	add.w	r2, r3, #12
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e02:	2301      	movs	r3, #1
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e06:	f7fe f897 	bl	8000f38 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d803      	bhi.n	8002e1e <HAL_SPI_TransmitReceive+0x3c2>
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e1c:	d102      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x3c8>
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e02c      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f47f af55 	bne.w	8002cee <HAL_SPI_TransmitReceive+0x292>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f af4e 	bne.w	8002cee <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f93e 	bl	80030d8 <SPI_EndRxTxTransaction>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e00e      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3728      	adds	r7, #40	@ 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eac:	f7fe f844 	bl	8000f38 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ebc:	f7fe f83c 	bl	8000f38 <HAL_GetTick>
 8002ec0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ec2:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	015b      	lsls	r3, r3, #5
 8002ec8:	0d1b      	lsrs	r3, r3, #20
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed2:	e054      	b.n	8002f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eda:	d050      	beq.n	8002f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002edc:	f7fe f82c 	bl	8000f38 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d902      	bls.n	8002ef2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d13d      	bne.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f0a:	d111      	bne.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f14:	d004      	beq.n	8002f20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1e:	d107      	bne.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f38:	d10f      	bne.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e017      	b.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4013      	ands	r3, r2
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d19b      	bne.n	8002ed4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000000 	.word	0x20000000

08002fac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	@ 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fbe:	f7fd ffbb 	bl	8000f38 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002fce:	f7fd ffb3 	bl	8000f38 <HAL_GetTick>
 8002fd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80030d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00da      	lsls	r2, r3, #3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	0d1b      	lsrs	r3, r3, #20
 8002fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ff4:	e060      	b.n	80030b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ffc:	d107      	bne.n	800300e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800300c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003014:	d050      	beq.n	80030b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003016:	f7fd ff8f 	bl	8000f38 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003022:	429a      	cmp	r2, r3
 8003024:	d902      	bls.n	800302c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	2b00      	cmp	r3, #0
 800302a:	d13d      	bne.n	80030a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800303a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003044:	d111      	bne.n	800306a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800304e:	d004      	beq.n	800305a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003058:	d107      	bne.n	800306a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003068:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003072:	d10f      	bne.n	8003094 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003092:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e010      	b.n	80030ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d196      	bne.n	8002ff6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3728      	adds	r7, #40	@ 0x28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000000 	.word	0x20000000

080030d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff ff5b 	bl	8002fac <SPI_WaitFifoStateUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e027      	b.n	800315c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2200      	movs	r2, #0
 8003114:	2180      	movs	r1, #128	@ 0x80
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fec0 	bl	8002e9c <SPI_WaitFlagStateUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e014      	b.n	800315c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff ff34 	bl	8002fac <SPI_WaitFifoStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e000      	b.n	800315c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e040      	b.n	80031f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fd74 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	@ 0x24
 8003190:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fade 	bl	800376c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8af 	bl	8003314 <UART_SetConfig>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e01b      	b.n	80031f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fb5d 	bl	80038b0 <UART_CheckIdleState>
 80031f6:	4603      	mov	r3, r0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	@ 0x28
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003214:	2b20      	cmp	r3, #32
 8003216:	d177      	bne.n	8003308 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Transmit+0x24>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e070      	b.n	800330a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2221      	movs	r2, #33	@ 0x21
 8003234:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003236:	f7fd fe7f 	bl	8000f38 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003254:	d108      	bne.n	8003268 <HAL_UART_Transmit+0x68>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e003      	b.n	8003270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003270:	e02f      	b.n	80032d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	2180      	movs	r1, #128	@ 0x80
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fbbf 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e03b      	b.n	800330a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a4:	b292      	uxth	r2, r2
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	3302      	adds	r3, #2
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e007      	b.n	80032c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1c9      	bne.n	8003272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2140      	movs	r1, #64	@ 0x40
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fb89 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e005      	b.n	800330a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b08a      	sub	sp, #40	@ 0x28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	431a      	orrs	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4313      	orrs	r3, r2
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4bb4      	ldr	r3, [pc, #720]	@ (8003614 <UART_SetConfig+0x300>)
 8003344:	4013      	ands	r3, r2
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800334c:	430b      	orrs	r3, r1
 800334e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4aa9      	ldr	r2, [pc, #676]	@ (8003618 <UART_SetConfig+0x304>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337c:	4313      	orrs	r3, r2
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4aa0      	ldr	r2, [pc, #640]	@ (800361c <UART_SetConfig+0x308>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d126      	bne.n	80033ec <UART_SetConfig+0xd8>
 800339e:	4ba0      	ldr	r3, [pc, #640]	@ (8003620 <UART_SetConfig+0x30c>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d81b      	bhi.n	80033e4 <UART_SetConfig+0xd0>
 80033ac:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <UART_SetConfig+0xa0>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033d5 	.word	0x080033d5
 80033bc:	080033cd 	.word	0x080033cd
 80033c0:	080033dd 	.word	0x080033dd
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ca:	e080      	b.n	80034ce <UART_SetConfig+0x1ba>
 80033cc:	2302      	movs	r3, #2
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d2:	e07c      	b.n	80034ce <UART_SetConfig+0x1ba>
 80033d4:	2304      	movs	r3, #4
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033da:	e078      	b.n	80034ce <UART_SetConfig+0x1ba>
 80033dc:	2308      	movs	r3, #8
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e2:	e074      	b.n	80034ce <UART_SetConfig+0x1ba>
 80033e4:	2310      	movs	r3, #16
 80033e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ea:	e070      	b.n	80034ce <UART_SetConfig+0x1ba>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a8c      	ldr	r2, [pc, #560]	@ (8003624 <UART_SetConfig+0x310>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d138      	bne.n	8003468 <UART_SetConfig+0x154>
 80033f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003620 <UART_SetConfig+0x30c>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d82d      	bhi.n	8003460 <UART_SetConfig+0x14c>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <UART_SetConfig+0xf8>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003441 	.word	0x08003441
 8003410:	08003461 	.word	0x08003461
 8003414:	08003461 	.word	0x08003461
 8003418:	08003461 	.word	0x08003461
 800341c:	08003451 	.word	0x08003451
 8003420:	08003461 	.word	0x08003461
 8003424:	08003461 	.word	0x08003461
 8003428:	08003461 	.word	0x08003461
 800342c:	08003449 	.word	0x08003449
 8003430:	08003461 	.word	0x08003461
 8003434:	08003461 	.word	0x08003461
 8003438:	08003461 	.word	0x08003461
 800343c:	08003459 	.word	0x08003459
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003446:	e042      	b.n	80034ce <UART_SetConfig+0x1ba>
 8003448:	2302      	movs	r3, #2
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344e:	e03e      	b.n	80034ce <UART_SetConfig+0x1ba>
 8003450:	2304      	movs	r3, #4
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003456:	e03a      	b.n	80034ce <UART_SetConfig+0x1ba>
 8003458:	2308      	movs	r3, #8
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345e:	e036      	b.n	80034ce <UART_SetConfig+0x1ba>
 8003460:	2310      	movs	r3, #16
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003466:	e032      	b.n	80034ce <UART_SetConfig+0x1ba>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6a      	ldr	r2, [pc, #424]	@ (8003618 <UART_SetConfig+0x304>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d12a      	bne.n	80034c8 <UART_SetConfig+0x1b4>
 8003472:	4b6b      	ldr	r3, [pc, #428]	@ (8003620 <UART_SetConfig+0x30c>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003478:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800347c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003480:	d01a      	beq.n	80034b8 <UART_SetConfig+0x1a4>
 8003482:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003486:	d81b      	bhi.n	80034c0 <UART_SetConfig+0x1ac>
 8003488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800348c:	d00c      	beq.n	80034a8 <UART_SetConfig+0x194>
 800348e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003492:	d815      	bhi.n	80034c0 <UART_SetConfig+0x1ac>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <UART_SetConfig+0x18c>
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349c:	d008      	beq.n	80034b0 <UART_SetConfig+0x19c>
 800349e:	e00f      	b.n	80034c0 <UART_SetConfig+0x1ac>
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e012      	b.n	80034ce <UART_SetConfig+0x1ba>
 80034a8:	2302      	movs	r3, #2
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e00e      	b.n	80034ce <UART_SetConfig+0x1ba>
 80034b0:	2304      	movs	r3, #4
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e00a      	b.n	80034ce <UART_SetConfig+0x1ba>
 80034b8:	2308      	movs	r3, #8
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034be:	e006      	b.n	80034ce <UART_SetConfig+0x1ba>
 80034c0:	2310      	movs	r3, #16
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c6:	e002      	b.n	80034ce <UART_SetConfig+0x1ba>
 80034c8:	2310      	movs	r3, #16
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a51      	ldr	r2, [pc, #324]	@ (8003618 <UART_SetConfig+0x304>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d17a      	bne.n	80035ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d824      	bhi.n	800352a <UART_SetConfig+0x216>
 80034e0:	a201      	add	r2, pc, #4	@ (adr r2, 80034e8 <UART_SetConfig+0x1d4>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	0800350d 	.word	0x0800350d
 80034ec:	0800352b 	.word	0x0800352b
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800352b 	.word	0x0800352b
 80034f8:	0800351b 	.word	0x0800351b
 80034fc:	0800352b 	.word	0x0800352b
 8003500:	0800352b 	.word	0x0800352b
 8003504:	0800352b 	.word	0x0800352b
 8003508:	08003523 	.word	0x08003523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350c:	f7fe fdbc 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8003510:	61f8      	str	r0, [r7, #28]
        break;
 8003512:	e010      	b.n	8003536 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003514:	4b44      	ldr	r3, [pc, #272]	@ (8003628 <UART_SetConfig+0x314>)
 8003516:	61fb      	str	r3, [r7, #28]
        break;
 8003518:	e00d      	b.n	8003536 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351a:	f7fe fd1d 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800351e:	61f8      	str	r0, [r7, #28]
        break;
 8003520:	e009      	b.n	8003536 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003526:	61fb      	str	r3, [r7, #28]
        break;
 8003528:	e005      	b.n	8003536 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8107 	beq.w	800374c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	429a      	cmp	r2, r3
 800354c:	d305      	bcc.n	800355a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	429a      	cmp	r2, r3
 8003558:	d903      	bls.n	8003562 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003560:	e0f4      	b.n	800374c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2200      	movs	r2, #0
 8003566:	461c      	mov	r4, r3
 8003568:	4615      	mov	r5, r2
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	022b      	lsls	r3, r5, #8
 8003574:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003578:	0222      	lsls	r2, r4, #8
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	6849      	ldr	r1, [r1, #4]
 800357e:	0849      	lsrs	r1, r1, #1
 8003580:	2000      	movs	r0, #0
 8003582:	4688      	mov	r8, r1
 8003584:	4681      	mov	r9, r0
 8003586:	eb12 0a08 	adds.w	sl, r2, r8
 800358a:	eb43 0b09 	adc.w	fp, r3, r9
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800359c:	4650      	mov	r0, sl
 800359e:	4659      	mov	r1, fp
 80035a0:	f7fc fe6e 	bl	8000280 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035b2:	d308      	bcc.n	80035c6 <UART_SetConfig+0x2b2>
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ba:	d204      	bcs.n	80035c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	e0c2      	b.n	800374c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035cc:	e0be      	b.n	800374c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d6:	d16a      	bne.n	80036ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80035d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d834      	bhi.n	800364a <UART_SetConfig+0x336>
 80035e0:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <UART_SetConfig+0x2d4>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	0800362d 	.word	0x0800362d
 80035f0:	08003635 	.word	0x08003635
 80035f4:	0800364b 	.word	0x0800364b
 80035f8:	0800363b 	.word	0x0800363b
 80035fc:	0800364b 	.word	0x0800364b
 8003600:	0800364b 	.word	0x0800364b
 8003604:	0800364b 	.word	0x0800364b
 8003608:	08003643 	.word	0x08003643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7fe fd3c 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8003610:	61f8      	str	r0, [r7, #28]
        break;
 8003612:	e020      	b.n	8003656 <UART_SetConfig+0x342>
 8003614:	efff69f3 	.word	0xefff69f3
 8003618:	40008000 	.word	0x40008000
 800361c:	40013800 	.word	0x40013800
 8003620:	40021000 	.word	0x40021000
 8003624:	40004400 	.word	0x40004400
 8003628:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800362c:	f7fe fd42 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003630:	61f8      	str	r0, [r7, #28]
        break;
 8003632:	e010      	b.n	8003656 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003634:	4b4c      	ldr	r3, [pc, #304]	@ (8003768 <UART_SetConfig+0x454>)
 8003636:	61fb      	str	r3, [r7, #28]
        break;
 8003638:	e00d      	b.n	8003656 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363a:	f7fe fc8d 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800363e:	61f8      	str	r0, [r7, #28]
        break;
 8003640:	e009      	b.n	8003656 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003646:	61fb      	str	r3, [r7, #28]
        break;
 8003648:	e005      	b.n	8003656 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d077      	beq.n	800374c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005a      	lsls	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	441a      	add	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d916      	bls.n	80036a6 <UART_SetConfig+0x392>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367e:	d212      	bcs.n	80036a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f023 030f 	bic.w	r3, r3, #15
 8003688:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	b29b      	uxth	r3, r3
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	b29a      	uxth	r2, r3
 8003696:	8afb      	ldrh	r3, [r7, #22]
 8003698:	4313      	orrs	r3, r2
 800369a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	8afa      	ldrh	r2, [r7, #22]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e052      	b.n	800374c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036ac:	e04e      	b.n	800374c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d827      	bhi.n	8003706 <UART_SetConfig+0x3f2>
 80036b6:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <UART_SetConfig+0x3a8>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	080036e9 	.word	0x080036e9
 80036c4:	080036f1 	.word	0x080036f1
 80036c8:	08003707 	.word	0x08003707
 80036cc:	080036f7 	.word	0x080036f7
 80036d0:	08003707 	.word	0x08003707
 80036d4:	08003707 	.word	0x08003707
 80036d8:	08003707 	.word	0x08003707
 80036dc:	080036ff 	.word	0x080036ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7fe fcd2 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 80036e4:	61f8      	str	r0, [r7, #28]
        break;
 80036e6:	e014      	b.n	8003712 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7fe fce4 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 80036ec:	61f8      	str	r0, [r7, #28]
        break;
 80036ee:	e010      	b.n	8003712 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003768 <UART_SetConfig+0x454>)
 80036f2:	61fb      	str	r3, [r7, #28]
        break;
 80036f4:	e00d      	b.n	8003712 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f6:	f7fe fc2f 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80036fa:	61f8      	str	r0, [r7, #28]
        break;
 80036fc:	e009      	b.n	8003712 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003702:	61fb      	str	r3, [r7, #28]
        break;
 8003704:	e005      	b.n	8003712 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003710:	bf00      	nop
    }

    if (pclk != 0U)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d019      	beq.n	800374c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	085a      	lsrs	r2, r3, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b0f      	cmp	r3, #15
 8003730:	d909      	bls.n	8003746 <UART_SetConfig+0x432>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003738:	d205      	bcs.n	8003746 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	e002      	b.n	800374c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003758:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800375c:	4618      	mov	r0, r3
 800375e:	3728      	adds	r7, #40	@ 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	00f42400 	.word	0x00f42400

0800376c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01a      	beq.n	8003882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800386a:	d10a      	bne.n	8003882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b098      	sub	sp, #96	@ 0x60
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c0:	f7fd fb3a 	bl	8000f38 <HAL_GetTick>
 80038c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d12e      	bne.n	8003932 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f88c 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d021      	beq.n	8003932 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003902:	653b      	str	r3, [r7, #80]	@ 0x50
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800390c:	647b      	str	r3, [r7, #68]	@ 0x44
 800390e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800391a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e6      	bne.n	80038ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e062      	b.n	80039f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d149      	bne.n	80039d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003948:	2200      	movs	r2, #0
 800394a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f856 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d03c      	beq.n	80039d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	623b      	str	r3, [r7, #32]
   return(result);
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800396e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003978:	633b      	str	r3, [r7, #48]	@ 0x30
 800397a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800397e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e6      	bne.n	800395a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3308      	adds	r3, #8
 8003992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	60fb      	str	r3, [r7, #12]
   return(result);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3308      	adds	r3, #8
 80039aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ac:	61fa      	str	r2, [r7, #28]
 80039ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	69b9      	ldr	r1, [r7, #24]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e5      	bne.n	800398c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e011      	b.n	80039f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3758      	adds	r7, #88	@ 0x58
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a10:	e04f      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a18:	d04b      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fd fa8d 	bl	8000f38 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e04e      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d037      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b80      	cmp	r3, #128	@ 0x80
 8003a46:	d034      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b40      	cmp	r3, #64	@ 0x40
 8003a4c:	d031      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d110      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2208      	movs	r2, #8
 8003a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f838 	bl	8003ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e029      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8c:	d111      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f81e 	bl	8003ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e00f      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d0a0      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b095      	sub	sp, #84	@ 0x54
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d118      	bne.n	8003b82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e6      	bne.n	8003b50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b96:	bf00      	nop
 8003b98:	3754      	adds	r7, #84	@ 0x54
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <siprintf>:
 8003ba4:	b40e      	push	{r1, r2, r3}
 8003ba6:	b500      	push	{lr}
 8003ba8:	b09c      	sub	sp, #112	@ 0x70
 8003baa:	ab1d      	add	r3, sp, #116	@ 0x74
 8003bac:	9002      	str	r0, [sp, #8]
 8003bae:	9006      	str	r0, [sp, #24]
 8003bb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003bb4:	4809      	ldr	r0, [pc, #36]	@ (8003bdc <siprintf+0x38>)
 8003bb6:	9107      	str	r1, [sp, #28]
 8003bb8:	9104      	str	r1, [sp, #16]
 8003bba:	4909      	ldr	r1, [pc, #36]	@ (8003be0 <siprintf+0x3c>)
 8003bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bc0:	9105      	str	r1, [sp, #20]
 8003bc2:	6800      	ldr	r0, [r0, #0]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	a902      	add	r1, sp, #8
 8003bc8:	f000 f89c 	bl	8003d04 <_svfiprintf_r>
 8003bcc:	9b02      	ldr	r3, [sp, #8]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	b01c      	add	sp, #112	@ 0x70
 8003bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bd8:	b003      	add	sp, #12
 8003bda:	4770      	bx	lr
 8003bdc:	2000000c 	.word	0x2000000c
 8003be0:	ffff0208 	.word	0xffff0208

08003be4 <memset>:
 8003be4:	4402      	add	r2, r0
 8003be6:	4603      	mov	r3, r0
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d100      	bne.n	8003bee <memset+0xa>
 8003bec:	4770      	bx	lr
 8003bee:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf2:	e7f9      	b.n	8003be8 <memset+0x4>

08003bf4 <__errno>:
 8003bf4:	4b01      	ldr	r3, [pc, #4]	@ (8003bfc <__errno+0x8>)
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	2000000c 	.word	0x2000000c

08003c00 <__libc_init_array>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4d0d      	ldr	r5, [pc, #52]	@ (8003c38 <__libc_init_array+0x38>)
 8003c04:	4c0d      	ldr	r4, [pc, #52]	@ (8003c3c <__libc_init_array+0x3c>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	2600      	movs	r6, #0
 8003c0c:	42a6      	cmp	r6, r4
 8003c0e:	d109      	bne.n	8003c24 <__libc_init_array+0x24>
 8003c10:	4d0b      	ldr	r5, [pc, #44]	@ (8003c40 <__libc_init_array+0x40>)
 8003c12:	4c0c      	ldr	r4, [pc, #48]	@ (8003c44 <__libc_init_array+0x44>)
 8003c14:	f000 fc66 	bl	80044e4 <_init>
 8003c18:	1b64      	subs	r4, r4, r5
 8003c1a:	10a4      	asrs	r4, r4, #2
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	42a6      	cmp	r6, r4
 8003c20:	d105      	bne.n	8003c2e <__libc_init_array+0x2e>
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c28:	4798      	blx	r3
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	e7ee      	b.n	8003c0c <__libc_init_array+0xc>
 8003c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c32:	4798      	blx	r3
 8003c34:	3601      	adds	r6, #1
 8003c36:	e7f2      	b.n	8003c1e <__libc_init_array+0x1e>
 8003c38:	08004798 	.word	0x08004798
 8003c3c:	08004798 	.word	0x08004798
 8003c40:	08004798 	.word	0x08004798
 8003c44:	0800479c 	.word	0x0800479c

08003c48 <__retarget_lock_acquire_recursive>:
 8003c48:	4770      	bx	lr

08003c4a <__retarget_lock_release_recursive>:
 8003c4a:	4770      	bx	lr

08003c4c <__ssputs_r>:
 8003c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	688e      	ldr	r6, [r1, #8]
 8003c52:	461f      	mov	r7, r3
 8003c54:	42be      	cmp	r6, r7
 8003c56:	680b      	ldr	r3, [r1, #0]
 8003c58:	4682      	mov	sl, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	4690      	mov	r8, r2
 8003c5e:	d82d      	bhi.n	8003cbc <__ssputs_r+0x70>
 8003c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c68:	d026      	beq.n	8003cb8 <__ssputs_r+0x6c>
 8003c6a:	6965      	ldr	r5, [r4, #20]
 8003c6c:	6909      	ldr	r1, [r1, #16]
 8003c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c72:	eba3 0901 	sub.w	r9, r3, r1
 8003c76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c7a:	1c7b      	adds	r3, r7, #1
 8003c7c:	444b      	add	r3, r9
 8003c7e:	106d      	asrs	r5, r5, #1
 8003c80:	429d      	cmp	r5, r3
 8003c82:	bf38      	it	cc
 8003c84:	461d      	movcc	r5, r3
 8003c86:	0553      	lsls	r3, r2, #21
 8003c88:	d527      	bpl.n	8003cda <__ssputs_r+0x8e>
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f000 f958 	bl	8003f40 <_malloc_r>
 8003c90:	4606      	mov	r6, r0
 8003c92:	b360      	cbz	r0, 8003cee <__ssputs_r+0xa2>
 8003c94:	6921      	ldr	r1, [r4, #16]
 8003c96:	464a      	mov	r2, r9
 8003c98:	f000 fbc4 	bl	8004424 <memcpy>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	6126      	str	r6, [r4, #16]
 8003caa:	6165      	str	r5, [r4, #20]
 8003cac:	444e      	add	r6, r9
 8003cae:	eba5 0509 	sub.w	r5, r5, r9
 8003cb2:	6026      	str	r6, [r4, #0]
 8003cb4:	60a5      	str	r5, [r4, #8]
 8003cb6:	463e      	mov	r6, r7
 8003cb8:	42be      	cmp	r6, r7
 8003cba:	d900      	bls.n	8003cbe <__ssputs_r+0x72>
 8003cbc:	463e      	mov	r6, r7
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	f000 fb84 	bl	80043d0 <memmove>
 8003cc8:	68a3      	ldr	r3, [r4, #8]
 8003cca:	1b9b      	subs	r3, r3, r6
 8003ccc:	60a3      	str	r3, [r4, #8]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	4433      	add	r3, r6
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cda:	462a      	mov	r2, r5
 8003cdc:	f000 fb4a 	bl	8004374 <_realloc_r>
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d1e0      	bne.n	8003ca8 <__ssputs_r+0x5c>
 8003ce6:	6921      	ldr	r1, [r4, #16]
 8003ce8:	4650      	mov	r0, sl
 8003cea:	f000 fba9 	bl	8004440 <_free_r>
 8003cee:	230c      	movs	r3, #12
 8003cf0:	f8ca 3000 	str.w	r3, [sl]
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d00:	e7e9      	b.n	8003cd6 <__ssputs_r+0x8a>
	...

08003d04 <_svfiprintf_r>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	4698      	mov	r8, r3
 8003d0a:	898b      	ldrh	r3, [r1, #12]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	b09d      	sub	sp, #116	@ 0x74
 8003d10:	4607      	mov	r7, r0
 8003d12:	460d      	mov	r5, r1
 8003d14:	4614      	mov	r4, r2
 8003d16:	d510      	bpl.n	8003d3a <_svfiprintf_r+0x36>
 8003d18:	690b      	ldr	r3, [r1, #16]
 8003d1a:	b973      	cbnz	r3, 8003d3a <_svfiprintf_r+0x36>
 8003d1c:	2140      	movs	r1, #64	@ 0x40
 8003d1e:	f000 f90f 	bl	8003f40 <_malloc_r>
 8003d22:	6028      	str	r0, [r5, #0]
 8003d24:	6128      	str	r0, [r5, #16]
 8003d26:	b930      	cbnz	r0, 8003d36 <_svfiprintf_r+0x32>
 8003d28:	230c      	movs	r3, #12
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d30:	b01d      	add	sp, #116	@ 0x74
 8003d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d36:	2340      	movs	r3, #64	@ 0x40
 8003d38:	616b      	str	r3, [r5, #20]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d3e:	2320      	movs	r3, #32
 8003d40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d48:	2330      	movs	r3, #48	@ 0x30
 8003d4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ee8 <_svfiprintf_r+0x1e4>
 8003d4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d52:	f04f 0901 	mov.w	r9, #1
 8003d56:	4623      	mov	r3, r4
 8003d58:	469a      	mov	sl, r3
 8003d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d5e:	b10a      	cbz	r2, 8003d64 <_svfiprintf_r+0x60>
 8003d60:	2a25      	cmp	r2, #37	@ 0x25
 8003d62:	d1f9      	bne.n	8003d58 <_svfiprintf_r+0x54>
 8003d64:	ebba 0b04 	subs.w	fp, sl, r4
 8003d68:	d00b      	beq.n	8003d82 <_svfiprintf_r+0x7e>
 8003d6a:	465b      	mov	r3, fp
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4638      	mov	r0, r7
 8003d72:	f7ff ff6b 	bl	8003c4c <__ssputs_r>
 8003d76:	3001      	adds	r0, #1
 8003d78:	f000 80a7 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d7e:	445a      	add	r2, fp
 8003d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d82:	f89a 3000 	ldrb.w	r3, [sl]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 809f 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d96:	f10a 0a01 	add.w	sl, sl, #1
 8003d9a:	9304      	str	r3, [sp, #16]
 8003d9c:	9307      	str	r3, [sp, #28]
 8003d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003da4:	4654      	mov	r4, sl
 8003da6:	2205      	movs	r2, #5
 8003da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dac:	484e      	ldr	r0, [pc, #312]	@ (8003ee8 <_svfiprintf_r+0x1e4>)
 8003dae:	f7fc fa17 	bl	80001e0 <memchr>
 8003db2:	9a04      	ldr	r2, [sp, #16]
 8003db4:	b9d8      	cbnz	r0, 8003dee <_svfiprintf_r+0xea>
 8003db6:	06d0      	lsls	r0, r2, #27
 8003db8:	bf44      	itt	mi
 8003dba:	2320      	movmi	r3, #32
 8003dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dc0:	0711      	lsls	r1, r2, #28
 8003dc2:	bf44      	itt	mi
 8003dc4:	232b      	movmi	r3, #43	@ 0x2b
 8003dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dca:	f89a 3000 	ldrb.w	r3, [sl]
 8003dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dd0:	d015      	beq.n	8003dfe <_svfiprintf_r+0xfa>
 8003dd2:	9a07      	ldr	r2, [sp, #28]
 8003dd4:	4654      	mov	r4, sl
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f04f 0c0a 	mov.w	ip, #10
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003de2:	3b30      	subs	r3, #48	@ 0x30
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d94b      	bls.n	8003e80 <_svfiprintf_r+0x17c>
 8003de8:	b1b0      	cbz	r0, 8003e18 <_svfiprintf_r+0x114>
 8003dea:	9207      	str	r2, [sp, #28]
 8003dec:	e014      	b.n	8003e18 <_svfiprintf_r+0x114>
 8003dee:	eba0 0308 	sub.w	r3, r0, r8
 8003df2:	fa09 f303 	lsl.w	r3, r9, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	46a2      	mov	sl, r4
 8003dfc:	e7d2      	b.n	8003da4 <_svfiprintf_r+0xa0>
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	1d19      	adds	r1, r3, #4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	9103      	str	r1, [sp, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bfbb      	ittet	lt
 8003e0a:	425b      	neglt	r3, r3
 8003e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e10:	9307      	strge	r3, [sp, #28]
 8003e12:	9307      	strlt	r3, [sp, #28]
 8003e14:	bfb8      	it	lt
 8003e16:	9204      	strlt	r2, [sp, #16]
 8003e18:	7823      	ldrb	r3, [r4, #0]
 8003e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e1c:	d10a      	bne.n	8003e34 <_svfiprintf_r+0x130>
 8003e1e:	7863      	ldrb	r3, [r4, #1]
 8003e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e22:	d132      	bne.n	8003e8a <_svfiprintf_r+0x186>
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	9203      	str	r2, [sp, #12]
 8003e2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e30:	3402      	adds	r4, #2
 8003e32:	9305      	str	r3, [sp, #20]
 8003e34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ef8 <_svfiprintf_r+0x1f4>
 8003e38:	7821      	ldrb	r1, [r4, #0]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	f7fc f9cf 	bl	80001e0 <memchr>
 8003e42:	b138      	cbz	r0, 8003e54 <_svfiprintf_r+0x150>
 8003e44:	9b04      	ldr	r3, [sp, #16]
 8003e46:	eba0 000a 	sub.w	r0, r0, sl
 8003e4a:	2240      	movs	r2, #64	@ 0x40
 8003e4c:	4082      	lsls	r2, r0
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	3401      	adds	r4, #1
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e58:	4824      	ldr	r0, [pc, #144]	@ (8003eec <_svfiprintf_r+0x1e8>)
 8003e5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e5e:	2206      	movs	r2, #6
 8003e60:	f7fc f9be 	bl	80001e0 <memchr>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d036      	beq.n	8003ed6 <_svfiprintf_r+0x1d2>
 8003e68:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <_svfiprintf_r+0x1ec>)
 8003e6a:	bb1b      	cbnz	r3, 8003eb4 <_svfiprintf_r+0x1b0>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	3307      	adds	r3, #7
 8003e70:	f023 0307 	bic.w	r3, r3, #7
 8003e74:	3308      	adds	r3, #8
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e7a:	4433      	add	r3, r6
 8003e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e7e:	e76a      	b.n	8003d56 <_svfiprintf_r+0x52>
 8003e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e84:	460c      	mov	r4, r1
 8003e86:	2001      	movs	r0, #1
 8003e88:	e7a8      	b.n	8003ddc <_svfiprintf_r+0xd8>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	3401      	adds	r4, #1
 8003e8e:	9305      	str	r3, [sp, #20]
 8003e90:	4619      	mov	r1, r3
 8003e92:	f04f 0c0a 	mov.w	ip, #10
 8003e96:	4620      	mov	r0, r4
 8003e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e9c:	3a30      	subs	r2, #48	@ 0x30
 8003e9e:	2a09      	cmp	r2, #9
 8003ea0:	d903      	bls.n	8003eaa <_svfiprintf_r+0x1a6>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0c6      	beq.n	8003e34 <_svfiprintf_r+0x130>
 8003ea6:	9105      	str	r1, [sp, #20]
 8003ea8:	e7c4      	b.n	8003e34 <_svfiprintf_r+0x130>
 8003eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eae:	4604      	mov	r4, r0
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e7f0      	b.n	8003e96 <_svfiprintf_r+0x192>
 8003eb4:	ab03      	add	r3, sp, #12
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462a      	mov	r2, r5
 8003eba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <_svfiprintf_r+0x1f0>)
 8003ebc:	a904      	add	r1, sp, #16
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f3af 8000 	nop.w
 8003ec4:	1c42      	adds	r2, r0, #1
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	d1d6      	bne.n	8003e78 <_svfiprintf_r+0x174>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	065b      	lsls	r3, r3, #25
 8003ece:	f53f af2d 	bmi.w	8003d2c <_svfiprintf_r+0x28>
 8003ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ed4:	e72c      	b.n	8003d30 <_svfiprintf_r+0x2c>
 8003ed6:	ab03      	add	r3, sp, #12
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	462a      	mov	r2, r5
 8003edc:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <_svfiprintf_r+0x1f0>)
 8003ede:	a904      	add	r1, sp, #16
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	f000 f91b 	bl	800411c <_printf_i>
 8003ee6:	e7ed      	b.n	8003ec4 <_svfiprintf_r+0x1c0>
 8003ee8:	0800475c 	.word	0x0800475c
 8003eec:	08004766 	.word	0x08004766
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	08003c4d 	.word	0x08003c4d
 8003ef8:	08004762 	.word	0x08004762

08003efc <sbrk_aligned>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4e0f      	ldr	r6, [pc, #60]	@ (8003f3c <sbrk_aligned+0x40>)
 8003f00:	460c      	mov	r4, r1
 8003f02:	6831      	ldr	r1, [r6, #0]
 8003f04:	4605      	mov	r5, r0
 8003f06:	b911      	cbnz	r1, 8003f0e <sbrk_aligned+0x12>
 8003f08:	f000 fa7c 	bl	8004404 <_sbrk_r>
 8003f0c:	6030      	str	r0, [r6, #0]
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 fa77 	bl	8004404 <_sbrk_r>
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	d103      	bne.n	8003f22 <sbrk_aligned+0x26>
 8003f1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003f1e:	4620      	mov	r0, r4
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
 8003f22:	1cc4      	adds	r4, r0, #3
 8003f24:	f024 0403 	bic.w	r4, r4, #3
 8003f28:	42a0      	cmp	r0, r4
 8003f2a:	d0f8      	beq.n	8003f1e <sbrk_aligned+0x22>
 8003f2c:	1a21      	subs	r1, r4, r0
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 fa68 	bl	8004404 <_sbrk_r>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d1f2      	bne.n	8003f1e <sbrk_aligned+0x22>
 8003f38:	e7ef      	b.n	8003f1a <sbrk_aligned+0x1e>
 8003f3a:	bf00      	nop
 8003f3c:	20000314 	.word	0x20000314

08003f40 <_malloc_r>:
 8003f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f44:	1ccd      	adds	r5, r1, #3
 8003f46:	f025 0503 	bic.w	r5, r5, #3
 8003f4a:	3508      	adds	r5, #8
 8003f4c:	2d0c      	cmp	r5, #12
 8003f4e:	bf38      	it	cc
 8003f50:	250c      	movcc	r5, #12
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	4606      	mov	r6, r0
 8003f56:	db01      	blt.n	8003f5c <_malloc_r+0x1c>
 8003f58:	42a9      	cmp	r1, r5
 8003f5a:	d904      	bls.n	8003f66 <_malloc_r+0x26>
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	6033      	str	r3, [r6, #0]
 8003f60:	2000      	movs	r0, #0
 8003f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800403c <_malloc_r+0xfc>
 8003f6a:	f000 f9f7 	bl	800435c <__malloc_lock>
 8003f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f72:	461c      	mov	r4, r3
 8003f74:	bb44      	cbnz	r4, 8003fc8 <_malloc_r+0x88>
 8003f76:	4629      	mov	r1, r5
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7ff ffbf 	bl	8003efc <sbrk_aligned>
 8003f7e:	1c43      	adds	r3, r0, #1
 8003f80:	4604      	mov	r4, r0
 8003f82:	d158      	bne.n	8004036 <_malloc_r+0xf6>
 8003f84:	f8d8 4000 	ldr.w	r4, [r8]
 8003f88:	4627      	mov	r7, r4
 8003f8a:	2f00      	cmp	r7, #0
 8003f8c:	d143      	bne.n	8004016 <_malloc_r+0xd6>
 8003f8e:	2c00      	cmp	r4, #0
 8003f90:	d04b      	beq.n	800402a <_malloc_r+0xea>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4639      	mov	r1, r7
 8003f96:	4630      	mov	r0, r6
 8003f98:	eb04 0903 	add.w	r9, r4, r3
 8003f9c:	f000 fa32 	bl	8004404 <_sbrk_r>
 8003fa0:	4581      	cmp	r9, r0
 8003fa2:	d142      	bne.n	800402a <_malloc_r+0xea>
 8003fa4:	6821      	ldr	r1, [r4, #0]
 8003fa6:	1a6d      	subs	r5, r5, r1
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7ff ffa6 	bl	8003efc <sbrk_aligned>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d03a      	beq.n	800402a <_malloc_r+0xea>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	442b      	add	r3, r5
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	f8d8 3000 	ldr.w	r3, [r8]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	bb62      	cbnz	r2, 800401c <_malloc_r+0xdc>
 8003fc2:	f8c8 7000 	str.w	r7, [r8]
 8003fc6:	e00f      	b.n	8003fe8 <_malloc_r+0xa8>
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	1b52      	subs	r2, r2, r5
 8003fcc:	d420      	bmi.n	8004010 <_malloc_r+0xd0>
 8003fce:	2a0b      	cmp	r2, #11
 8003fd0:	d917      	bls.n	8004002 <_malloc_r+0xc2>
 8003fd2:	1961      	adds	r1, r4, r5
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	6025      	str	r5, [r4, #0]
 8003fd8:	bf18      	it	ne
 8003fda:	6059      	strne	r1, [r3, #4]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	bf08      	it	eq
 8003fe0:	f8c8 1000 	streq.w	r1, [r8]
 8003fe4:	5162      	str	r2, [r4, r5]
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f000 f9bd 	bl	8004368 <__malloc_unlock>
 8003fee:	f104 000b 	add.w	r0, r4, #11
 8003ff2:	1d23      	adds	r3, r4, #4
 8003ff4:	f020 0007 	bic.w	r0, r0, #7
 8003ff8:	1ac2      	subs	r2, r0, r3
 8003ffa:	bf1c      	itt	ne
 8003ffc:	1a1b      	subne	r3, r3, r0
 8003ffe:	50a3      	strne	r3, [r4, r2]
 8004000:	e7af      	b.n	8003f62 <_malloc_r+0x22>
 8004002:	6862      	ldr	r2, [r4, #4]
 8004004:	42a3      	cmp	r3, r4
 8004006:	bf0c      	ite	eq
 8004008:	f8c8 2000 	streq.w	r2, [r8]
 800400c:	605a      	strne	r2, [r3, #4]
 800400e:	e7eb      	b.n	8003fe8 <_malloc_r+0xa8>
 8004010:	4623      	mov	r3, r4
 8004012:	6864      	ldr	r4, [r4, #4]
 8004014:	e7ae      	b.n	8003f74 <_malloc_r+0x34>
 8004016:	463c      	mov	r4, r7
 8004018:	687f      	ldr	r7, [r7, #4]
 800401a:	e7b6      	b.n	8003f8a <_malloc_r+0x4a>
 800401c:	461a      	mov	r2, r3
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	42a3      	cmp	r3, r4
 8004022:	d1fb      	bne.n	800401c <_malloc_r+0xdc>
 8004024:	2300      	movs	r3, #0
 8004026:	6053      	str	r3, [r2, #4]
 8004028:	e7de      	b.n	8003fe8 <_malloc_r+0xa8>
 800402a:	230c      	movs	r3, #12
 800402c:	6033      	str	r3, [r6, #0]
 800402e:	4630      	mov	r0, r6
 8004030:	f000 f99a 	bl	8004368 <__malloc_unlock>
 8004034:	e794      	b.n	8003f60 <_malloc_r+0x20>
 8004036:	6005      	str	r5, [r0, #0]
 8004038:	e7d6      	b.n	8003fe8 <_malloc_r+0xa8>
 800403a:	bf00      	nop
 800403c:	20000318 	.word	0x20000318

08004040 <_printf_common>:
 8004040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	4616      	mov	r6, r2
 8004046:	4698      	mov	r8, r3
 8004048:	688a      	ldr	r2, [r1, #8]
 800404a:	690b      	ldr	r3, [r1, #16]
 800404c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004050:	4293      	cmp	r3, r2
 8004052:	bfb8      	it	lt
 8004054:	4613      	movlt	r3, r2
 8004056:	6033      	str	r3, [r6, #0]
 8004058:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800405c:	4607      	mov	r7, r0
 800405e:	460c      	mov	r4, r1
 8004060:	b10a      	cbz	r2, 8004066 <_printf_common+0x26>
 8004062:	3301      	adds	r3, #1
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	0699      	lsls	r1, r3, #26
 800406a:	bf42      	ittt	mi
 800406c:	6833      	ldrmi	r3, [r6, #0]
 800406e:	3302      	addmi	r3, #2
 8004070:	6033      	strmi	r3, [r6, #0]
 8004072:	6825      	ldr	r5, [r4, #0]
 8004074:	f015 0506 	ands.w	r5, r5, #6
 8004078:	d106      	bne.n	8004088 <_printf_common+0x48>
 800407a:	f104 0a19 	add.w	sl, r4, #25
 800407e:	68e3      	ldr	r3, [r4, #12]
 8004080:	6832      	ldr	r2, [r6, #0]
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	42ab      	cmp	r3, r5
 8004086:	dc26      	bgt.n	80040d6 <_printf_common+0x96>
 8004088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	3b00      	subs	r3, #0
 8004090:	bf18      	it	ne
 8004092:	2301      	movne	r3, #1
 8004094:	0692      	lsls	r2, r2, #26
 8004096:	d42b      	bmi.n	80040f0 <_printf_common+0xb0>
 8004098:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800409c:	4641      	mov	r1, r8
 800409e:	4638      	mov	r0, r7
 80040a0:	47c8      	blx	r9
 80040a2:	3001      	adds	r0, #1
 80040a4:	d01e      	beq.n	80040e4 <_printf_common+0xa4>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	6922      	ldr	r2, [r4, #16]
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	bf02      	ittt	eq
 80040b2:	68e5      	ldreq	r5, [r4, #12]
 80040b4:	6833      	ldreq	r3, [r6, #0]
 80040b6:	1aed      	subeq	r5, r5, r3
 80040b8:	68a3      	ldr	r3, [r4, #8]
 80040ba:	bf0c      	ite	eq
 80040bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c0:	2500      	movne	r5, #0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bfc4      	itt	gt
 80040c6:	1a9b      	subgt	r3, r3, r2
 80040c8:	18ed      	addgt	r5, r5, r3
 80040ca:	2600      	movs	r6, #0
 80040cc:	341a      	adds	r4, #26
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d11a      	bne.n	8004108 <_printf_common+0xc8>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e008      	b.n	80040e8 <_printf_common+0xa8>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4652      	mov	r2, sl
 80040da:	4641      	mov	r1, r8
 80040dc:	4638      	mov	r0, r7
 80040de:	47c8      	blx	r9
 80040e0:	3001      	adds	r0, #1
 80040e2:	d103      	bne.n	80040ec <_printf_common+0xac>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7c6      	b.n	800407e <_printf_common+0x3e>
 80040f0:	18e1      	adds	r1, r4, r3
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	2030      	movs	r0, #48	@ 0x30
 80040f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040fa:	4422      	add	r2, r4
 80040fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004100:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004104:	3302      	adds	r3, #2
 8004106:	e7c7      	b.n	8004098 <_printf_common+0x58>
 8004108:	2301      	movs	r3, #1
 800410a:	4622      	mov	r2, r4
 800410c:	4641      	mov	r1, r8
 800410e:	4638      	mov	r0, r7
 8004110:	47c8      	blx	r9
 8004112:	3001      	adds	r0, #1
 8004114:	d0e6      	beq.n	80040e4 <_printf_common+0xa4>
 8004116:	3601      	adds	r6, #1
 8004118:	e7d9      	b.n	80040ce <_printf_common+0x8e>
	...

0800411c <_printf_i>:
 800411c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	7e0f      	ldrb	r7, [r1, #24]
 8004122:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004124:	2f78      	cmp	r7, #120	@ 0x78
 8004126:	4691      	mov	r9, r2
 8004128:	4680      	mov	r8, r0
 800412a:	460c      	mov	r4, r1
 800412c:	469a      	mov	sl, r3
 800412e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004132:	d807      	bhi.n	8004144 <_printf_i+0x28>
 8004134:	2f62      	cmp	r7, #98	@ 0x62
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x32>
 8004138:	2f00      	cmp	r7, #0
 800413a:	f000 80d2 	beq.w	80042e2 <_printf_i+0x1c6>
 800413e:	2f58      	cmp	r7, #88	@ 0x58
 8004140:	f000 80b9 	beq.w	80042b6 <_printf_i+0x19a>
 8004144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004148:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800414c:	e03a      	b.n	80041c4 <_printf_i+0xa8>
 800414e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004152:	2b15      	cmp	r3, #21
 8004154:	d8f6      	bhi.n	8004144 <_printf_i+0x28>
 8004156:	a101      	add	r1, pc, #4	@ (adr r1, 800415c <_printf_i+0x40>)
 8004158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041c9 	.word	0x080041c9
 8004164:	08004145 	.word	0x08004145
 8004168:	08004145 	.word	0x08004145
 800416c:	08004145 	.word	0x08004145
 8004170:	08004145 	.word	0x08004145
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004145 	.word	0x08004145
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	080042c9 	.word	0x080042c9
 800418c:	080041f3 	.word	0x080041f3
 8004190:	08004283 	.word	0x08004283
 8004194:	08004145 	.word	0x08004145
 8004198:	08004145 	.word	0x08004145
 800419c:	080042eb 	.word	0x080042eb
 80041a0:	08004145 	.word	0x08004145
 80041a4:	080041f3 	.word	0x080041f3
 80041a8:	08004145 	.word	0x08004145
 80041ac:	08004145 	.word	0x08004145
 80041b0:	0800428b 	.word	0x0800428b
 80041b4:	6833      	ldr	r3, [r6, #0]
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6032      	str	r2, [r6, #0]
 80041bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041c4:	2301      	movs	r3, #1
 80041c6:	e09d      	b.n	8004304 <_printf_i+0x1e8>
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	1d19      	adds	r1, r3, #4
 80041ce:	6031      	str	r1, [r6, #0]
 80041d0:	0606      	lsls	r6, r0, #24
 80041d2:	d501      	bpl.n	80041d8 <_printf_i+0xbc>
 80041d4:	681d      	ldr	r5, [r3, #0]
 80041d6:	e003      	b.n	80041e0 <_printf_i+0xc4>
 80041d8:	0645      	lsls	r5, r0, #25
 80041da:	d5fb      	bpl.n	80041d4 <_printf_i+0xb8>
 80041dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	da03      	bge.n	80041ec <_printf_i+0xd0>
 80041e4:	232d      	movs	r3, #45	@ 0x2d
 80041e6:	426d      	negs	r5, r5
 80041e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ec:	4859      	ldr	r0, [pc, #356]	@ (8004354 <_printf_i+0x238>)
 80041ee:	230a      	movs	r3, #10
 80041f0:	e011      	b.n	8004216 <_printf_i+0xfa>
 80041f2:	6821      	ldr	r1, [r4, #0]
 80041f4:	6833      	ldr	r3, [r6, #0]
 80041f6:	0608      	lsls	r0, r1, #24
 80041f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80041fc:	d402      	bmi.n	8004204 <_printf_i+0xe8>
 80041fe:	0649      	lsls	r1, r1, #25
 8004200:	bf48      	it	mi
 8004202:	b2ad      	uxthmi	r5, r5
 8004204:	2f6f      	cmp	r7, #111	@ 0x6f
 8004206:	4853      	ldr	r0, [pc, #332]	@ (8004354 <_printf_i+0x238>)
 8004208:	6033      	str	r3, [r6, #0]
 800420a:	bf14      	ite	ne
 800420c:	230a      	movne	r3, #10
 800420e:	2308      	moveq	r3, #8
 8004210:	2100      	movs	r1, #0
 8004212:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004216:	6866      	ldr	r6, [r4, #4]
 8004218:	60a6      	str	r6, [r4, #8]
 800421a:	2e00      	cmp	r6, #0
 800421c:	bfa2      	ittt	ge
 800421e:	6821      	ldrge	r1, [r4, #0]
 8004220:	f021 0104 	bicge.w	r1, r1, #4
 8004224:	6021      	strge	r1, [r4, #0]
 8004226:	b90d      	cbnz	r5, 800422c <_printf_i+0x110>
 8004228:	2e00      	cmp	r6, #0
 800422a:	d04b      	beq.n	80042c4 <_printf_i+0x1a8>
 800422c:	4616      	mov	r6, r2
 800422e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004232:	fb03 5711 	mls	r7, r3, r1, r5
 8004236:	5dc7      	ldrb	r7, [r0, r7]
 8004238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800423c:	462f      	mov	r7, r5
 800423e:	42bb      	cmp	r3, r7
 8004240:	460d      	mov	r5, r1
 8004242:	d9f4      	bls.n	800422e <_printf_i+0x112>
 8004244:	2b08      	cmp	r3, #8
 8004246:	d10b      	bne.n	8004260 <_printf_i+0x144>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	07df      	lsls	r7, r3, #31
 800424c:	d508      	bpl.n	8004260 <_printf_i+0x144>
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	6861      	ldr	r1, [r4, #4]
 8004252:	4299      	cmp	r1, r3
 8004254:	bfde      	ittt	le
 8004256:	2330      	movle	r3, #48	@ 0x30
 8004258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800425c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004260:	1b92      	subs	r2, r2, r6
 8004262:	6122      	str	r2, [r4, #16]
 8004264:	f8cd a000 	str.w	sl, [sp]
 8004268:	464b      	mov	r3, r9
 800426a:	aa03      	add	r2, sp, #12
 800426c:	4621      	mov	r1, r4
 800426e:	4640      	mov	r0, r8
 8004270:	f7ff fee6 	bl	8004040 <_printf_common>
 8004274:	3001      	adds	r0, #1
 8004276:	d14a      	bne.n	800430e <_printf_i+0x1f2>
 8004278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800427c:	b004      	add	sp, #16
 800427e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	f043 0320 	orr.w	r3, r3, #32
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	4833      	ldr	r0, [pc, #204]	@ (8004358 <_printf_i+0x23c>)
 800428c:	2778      	movs	r7, #120	@ 0x78
 800428e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	6831      	ldr	r1, [r6, #0]
 8004296:	061f      	lsls	r7, r3, #24
 8004298:	f851 5b04 	ldr.w	r5, [r1], #4
 800429c:	d402      	bmi.n	80042a4 <_printf_i+0x188>
 800429e:	065f      	lsls	r7, r3, #25
 80042a0:	bf48      	it	mi
 80042a2:	b2ad      	uxthmi	r5, r5
 80042a4:	6031      	str	r1, [r6, #0]
 80042a6:	07d9      	lsls	r1, r3, #31
 80042a8:	bf44      	itt	mi
 80042aa:	f043 0320 	orrmi.w	r3, r3, #32
 80042ae:	6023      	strmi	r3, [r4, #0]
 80042b0:	b11d      	cbz	r5, 80042ba <_printf_i+0x19e>
 80042b2:	2310      	movs	r3, #16
 80042b4:	e7ac      	b.n	8004210 <_printf_i+0xf4>
 80042b6:	4827      	ldr	r0, [pc, #156]	@ (8004354 <_printf_i+0x238>)
 80042b8:	e7e9      	b.n	800428e <_printf_i+0x172>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	f023 0320 	bic.w	r3, r3, #32
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	e7f6      	b.n	80042b2 <_printf_i+0x196>
 80042c4:	4616      	mov	r6, r2
 80042c6:	e7bd      	b.n	8004244 <_printf_i+0x128>
 80042c8:	6833      	ldr	r3, [r6, #0]
 80042ca:	6825      	ldr	r5, [r4, #0]
 80042cc:	6961      	ldr	r1, [r4, #20]
 80042ce:	1d18      	adds	r0, r3, #4
 80042d0:	6030      	str	r0, [r6, #0]
 80042d2:	062e      	lsls	r6, r5, #24
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	d501      	bpl.n	80042dc <_printf_i+0x1c0>
 80042d8:	6019      	str	r1, [r3, #0]
 80042da:	e002      	b.n	80042e2 <_printf_i+0x1c6>
 80042dc:	0668      	lsls	r0, r5, #25
 80042de:	d5fb      	bpl.n	80042d8 <_printf_i+0x1bc>
 80042e0:	8019      	strh	r1, [r3, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	4616      	mov	r6, r2
 80042e8:	e7bc      	b.n	8004264 <_printf_i+0x148>
 80042ea:	6833      	ldr	r3, [r6, #0]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	6032      	str	r2, [r6, #0]
 80042f0:	681e      	ldr	r6, [r3, #0]
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	2100      	movs	r1, #0
 80042f6:	4630      	mov	r0, r6
 80042f8:	f7fb ff72 	bl	80001e0 <memchr>
 80042fc:	b108      	cbz	r0, 8004302 <_printf_i+0x1e6>
 80042fe:	1b80      	subs	r0, r0, r6
 8004300:	6060      	str	r0, [r4, #4]
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	2300      	movs	r3, #0
 8004308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800430c:	e7aa      	b.n	8004264 <_printf_i+0x148>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	4632      	mov	r2, r6
 8004312:	4649      	mov	r1, r9
 8004314:	4640      	mov	r0, r8
 8004316:	47d0      	blx	sl
 8004318:	3001      	adds	r0, #1
 800431a:	d0ad      	beq.n	8004278 <_printf_i+0x15c>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	079b      	lsls	r3, r3, #30
 8004320:	d413      	bmi.n	800434a <_printf_i+0x22e>
 8004322:	68e0      	ldr	r0, [r4, #12]
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	4298      	cmp	r0, r3
 8004328:	bfb8      	it	lt
 800432a:	4618      	movlt	r0, r3
 800432c:	e7a6      	b.n	800427c <_printf_i+0x160>
 800432e:	2301      	movs	r3, #1
 8004330:	4632      	mov	r2, r6
 8004332:	4649      	mov	r1, r9
 8004334:	4640      	mov	r0, r8
 8004336:	47d0      	blx	sl
 8004338:	3001      	adds	r0, #1
 800433a:	d09d      	beq.n	8004278 <_printf_i+0x15c>
 800433c:	3501      	adds	r5, #1
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	9903      	ldr	r1, [sp, #12]
 8004342:	1a5b      	subs	r3, r3, r1
 8004344:	42ab      	cmp	r3, r5
 8004346:	dcf2      	bgt.n	800432e <_printf_i+0x212>
 8004348:	e7eb      	b.n	8004322 <_printf_i+0x206>
 800434a:	2500      	movs	r5, #0
 800434c:	f104 0619 	add.w	r6, r4, #25
 8004350:	e7f5      	b.n	800433e <_printf_i+0x222>
 8004352:	bf00      	nop
 8004354:	0800476d 	.word	0x0800476d
 8004358:	0800477e 	.word	0x0800477e

0800435c <__malloc_lock>:
 800435c:	4801      	ldr	r0, [pc, #4]	@ (8004364 <__malloc_lock+0x8>)
 800435e:	f7ff bc73 	b.w	8003c48 <__retarget_lock_acquire_recursive>
 8004362:	bf00      	nop
 8004364:	20000310 	.word	0x20000310

08004368 <__malloc_unlock>:
 8004368:	4801      	ldr	r0, [pc, #4]	@ (8004370 <__malloc_unlock+0x8>)
 800436a:	f7ff bc6e 	b.w	8003c4a <__retarget_lock_release_recursive>
 800436e:	bf00      	nop
 8004370:	20000310 	.word	0x20000310

08004374 <_realloc_r>:
 8004374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004378:	4680      	mov	r8, r0
 800437a:	4615      	mov	r5, r2
 800437c:	460c      	mov	r4, r1
 800437e:	b921      	cbnz	r1, 800438a <_realloc_r+0x16>
 8004380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	4611      	mov	r1, r2
 8004386:	f7ff bddb 	b.w	8003f40 <_malloc_r>
 800438a:	b92a      	cbnz	r2, 8004398 <_realloc_r+0x24>
 800438c:	f000 f858 	bl	8004440 <_free_r>
 8004390:	2400      	movs	r4, #0
 8004392:	4620      	mov	r0, r4
 8004394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004398:	f000 f89c 	bl	80044d4 <_malloc_usable_size_r>
 800439c:	4285      	cmp	r5, r0
 800439e:	4606      	mov	r6, r0
 80043a0:	d802      	bhi.n	80043a8 <_realloc_r+0x34>
 80043a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80043a6:	d8f4      	bhi.n	8004392 <_realloc_r+0x1e>
 80043a8:	4629      	mov	r1, r5
 80043aa:	4640      	mov	r0, r8
 80043ac:	f7ff fdc8 	bl	8003f40 <_malloc_r>
 80043b0:	4607      	mov	r7, r0
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d0ec      	beq.n	8004390 <_realloc_r+0x1c>
 80043b6:	42b5      	cmp	r5, r6
 80043b8:	462a      	mov	r2, r5
 80043ba:	4621      	mov	r1, r4
 80043bc:	bf28      	it	cs
 80043be:	4632      	movcs	r2, r6
 80043c0:	f000 f830 	bl	8004424 <memcpy>
 80043c4:	4621      	mov	r1, r4
 80043c6:	4640      	mov	r0, r8
 80043c8:	f000 f83a 	bl	8004440 <_free_r>
 80043cc:	463c      	mov	r4, r7
 80043ce:	e7e0      	b.n	8004392 <_realloc_r+0x1e>

080043d0 <memmove>:
 80043d0:	4288      	cmp	r0, r1
 80043d2:	b510      	push	{r4, lr}
 80043d4:	eb01 0402 	add.w	r4, r1, r2
 80043d8:	d902      	bls.n	80043e0 <memmove+0x10>
 80043da:	4284      	cmp	r4, r0
 80043dc:	4623      	mov	r3, r4
 80043de:	d807      	bhi.n	80043f0 <memmove+0x20>
 80043e0:	1e43      	subs	r3, r0, #1
 80043e2:	42a1      	cmp	r1, r4
 80043e4:	d008      	beq.n	80043f8 <memmove+0x28>
 80043e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043ee:	e7f8      	b.n	80043e2 <memmove+0x12>
 80043f0:	4402      	add	r2, r0
 80043f2:	4601      	mov	r1, r0
 80043f4:	428a      	cmp	r2, r1
 80043f6:	d100      	bne.n	80043fa <memmove+0x2a>
 80043f8:	bd10      	pop	{r4, pc}
 80043fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004402:	e7f7      	b.n	80043f4 <memmove+0x24>

08004404 <_sbrk_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4d06      	ldr	r5, [pc, #24]	@ (8004420 <_sbrk_r+0x1c>)
 8004408:	2300      	movs	r3, #0
 800440a:	4604      	mov	r4, r0
 800440c:	4608      	mov	r0, r1
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	f7fc fcb8 	bl	8000d84 <_sbrk>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d102      	bne.n	800441e <_sbrk_r+0x1a>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	b103      	cbz	r3, 800441e <_sbrk_r+0x1a>
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	bd38      	pop	{r3, r4, r5, pc}
 8004420:	2000031c 	.word	0x2000031c

08004424 <memcpy>:
 8004424:	440a      	add	r2, r1
 8004426:	4291      	cmp	r1, r2
 8004428:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800442c:	d100      	bne.n	8004430 <memcpy+0xc>
 800442e:	4770      	bx	lr
 8004430:	b510      	push	{r4, lr}
 8004432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800443a:	4291      	cmp	r1, r2
 800443c:	d1f9      	bne.n	8004432 <memcpy+0xe>
 800443e:	bd10      	pop	{r4, pc}

08004440 <_free_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4605      	mov	r5, r0
 8004444:	2900      	cmp	r1, #0
 8004446:	d041      	beq.n	80044cc <_free_r+0x8c>
 8004448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800444c:	1f0c      	subs	r4, r1, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfb8      	it	lt
 8004452:	18e4      	addlt	r4, r4, r3
 8004454:	f7ff ff82 	bl	800435c <__malloc_lock>
 8004458:	4a1d      	ldr	r2, [pc, #116]	@ (80044d0 <_free_r+0x90>)
 800445a:	6813      	ldr	r3, [r2, #0]
 800445c:	b933      	cbnz	r3, 800446c <_free_r+0x2c>
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	6014      	str	r4, [r2, #0]
 8004462:	4628      	mov	r0, r5
 8004464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004468:	f7ff bf7e 	b.w	8004368 <__malloc_unlock>
 800446c:	42a3      	cmp	r3, r4
 800446e:	d908      	bls.n	8004482 <_free_r+0x42>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	1821      	adds	r1, r4, r0
 8004474:	428b      	cmp	r3, r1
 8004476:	bf01      	itttt	eq
 8004478:	6819      	ldreq	r1, [r3, #0]
 800447a:	685b      	ldreq	r3, [r3, #4]
 800447c:	1809      	addeq	r1, r1, r0
 800447e:	6021      	streq	r1, [r4, #0]
 8004480:	e7ed      	b.n	800445e <_free_r+0x1e>
 8004482:	461a      	mov	r2, r3
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	b10b      	cbz	r3, 800448c <_free_r+0x4c>
 8004488:	42a3      	cmp	r3, r4
 800448a:	d9fa      	bls.n	8004482 <_free_r+0x42>
 800448c:	6811      	ldr	r1, [r2, #0]
 800448e:	1850      	adds	r0, r2, r1
 8004490:	42a0      	cmp	r0, r4
 8004492:	d10b      	bne.n	80044ac <_free_r+0x6c>
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	4401      	add	r1, r0
 8004498:	1850      	adds	r0, r2, r1
 800449a:	4283      	cmp	r3, r0
 800449c:	6011      	str	r1, [r2, #0]
 800449e:	d1e0      	bne.n	8004462 <_free_r+0x22>
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	6053      	str	r3, [r2, #4]
 80044a6:	4408      	add	r0, r1
 80044a8:	6010      	str	r0, [r2, #0]
 80044aa:	e7da      	b.n	8004462 <_free_r+0x22>
 80044ac:	d902      	bls.n	80044b4 <_free_r+0x74>
 80044ae:	230c      	movs	r3, #12
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	e7d6      	b.n	8004462 <_free_r+0x22>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	1821      	adds	r1, r4, r0
 80044b8:	428b      	cmp	r3, r1
 80044ba:	bf04      	itt	eq
 80044bc:	6819      	ldreq	r1, [r3, #0]
 80044be:	685b      	ldreq	r3, [r3, #4]
 80044c0:	6063      	str	r3, [r4, #4]
 80044c2:	bf04      	itt	eq
 80044c4:	1809      	addeq	r1, r1, r0
 80044c6:	6021      	streq	r1, [r4, #0]
 80044c8:	6054      	str	r4, [r2, #4]
 80044ca:	e7ca      	b.n	8004462 <_free_r+0x22>
 80044cc:	bd38      	pop	{r3, r4, r5, pc}
 80044ce:	bf00      	nop
 80044d0:	20000318 	.word	0x20000318

080044d4 <_malloc_usable_size_r>:
 80044d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d8:	1f18      	subs	r0, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bfbc      	itt	lt
 80044de:	580b      	ldrlt	r3, [r1, r0]
 80044e0:	18c0      	addlt	r0, r0, r3
 80044e2:	4770      	bx	lr

080044e4 <_init>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr

080044f0 <_fini>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr
