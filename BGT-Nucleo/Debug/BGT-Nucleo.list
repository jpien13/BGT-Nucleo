
BGT-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003064  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080031f0  080031f0  000041f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003234  08003234  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003234  08003234  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003238  08003238  00004238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800323c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003248  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003248  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c05c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cde  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00012d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a22  00000000  00000000  00013a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8d7  00000000  00000000  000144b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd15  00000000  00000000  00033d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c299f  00000000  00000000  00041a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010443d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003698  00000000  00000000  00104480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00107b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080031d8 	.word	0x080031d8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080031d8 	.word	0x080031d8

080001cc <bgt60ltr11_spi_read>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_read(uint8_t reg_addr, uint16_t *data) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af02      	add	r7, sp, #8
 80001d2:	4603      	mov	r3, r0
 80001d4:	6039      	str	r1, [r7, #0]
 80001d6:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[3];
    uint8_t rx_data[3] = {0, 0, 0};
 80001d8:	4a20      	ldr	r2, [pc, #128]	@ (800025c <bgt60ltr11_spi_read+0x90>)
 80001da:	f107 0308 	add.w	r3, r7, #8
 80001de:	6812      	ldr	r2, [r2, #0]
 80001e0:	4611      	mov	r1, r2
 80001e2:	8019      	strh	r1, [r3, #0]
 80001e4:	3302      	adds	r3, #2
 80001e6:	0c12      	lsrs	r2, r2, #16
 80001e8:	701a      	strb	r2, [r3, #0]

    /* We send the register address from where we want to read
     * and then we read 2 bytes with dummy data
     */
    tx_data[0] = (uint8_t)((reg_addr << 1) & 0xFE); //  shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (0)
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	005b      	lsls	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	f023 0301 	bic.w	r3, r3, #1
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0; 								// Dummy byte (ignored by radar)
 80001f8:	2300      	movs	r3, #0
 80001fa:	737b      	strb	r3, [r7, #13]
    tx_data[2] = 0; 								// Dummy byte (ignored by radar)
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]

    // CS low to start SPI transfer occurs here
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	2110      	movs	r1, #16
 8000204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000208:	f000 ffa0 	bl	800114c <HAL_GPIO_WritePin>
    if(HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, sizeof(tx_data), 100) != HAL_OK) {
 800020c:	f107 0208 	add.w	r2, r7, #8
 8000210:	f107 010c 	add.w	r1, r7, #12
 8000214:	2364      	movs	r3, #100	@ 0x64
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2303      	movs	r3, #3
 800021a:	4811      	ldr	r0, [pc, #68]	@ (8000260 <bgt60ltr11_spi_read+0x94>)
 800021c:	f002 f845 	bl	80022aa <HAL_SPI_TransmitReceive>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d007      	beq.n	8000236 <bgt60ltr11_spi_read+0x6a>
        HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2110      	movs	r1, #16
 800022a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022e:	f000 ff8d 	bl	800114c <HAL_GPIO_WritePin>
        return HAL_ERROR;
 8000232:	2301      	movs	r3, #1
 8000234:	e00e      	b.n	8000254 <bgt60ltr11_spi_read+0x88>
    }
    // CS high to end
    HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2110      	movs	r1, #16
 800023a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800023e:	f000 ff85 	bl	800114c <HAL_GPIO_WritePin>

    // After transmission, the 16-bit register value is reconstructed from the received bytes:
    *data = ((uint16_t)(rx_data[1] << 8) | (uint16_t)(rx_data[2]));
 8000242:	7a7b      	ldrb	r3, [r7, #9]
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	b29b      	uxth	r3, r3
 8000248:	7aba      	ldrb	r2, [r7, #10]
 800024a:	4313      	orrs	r3, r2
 800024c:	b29a      	uxth	r2, r3
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000252:	2300      	movs	r3, #0
}
 8000254:	4618      	mov	r0, r3
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	080031f0 	.word	0x080031f0
 8000260:	20000028 	.word	0x20000028

08000264 <bgt60ltr11_spi_write>:
 *
 * Page 19 of BGT60LTR11AIP User guide
 * https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 *
 */
uint8_t bgt60ltr11_spi_write(uint8_t reg_addr, uint16_t data){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	460a      	mov	r2, r1
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	4613      	mov	r3, r2
 8000272:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_data[3];
	uint16_t wrdata = data;
 8000274:	88bb      	ldrh	r3, [r7, #4]
 8000276:	81fb      	strh	r3, [r7, #14]

	tx_data[0] = (uint8_t)((reg_addr << 1) | 0x01); // Shifts the 7-bit address to make room for the RW bit. Address (7 bits) + RW bit (1)
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	b25b      	sxtb	r3, r3
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	b25b      	sxtb	r3, r3
 8000284:	b2db      	uxtb	r3, r3
 8000286:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (uint8_t)((wrdata >> 8) & 0xFF);   // Upper 8 bits of data (MSB first)
 8000288:	89fb      	ldrh	r3, [r7, #14]
 800028a:	0a1b      	lsrs	r3, r3, #8
 800028c:	b29b      	uxth	r3, r3
 800028e:	b2db      	uxtb	r3, r3
 8000290:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (uint8_t)(wrdata & 0xFF);			// Lower 8 bits of data
 8000292:	89fb      	ldrh	r3, [r7, #14]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	72bb      	strb	r3, [r7, #10]

    // CS low to start SPI transfer occurs here
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2110      	movs	r1, #16
 800029c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a0:	f000 ff54 	bl	800114c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, tx_data, sizeof(tx_data)/sizeof(uint8_t), 100) != HAL_OK) {
 80002a4:	f107 0108 	add.w	r1, r7, #8
 80002a8:	2364      	movs	r3, #100	@ 0x64
 80002aa:	2203      	movs	r2, #3
 80002ac:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <bgt60ltr11_spi_write+0x7c>)
 80002ae:	f001 fe86 	bl	8001fbe <HAL_SPI_Transmit>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d007      	beq.n	80002c8 <bgt60ltr11_spi_write+0x64>
		HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2110      	movs	r1, #16
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c0:	f000 ff44 	bl	800114c <HAL_GPIO_WritePin>
		return HAL_ERROR;
 80002c4:	2301      	movs	r3, #1
 80002c6:	e006      	b.n	80002d6 <bgt60ltr11_spi_write+0x72>
	}
	// CS high to end
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2110      	movs	r1, #16
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d0:	f000 ff3c 	bl	800114c <HAL_GPIO_WritePin>
	return HAL_OK;
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <bgt60ltr11_HW_reset>:

uint8_t bgt60ltr11_HW_reset(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f0:	f000 ff2c 	bl	800114c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80002f4:	200a      	movs	r0, #10
 80002f6:	f000 fc89 	bl	8000c0c <HAL_Delay>
	HAL_GPIO_WritePin(BGT60_CS_PORT, BGT60_CS_PIN, GPIO_PIN_SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2110      	movs	r1, #16
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000302:	f000 ff23 	bl	800114c <HAL_GPIO_WritePin>
	return HAL_OK;
 8000306:	2300      	movs	r3, #0
}
 8000308:	4618      	mov	r0, r3
 800030a:	bd80      	pop	{r7, pc}

0800030c <bgt60ltr11_soft_reset>:
 *  Resampling can be triggered by setting the reset pin or activating the soft reset by writing the soft_reset
 *  bit (Reg15[15]).
 *  There are 56 Registers according to register overview on page 21
 *  Page 6 https://www.infineon.com/dgdl/Infineon-UG124434_User_guide_to_BGT60LTR11AIP-UserManual-v01_80-EN.pdf?fileId=8ac78c8c8823155701885724e6d72f8f
 */
uint8_t bgt60ltr11_soft_reset(uint8_t wait){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	bgt60ltr11_spi_write(0x0F, (1 << 15));
 8000316:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800031a:	200f      	movs	r0, #15
 800031c:	f7ff ffa2 	bl	8000264 <bgt60ltr11_spi_write>
	uint16_t reg56 = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	81fb      	strh	r3, [r7, #14]
	uint16_t reg0 = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	81bb      	strh	r3, [r7, #12]

	if (wait){
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d027      	beq.n	800037e <bgt60ltr11_soft_reset+0x72>
		// wait till init_done in REG56 is set
		for (volatile uint16_t i = 0; i < 2048; i++){
 800032e:	2300      	movs	r3, #0
 8000330:	817b      	strh	r3, [r7, #10]
 8000332:	e01d      	b.n	8000370 <bgt60ltr11_soft_reset+0x64>
			bgt60ltr11_spi_read(0x38, &reg56);
 8000334:	f107 030e 	add.w	r3, r7, #14
 8000338:	4619      	mov	r1, r3
 800033a:	2038      	movs	r0, #56	@ 0x38
 800033c:	f7ff ff46 	bl	80001cc <bgt60ltr11_spi_read>
			bgt60ltr11_spi_read(0x00, &reg0);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	2000      	movs	r0, #0
 8000348:	f7ff ff40 	bl	80001cc <bgt60ltr11_spi_read>
			// check if REG0 has default values and REG56 bit init_done is set
			if (reg0 == 0 && reg56 & (1 << 13)){
 800034c:	89bb      	ldrh	r3, [r7, #12]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d106      	bne.n	8000360 <bgt60ltr11_soft_reset+0x54>
 8000352:	89fb      	ldrh	r3, [r7, #14]
 8000354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <bgt60ltr11_soft_reset+0x54>
				return HAL_OK;
 800035c:	2300      	movs	r3, #0
 800035e:	e00f      	b.n	8000380 <bgt60ltr11_soft_reset+0x74>
			}
			HAL_Delay(1);
 8000360:	2001      	movs	r0, #1
 8000362:	f000 fc53 	bl	8000c0c <HAL_Delay>
		for (volatile uint16_t i = 0; i < 2048; i++){
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	b29b      	uxth	r3, r3
 800036a:	3301      	adds	r3, #1
 800036c:	b29b      	uxth	r3, r3
 800036e:	817b      	strh	r3, [r7, #10]
 8000370:	897b      	ldrh	r3, [r7, #10]
 8000372:	b29b      	uxth	r3, r3
 8000374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000378:	d3dc      	bcc.n	8000334 <bgt60ltr11_soft_reset+0x28>
		}
		return HAL_ERROR;
 800037a:	2301      	movs	r3, #1
 800037c:	e000      	b.n	8000380 <bgt60ltr11_soft_reset+0x74>
	}
	return HAL_OK;
 800037e:	2300      	movs	r3, #0
}
 8000380:	4618      	mov	r0, r3
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <bgt60ltr11_test>:
}

/*
 * Test if SPI works by reading reg 0x02 and verify value is 0x2A00
 */
uint8_t bgt60ltr11_test(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	80fb      	strh	r3, [r7, #6]
	if (bgt60ltr11_spi_read(0x02, &data) != HAL_OK){
 8000392:	1dbb      	adds	r3, r7, #6
 8000394:	4619      	mov	r1, r3
 8000396:	2002      	movs	r0, #2
 8000398:	f7ff ff18 	bl	80001cc <bgt60ltr11_spi_read>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <bgt60ltr11_test+0x1e>
		return HAL_ERROR;
 80003a2:	2301      	movs	r3, #1
 80003a4:	e00d      	b.n	80003c2 <bgt60ltr11_test+0x3a>
	}
	HAL_Delay(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 fc30 	bl	8000c0c <HAL_Delay>
	if (data != 0x2A00){
 80003ac:	88fb      	ldrh	r3, [r7, #6]
 80003ae:	f5b3 5f28 	cmp.w	r3, #10752	@ 0x2a00
 80003b2:	d005      	beq.n	80003c0 <bgt60ltr11_test+0x38>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80003b4:	2108      	movs	r1, #8
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <bgt60ltr11_test+0x44>)
 80003b8:	f000 fee0 	bl	800117c <HAL_GPIO_TogglePin>
		return HAL_ERROR;
 80003bc:	2301      	movs	r3, #1
 80003be:	e000      	b.n	80003c2 <bgt60ltr11_test+0x3a>
	}
	return HAL_OK;
 80003c0:	2300      	movs	r3, #0

}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	48000400 	.word	0x48000400

080003d0 <bgt60ltr11_get_RAW_data>:

/*
 * Read ADC channel data directly into the provided pointers
 */
uint8_t bgt60ltr11_get_RAW_data(uint16_t *ifi, uint16_t *ifq){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	if (bgt60ltr11_spi_read(0x28, ifi) != HAL_OK) return HAL_ERROR;
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	2028      	movs	r0, #40	@ 0x28
 80003de:	f7ff fef5 	bl	80001cc <bgt60ltr11_spi_read>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <bgt60ltr11_get_RAW_data+0x1c>
 80003e8:	2301      	movs	r3, #1
 80003ea:	e009      	b.n	8000400 <bgt60ltr11_get_RAW_data+0x30>
	if (bgt60ltr11_spi_read(0x29, ifq) != HAL_OK) return HAL_ERROR;
 80003ec:	6839      	ldr	r1, [r7, #0]
 80003ee:	2029      	movs	r0, #41	@ 0x29
 80003f0:	f7ff feec 	bl	80001cc <bgt60ltr11_spi_read>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <bgt60ltr11_get_RAW_data+0x2e>
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <bgt60ltr11_get_RAW_data+0x30>
	return HAL_OK;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <bgt60ltr11_pulsed_mode_init>:

uint8_t bgt60ltr11_pulsed_mode_init(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	// Perform soft reset
	if (bgt60ltr11_soft_reset(0) != HAL_OK) return HAL_ERROR;
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff7d 	bl	800030c <bgt60ltr11_soft_reset>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <bgt60ltr11_pulsed_mode_init+0x14>
 8000418:	2301      	movs	r3, #1
 800041a:	e0e1      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f000 fbf5 	bl	8000c0c <HAL_Delay>

	// Write to each register and check the result

	if (bgt60ltr11_spi_write(0x00, 0x0000) != HAL_OK) return HAL_ERROR;
 8000422:	2100      	movs	r1, #0
 8000424:	2000      	movs	r0, #0
 8000426:	f7ff ff1d 	bl	8000264 <bgt60ltr11_spi_write>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <bgt60ltr11_pulsed_mode_init+0x2c>
 8000430:	2301      	movs	r3, #1
 8000432:	e0d5      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000434:	2001      	movs	r0, #1
 8000436:	f000 fbe9 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x01, 0x0000) != HAL_OK) return HAL_ERROR;
 800043a:	2100      	movs	r1, #0
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff ff11 	bl	8000264 <bgt60ltr11_spi_write>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <bgt60ltr11_pulsed_mode_init+0x44>
 8000448:	2301      	movs	r3, #1
 800044a:	e0c9      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f000 fbdd 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x02, 0x2A00) != HAL_OK) return HAL_ERROR;
 8000452:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 8000456:	2002      	movs	r0, #2
 8000458:	f7ff ff04 	bl	8000264 <bgt60ltr11_spi_write>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <bgt60ltr11_pulsed_mode_init+0x5e>
 8000462:	2301      	movs	r3, #1
 8000464:	e0bc      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f000 fbd0 	bl	8000c0c <HAL_Delay>

	// TODO need to check the value for the REG3

	if (bgt60ltr11_spi_write(0x04, 0x0F3A) != HAL_OK) return HAL_ERROR;
 800046c:	f640 713a 	movw	r1, #3898	@ 0xf3a
 8000470:	2004      	movs	r0, #4
 8000472:	f7ff fef7 	bl	8000264 <bgt60ltr11_spi_write>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <bgt60ltr11_pulsed_mode_init+0x78>
 800047c:	2301      	movs	r3, #1
 800047e:	e0af      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000480:	2001      	movs	r0, #1
 8000482:	f000 fbc3 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x05, 0x0FB0) != HAL_OK) return HAL_ERROR;
 8000486:	f44f 617b 	mov.w	r1, #4016	@ 0xfb0
 800048a:	2005      	movs	r0, #5
 800048c:	f7ff feea 	bl	8000264 <bgt60ltr11_spi_write>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <bgt60ltr11_pulsed_mode_init+0x92>
 8000496:	2301      	movs	r3, #1
 8000498:	e0a2      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800049a:	2001      	movs	r0, #1
 800049c:	f000 fbb6 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x06, 0x6800) != HAL_OK) return HAL_ERROR;
 80004a0:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 80004a4:	2006      	movs	r0, #6
 80004a6:	f7ff fedd 	bl	8000264 <bgt60ltr11_spi_write>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <bgt60ltr11_pulsed_mode_init+0xac>
 80004b0:	2301      	movs	r3, #1
 80004b2:	e095      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 fba9 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x07, 0x0557) != HAL_OK) return HAL_ERROR;
 80004ba:	f240 5157 	movw	r1, #1367	@ 0x557
 80004be:	2007      	movs	r0, #7
 80004c0:	f7ff fed0 	bl	8000264 <bgt60ltr11_spi_write>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <bgt60ltr11_pulsed_mode_init+0xc6>
 80004ca:	2301      	movs	r3, #1
 80004cc:	e088      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f000 fb9c 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x08, 0x000E) != HAL_OK) return HAL_ERROR;
 80004d4:	210e      	movs	r1, #14
 80004d6:	2008      	movs	r0, #8
 80004d8:	f7ff fec4 	bl	8000264 <bgt60ltr11_spi_write>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <bgt60ltr11_pulsed_mode_init+0xde>
 80004e2:	2301      	movs	r3, #1
 80004e4:	e07c      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fb90 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x09, 0x00E8) != HAL_OK) return HAL_ERROR;
 80004ec:	21e8      	movs	r1, #232	@ 0xe8
 80004ee:	2009      	movs	r0, #9
 80004f0:	f7ff feb8 	bl	8000264 <bgt60ltr11_spi_write>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <bgt60ltr11_pulsed_mode_init+0xf6>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e070      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 fb84 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0A, 0x004F) != HAL_OK) return HAL_ERROR;
 8000504:	214f      	movs	r1, #79	@ 0x4f
 8000506:	200a      	movs	r0, #10
 8000508:	f7ff feac 	bl	8000264 <bgt60ltr11_spi_write>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <bgt60ltr11_pulsed_mode_init+0x10e>
 8000512:	2301      	movs	r3, #1
 8000514:	e064      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fb78 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0C, 0x0000) != HAL_OK) return HAL_ERROR;
 800051c:	2100      	movs	r1, #0
 800051e:	200c      	movs	r0, #12
 8000520:	f7ff fea0 	bl	8000264 <bgt60ltr11_spi_write>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <bgt60ltr11_pulsed_mode_init+0x126>
 800052a:	2301      	movs	r3, #1
 800052c:	e058      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fb6c 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0D, 0x0000) != HAL_OK) return HAL_ERROR;
 8000534:	2100      	movs	r1, #0
 8000536:	200d      	movs	r0, #13
 8000538:	f7ff fe94 	bl	8000264 <bgt60ltr11_spi_write>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <bgt60ltr11_pulsed_mode_init+0x13e>
 8000542:	2301      	movs	r3, #1
 8000544:	e04c      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 fb60 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0E, 0x0000) != HAL_OK) return HAL_ERROR;
 800054c:	2100      	movs	r1, #0
 800054e:	200e      	movs	r0, #14
 8000550:	f7ff fe88 	bl	8000264 <bgt60ltr11_spi_write>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <bgt60ltr11_pulsed_mode_init+0x156>
 800055a:	2301      	movs	r3, #1
 800055c:	e040      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fb54 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x0F, 0x0000) != HAL_OK) return HAL_ERROR;
 8000564:	2100      	movs	r1, #0
 8000566:	200f      	movs	r0, #15
 8000568:	f7ff fe7c 	bl	8000264 <bgt60ltr11_spi_write>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <bgt60ltr11_pulsed_mode_init+0x16e>
 8000572:	2301      	movs	r3, #1
 8000574:	e034      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f000 fb48 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x22, 0x0000) != HAL_OK) return HAL_ERROR;
 800057c:	2100      	movs	r1, #0
 800057e:	2022      	movs	r0, #34	@ 0x22
 8000580:	f7ff fe70 	bl	8000264 <bgt60ltr11_spi_write>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <bgt60ltr11_pulsed_mode_init+0x186>
 800058a:	2301      	movs	r3, #1
 800058c:	e028      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fb3c 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x23, 0x0000) != HAL_OK) return HAL_ERROR;
 8000594:	2100      	movs	r1, #0
 8000596:	2023      	movs	r0, #35	@ 0x23
 8000598:	f7ff fe64 	bl	8000264 <bgt60ltr11_spi_write>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <bgt60ltr11_pulsed_mode_init+0x19e>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e01c      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	    HAL_Delay(1);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fb30 	bl	8000c0c <HAL_Delay>

	if (bgt60ltr11_spi_write(0x24, 0x0000) != HAL_OK) return HAL_ERROR;
 80005ac:	2100      	movs	r1, #0
 80005ae:	2024      	movs	r0, #36	@ 0x24
 80005b0:	f7ff fe58 	bl	8000264 <bgt60ltr11_spi_write>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <bgt60ltr11_pulsed_mode_init+0x1b6>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e010      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fb24 	bl	8000c0c <HAL_Delay>
	/*
	// ADC clock EN, bandgap EN, ADC EN
	if (bgt60ltr11_spi_write(0x22, 0x0007) != HAL_OK) return HAL_ERROR;
	HAL_Delay(1);
	*/
	if (bgt60ltr11_spi_write(0x0F, 0x4000) != HAL_OK) return HAL_ERROR;
 80005c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c8:	200f      	movs	r0, #15
 80005ca:	f7ff fe4b 	bl	8000264 <bgt60ltr11_spi_write>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <bgt60ltr11_pulsed_mode_init+0x1d0>
 80005d4:	2301      	movs	r3, #1
 80005d6:	e003      	b.n	80005e0 <bgt60ltr11_pulsed_mode_init+0x1d8>
	HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 fb17 	bl	8000c0c <HAL_Delay>

	return HAL_OK;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fa9b 	bl	8000b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f842 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f91e 	bl	8000830 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005f4:	f000 f890 	bl	8000718 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005f8:	f000 f8cc 	bl	8000794 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f000 fda2 	bl	800114c <HAL_GPIO_WritePin>
  bgt60ltr11_HW_reset();
 8000608:	f7ff fe6c 	bl	80002e4 <bgt60ltr11_HW_reset>
  HAL_Delay(100);  // Wait for radar to stabilize
 800060c:	2064      	movs	r0, #100	@ 0x64
 800060e:	f000 fafd 	bl	8000c0c <HAL_Delay>
  if (bgt60ltr11_pulsed_mode_init() != HAL_OK) {
 8000612:	f7ff fef9 	bl	8000408 <bgt60ltr11_pulsed_mode_init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <main+0x3c>
	  // Failed to initialize - LED should blink in error handler
	  Error_Handler();
 800061c:	f000 f95c 	bl	80008d8 <Error_Handler>
  }
  HAL_Delay(1000);
 8000620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000624:	f000 faf2 	bl	8000c0c <HAL_Delay>

  // Test SPI communication
  if (bgt60ltr11_test() != HAL_OK) {
 8000628:	f7ff feae 	bl	8000388 <bgt60ltr11_test>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <main+0x52>
	  // SPI test failed
	  Error_Handler();
 8000632:	f000 f951 	bl	80008d8 <Error_Handler>
  }

  // radar successfully initialized
  radar_initialized = 1;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <main+0x80>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (radar_initialized){
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <main+0x80>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00a      	beq.n	800065a <main+0x76>
		  if(bgt60ltr11_get_RAW_data(&IFI, &IFQ) == HAL_OK){
 8000644:	4908      	ldr	r1, [pc, #32]	@ (8000668 <main+0x84>)
 8000646:	4809      	ldr	r0, [pc, #36]	@ (800066c <main+0x88>)
 8000648:	f7ff fec2 	bl	80003d0 <bgt60ltr11_get_RAW_data>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <main+0x76>
			  // Toggle LED to indicate successful reading
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000652:	2108      	movs	r1, #8
 8000654:	4806      	ldr	r0, [pc, #24]	@ (8000670 <main+0x8c>)
 8000656:	f000 fd91 	bl	800117c <HAL_GPIO_TogglePin>
		  }
	  }
	  HAL_Delay(100); // small delay between readings
 800065a:	2064      	movs	r0, #100	@ 0x64
 800065c:	f000 fad6 	bl	8000c0c <HAL_Delay>
	  if (radar_initialized){
 8000660:	e7ec      	b.n	800063c <main+0x58>
 8000662:	bf00      	nop
 8000664:	200000dc 	.word	0x200000dc
 8000668:	200000da 	.word	0x200000da
 800066c:	200000d8 	.word	0x200000d8
 8000670:	48000400 	.word	0x48000400

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	@ 0x58
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2244      	movs	r2, #68	@ 0x44
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fd7c 	bl	8003180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000696:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800069a:	f000 fd97 	bl	80011cc <HAL_PWREx_ControlVoltageScaling>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a4:	f000 f918 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2310      	movs	r3, #16
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	2302      	movs	r3, #2
 80006bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c2:	230a      	movs	r3, #10
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c6:	2307      	movs	r3, #7
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fdce 	bl	8001278 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006e2:	f000 f8f9 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	2104      	movs	r1, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f9ce 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070a:	f000 f8e5 	bl	80008d8 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3758      	adds	r7, #88	@ 0x58
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_SPI1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_SPI1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_SPI1_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI1_Init+0x74>)
 8000732:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI1_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_SPI1_Init+0x74>)
 800074e:	2208      	movs	r2, #8
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_SPI1_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_SPI1_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_SPI1_Init+0x74>)
 8000778:	f001 fb7e 	bl	8001e78 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f8a9 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028
 8000790:	40013000 	.word	0x40013000

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_TIM2_Init+0x98>)
 80007b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_TIM2_Init+0x98>)
 80007bc:	224f      	movs	r2, #79	@ 0x4f
 80007be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_TIM2_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_TIM2_Init+0x98>)
 80007c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_TIM2_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_TIM2_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007da:	4814      	ldr	r0, [pc, #80]	@ (800082c <MX_TIM2_Init+0x98>)
 80007dc:	f002 f8e8 	bl	80029b0 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007e6:	f000 f877 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_TIM2_Init+0x98>)
 80007f8:	f002 fa38 	bl	8002c6c <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f869 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <MX_TIM2_Init+0x98>)
 8000814:	f002 fc30 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800081e:	f000 f85b 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000008c 	.word	0x2000008c

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_GPIO_Init+0xa0>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a21      	ldr	r2, [pc, #132]	@ (80008d0 <MX_GPIO_Init+0xa0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_GPIO_Init+0xa0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_GPIO_Init+0xa0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <MX_GPIO_Init+0xa0>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_GPIO_Init+0xa0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2110      	movs	r1, #16
 800087a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087e:	f000 fc65 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4813      	ldr	r0, [pc, #76]	@ (80008d4 <MX_GPIO_Init+0xa4>)
 8000888:	f000 fc60 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800088c:	2310      	movs	r3, #16
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f000 fae7 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_GPIO_Init+0xa4>)
 80008c2:	f000 fad9 	bl	8000e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80008e0:	2108      	movs	r1, #8
 80008e2:	480f      	ldr	r0, [pc, #60]	@ (8000920 <Error_Handler+0x48>)
 80008e4:	f000 fc4a 	bl	800117c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80008e8:	2032      	movs	r0, #50	@ 0x32
 80008ea:	f000 f98f 	bl	8000c0c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80008ee:	2108      	movs	r1, #8
 80008f0:	480b      	ldr	r0, [pc, #44]	@ (8000920 <Error_Handler+0x48>)
 80008f2:	f000 fc43 	bl	800117c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80008f6:	2032      	movs	r0, #50	@ 0x32
 80008f8:	f000 f988 	bl	8000c0c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80008fc:	2108      	movs	r1, #8
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <Error_Handler+0x48>)
 8000900:	f000 fc3c 	bl	800117c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000904:	2032      	movs	r0, #50	@ 0x32
 8000906:	f000 f981 	bl	8000c0c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800090a:	2108      	movs	r1, #8
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <Error_Handler+0x48>)
 800090e:	f000 fc35 	bl	800117c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);  // Longer pause between double-blinks
 8000912:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000916:	f000 f979 	bl	8000c0c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800091a:	bf00      	nop
 800091c:	e7e0      	b.n	80008e0 <Error_Handler+0x8>
 800091e:	bf00      	nop
 8000920:	48000400 	.word	0x48000400

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	@ 0x60
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	@ 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <HAL_SPI_MspInit+0x7c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d128      	bne.n	80009e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <HAL_SPI_MspInit+0x80>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000992:	4a16      	ldr	r2, [pc, #88]	@ (80009ec <HAL_SPI_MspInit+0x80>)
 8000994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000998:	6613      	str	r3, [r2, #96]	@ 0x60
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_SPI_MspInit+0x80>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_SPI_MspInit+0x80>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <HAL_SPI_MspInit+0x80>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_SPI_MspInit+0x80>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009be:	23c2      	movs	r3, #194	@ 0xc2
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ce:	2305      	movs	r3, #5
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009dc:	f000 fa4c 	bl	8000e78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	@ 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40013000 	.word	0x40013000
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a00:	d113      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a06:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 f9f3 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 fa0c 	bl	8000e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f89d 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <TIM2_IRQHandler+0x10>)
 8000a9e:	f001 ffde 	bl	8002a5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000008c 	.word	0x2000008c

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f002 fb47 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b02:	f7ff fd6f 	bl	80005e4 <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	0800323c 	.word	0x0800323c
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	200000e4 	.word	0x200000e4

08000b20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_IRQHandler>

08000b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f961 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f80e 	bl	8000b54 <HAL_InitTick>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e001      	b.n	8000b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b44:	f7ff feee 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <HAL_InitTick+0x6c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d023      	beq.n	8000bb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <HAL_InitTick+0x70>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_InitTick+0x6c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f96d 	bl	8000e5e <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10f      	bne.n	8000baa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d809      	bhi.n	8000ba4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b98:	f000 f937 	bl	8000e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_InitTick+0x74>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e007      	b.n	8000bb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e004      	b.n	8000bb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e001      	b.n	8000bb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	200000e0 	.word	0x200000e0

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200000e0 	.word	0x200000e0

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffee 	bl	8000bf4 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffde 	bl	8000bf4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	@ (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	@ (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	@ (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	@ 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff3e 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff8e 	bl	8000d48 <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff31 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	e148      	b.n	800111a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 813a 	beq.w	8001114 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d005      	beq.n	8000eb8 <HAL_GPIO_Init+0x40>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d130      	bne.n	8000f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 0201 	and.w	r2, r3, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d017      	beq.n	8000f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d123      	bne.n	8000faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0203 	and.w	r2, r3, #3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8094 	beq.w	8001114 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fec:	4b52      	ldr	r3, [pc, #328]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff0:	4a51      	ldr	r2, [pc, #324]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001004:	4a4d      	ldr	r2, [pc, #308]	@ (800113c <HAL_GPIO_Init+0x2c4>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800102e:	d00d      	beq.n	800104c <HAL_GPIO_Init+0x1d4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <HAL_GPIO_Init+0x2c8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x1d0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a42      	ldr	r2, [pc, #264]	@ (8001144 <HAL_GPIO_Init+0x2cc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_GPIO_Init+0x1cc>
 8001040:	2302      	movs	r3, #2
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1d6>
 8001044:	2307      	movs	r3, #7
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1d6>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1d6>
 800104c:	2300      	movs	r3, #0
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800105e:	4937      	ldr	r1, [pc, #220]	@ (800113c <HAL_GPIO_Init+0x2c4>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001090:	4a2d      	ldr	r2, [pc, #180]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001096:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ba:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010c0:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e4:	4a18      	ldr	r2, [pc, #96]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110e:	4a0e      	ldr	r2, [pc, #56]	@ (8001148 <HAL_GPIO_Init+0x2d0>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f aeaf 	bne.w	8000e88 <HAL_GPIO_Init+0x10>
  }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001168:	e002      	b.n	8001170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43d9      	mvns	r1, r3
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	400b      	ands	r3, r1
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40007000 	.word	0x40007000

080011cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011da:	d130      	bne.n	800123e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011dc:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011e8:	d038      	beq.n	800125c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011f2:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2232      	movs	r2, #50	@ 0x32
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4a1b      	ldr	r2, [pc, #108]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9b      	lsrs	r3, r3, #18
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001210:	e002      	b.n	8001218 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3b01      	subs	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001224:	d102      	bne.n	800122c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f2      	bne.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001238:	d110      	bne.n	800125c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e00f      	b.n	800125e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124a:	d007      	beq.n	800125c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001254:	4a05      	ldr	r2, [pc, #20]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800125a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40007000 	.word	0x40007000
 8001270:	20000000 	.word	0x20000000
 8001274:	431bde83 	.word	0x431bde83

08001278 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	f000 bc02 	b.w	8001a90 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128c:	4b96      	ldr	r3, [pc, #600]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001296:	4b94      	ldr	r3, [pc, #592]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80e4 	beq.w	8001476 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <HAL_RCC_OscConfig+0x4c>
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b0c      	cmp	r3, #12
 80012b8:	f040 808b 	bne.w	80013d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	f040 8087 	bne.w	80013d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c4:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x64>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e3d9      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1a      	ldr	r2, [r3, #32]
 80012e0:	4b81      	ldr	r3, [pc, #516]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_RCC_OscConfig+0x7e>
 80012ec:	4b7e      	ldr	r3, [pc, #504]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012f4:	e005      	b.n	8001302 <HAL_RCC_OscConfig+0x8a>
 80012f6:	4b7c      	ldr	r3, [pc, #496]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001302:	4293      	cmp	r3, r2
 8001304:	d223      	bcs.n	800134e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fd54 	bl	8001db8 <RCC_SetFlashLatencyFromMSIRange>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3ba      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b73      	ldr	r3, [pc, #460]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a72      	ldr	r2, [pc, #456]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b70      	ldr	r3, [pc, #448]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	496d      	ldr	r1, [pc, #436]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001338:	4b6b      	ldr	r3, [pc, #428]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4968      	ldr	r1, [pc, #416]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e025      	b.n	800139a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b66      	ldr	r3, [pc, #408]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a65      	ldr	r2, [pc, #404]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b63      	ldr	r3, [pc, #396]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4960      	ldr	r1, [pc, #384]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136c:	4b5e      	ldr	r3, [pc, #376]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	495b      	ldr	r1, [pc, #364]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fd14 	bl	8001db8 <RCC_SetFlashLatencyFromMSIRange>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e37a      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800139a:	f000 fc81 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	4950      	ldr	r1, [pc, #320]	@ (80014ec <HAL_RCC_OscConfig+0x274>)
 80013ac:	5ccb      	ldrb	r3, [r1, r3]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	4a4e      	ldr	r2, [pc, #312]	@ (80014f0 <HAL_RCC_OscConfig+0x278>)
 80013b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013ba:	4b4e      	ldr	r3, [pc, #312]	@ (80014f4 <HAL_RCC_OscConfig+0x27c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fbc8 	bl	8000b54 <HAL_InitTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d052      	beq.n	8001474 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	e35e      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d032      	beq.n	8001440 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013da:	4b43      	ldr	r3, [pc, #268]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a42      	ldr	r2, [pc, #264]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fc05 	bl	8000bf4 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ee:	f7ff fc01 	bl	8000bf4 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e347      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001400:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140c:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a35      	ldr	r2, [pc, #212]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b33      	ldr	r3, [pc, #204]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4930      	ldr	r1, [pc, #192]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142a:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	492b      	ldr	r1, [pc, #172]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
 800143e:	e01a      	b.n	8001476 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001440:	4b29      	ldr	r3, [pc, #164]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a28      	ldr	r2, [pc, #160]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800144c:	f7ff fbd2 	bl	8000bf4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001454:	f7ff fbce 	bl	8000bf4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e314      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1dc>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d073      	beq.n	800156a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x21c>
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d10b      	bne.n	80014ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d063      	beq.n	8001568 <HAL_RCC_OscConfig+0x2f0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d15f      	bne.n	8001568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e2f1      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x24c>
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0b      	ldr	r2, [pc, #44]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e025      	b.n	8001510 <HAL_RCC_OscConfig+0x298>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014cc:	d114      	bne.n	80014f8 <HAL_RCC_OscConfig+0x280>
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a02      	ldr	r2, [pc, #8]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e013      	b.n	8001510 <HAL_RCC_OscConfig+0x298>
 80014e8:	40021000 	.word	0x40021000
 80014ec:	080031f4 	.word	0x080031f4
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004
 80014f8:	4ba0      	ldr	r3, [pc, #640]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a9f      	ldr	r2, [pc, #636]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b9d      	ldr	r3, [pc, #628]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a9c      	ldr	r2, [pc, #624]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb6c 	bl	8000bf4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fb68 	bl	8000bf4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e2ae      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001532:	4b92      	ldr	r3, [pc, #584]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x2a8>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb58 	bl	8000bf4 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fb54 	bl	8000bf4 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	@ 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e29a      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155a:	4b88      	ldr	r3, [pc, #544]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x2d0>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d060      	beq.n	8001638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x310>
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d119      	bne.n	80015b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d116      	bne.n	80015b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001588:	4b7c      	ldr	r3, [pc, #496]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x328>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e277      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b76      	ldr	r3, [pc, #472]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4973      	ldr	r1, [pc, #460]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b4:	e040      	b.n	8001638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d023      	beq.n	8001606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015be:	4b6f      	ldr	r3, [pc, #444]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6e      	ldr	r2, [pc, #440]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb13 	bl	8000bf4 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb0f 	bl	8000bf4 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e255      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	4b65      	ldr	r3, [pc, #404]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b62      	ldr	r3, [pc, #392]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	495f      	ldr	r1, [pc, #380]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e018      	b.n	8001638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b5d      	ldr	r3, [pc, #372]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a5c      	ldr	r2, [pc, #368]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800160c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff faef 	bl	8000bf4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff faeb 	bl	8000bf4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e231      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d03c      	beq.n	80016be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01c      	beq.n	8001686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164c:	4b4b      	ldr	r3, [pc, #300]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800164e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001652:	4a4a      	ldr	r2, [pc, #296]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff faca 	bl	8000bf4 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fac6 	bl	8000bf4 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e20c      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001676:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ef      	beq.n	8001664 <HAL_RCC_OscConfig+0x3ec>
 8001684:	e01b      	b.n	80016be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168c:	4a3b      	ldr	r2, [pc, #236]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001696:	f7ff faad 	bl	8000bf4 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff faa9 	bl	8000bf4 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1ef      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b0:	4b32      	ldr	r3, [pc, #200]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ef      	bne.n	800169e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80a6 	beq.w	8001818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016d0:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10d      	bne.n	80016f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	4a26      	ldr	r2, [pc, #152]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e8:	4b24      	ldr	r3, [pc, #144]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f4:	2301      	movs	r3, #1
 80016f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d118      	bne.n	8001736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001710:	f7ff fa70 	bl	8000bf4 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001718:	f7ff fa6c 	bl	8000bf4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1b2      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_RCC_OscConfig+0x4d8>
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800174e:	e029      	b.n	80017a4 <HAL_RCC_OscConfig+0x52c>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d115      	bne.n	8001784 <HAL_RCC_OscConfig+0x50c>
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176e:	4a03      	ldr	r2, [pc, #12]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x52c>
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40007000 	.word	0x40007000
 8001784:	4b9a      	ldr	r3, [pc, #616]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178a:	4a99      	ldr	r2, [pc, #612]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001794:	4b96      	ldr	r3, [pc, #600]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a95      	ldr	r2, [pc, #596]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d016      	beq.n	80017da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fa22 	bl	8000bf4 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fa1e 	bl	8000bf4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e162      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ca:	4b89      	ldr	r3, [pc, #548]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ed      	beq.n	80017b4 <HAL_RCC_OscConfig+0x53c>
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017da:	f7ff fa0b 	bl	8000bf4 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fa07 	bl	8000bf4 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e14b      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f8:	4b7d      	ldr	r3, [pc, #500]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ed      	bne.n	80017e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b78      	ldr	r3, [pc, #480]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	4a77      	ldr	r2, [pc, #476]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001816:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03c      	beq.n	800189e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01c      	beq.n	8001866 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182c:	4b70      	ldr	r3, [pc, #448]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800182e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001832:	4a6f      	ldr	r2, [pc, #444]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff f9da 	bl	8000bf4 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001844:	f7ff f9d6 	bl	8000bf4 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e11c      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001856:	4b66      	ldr	r3, [pc, #408]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001858:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ef      	beq.n	8001844 <HAL_RCC_OscConfig+0x5cc>
 8001864:	e01b      	b.n	800189e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001866:	4b62      	ldr	r3, [pc, #392]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800186c:	4a60      	ldr	r2, [pc, #384]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff f9bd 	bl	8000bf4 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187e:	f7ff f9b9 	bl	8000bf4 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0ff      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001890:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80f3 	beq.w	8001a8e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	f040 80c9 	bne.w	8001a44 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018b2:	4b4f      	ldr	r3, [pc, #316]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0203 	and.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d12c      	bne.n	8001920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	3b01      	subs	r3, #1
 80018d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d123      	bne.n	8001920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d11b      	bne.n	8001920 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d113      	bne.n	8001920 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d109      	bne.n	8001920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3b01      	subs	r3, #1
 800191a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d06b      	beq.n	80019f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d062      	beq.n	80019ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001926:	4b32      	ldr	r3, [pc, #200]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0ac      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001936:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001942:	f7ff f957 	bl	8000bf4 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f953 	bl	8000bf4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e099      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <HAL_RCC_OscConfig+0x77c>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001978:	3a01      	subs	r2, #1
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800198a:	0852      	lsrs	r2, r2, #1
 800198c:	3a01      	subs	r2, #1
 800198e:	0552      	lsls	r2, r2, #21
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001996:	0852      	lsrs	r2, r2, #1
 8001998:	3a01      	subs	r2, #1
 800199a:	0652      	lsls	r2, r2, #25
 800199c:	4311      	orrs	r1, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a2:	06d2      	lsls	r2, r2, #27
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4912      	ldr	r1, [pc, #72]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c4:	f7ff f916 	bl	8000bf4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f912 	bl	8000bf4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e058      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <HAL_RCC_OscConfig+0x778>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ea:	e050      	b.n	8001a8e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04f      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
 80019f0:	40021000 	.word	0x40021000
 80019f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d144      	bne.n	8001a8e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a23      	ldr	r2, [pc, #140]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a1c:	f7ff f8ea 	bl	8000bf4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f8e6 	bl	8000bf4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e02c      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x7ac>
 8001a42:	e024      	b.n	8001a8e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d01f      	beq.n	8001a8a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f8cd 	bl	8000bf4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff f8c9 	bl	8000bf4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4905      	ldr	r1, [pc, #20]	@ (8001a98 <HAL_RCC_OscConfig+0x820>)
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_OscConfig+0x824>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e001      	b.n	8001a8e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	feeefffc 	.word	0xfeeefffc

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0e7      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b75      	ldr	r3, [pc, #468]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b72      	ldr	r3, [pc, #456]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4970      	ldr	r1, [pc, #448]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0cf      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b66      	ldr	r3, [pc, #408]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d908      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b63      	ldr	r3, [pc, #396]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4960      	ldr	r1, [pc, #384]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d04c      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b26:	4b5a      	ldr	r3, [pc, #360]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d121      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0a6      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	4b54      	ldr	r3, [pc, #336]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e09a      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b56:	4b4e      	ldr	r3, [pc, #312]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e08e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b66:	4b4a      	ldr	r3, [pc, #296]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e086      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b46      	ldr	r3, [pc, #280]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4943      	ldr	r1, [pc, #268]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7ff f834 	bl	8000bf4 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f830 	bl	8000bf4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e06e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d208      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	492b      	ldr	r1, [pc, #172]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be6:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d210      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf4:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 0207 	bic.w	r2, r3, #7
 8001bfc:	4923      	ldr	r1, [pc, #140]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c04:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e036      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d008      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4918      	ldr	r1, [pc, #96]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4910      	ldr	r1, [pc, #64]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c54:	f000 f824 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	490b      	ldr	r1, [pc, #44]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_RCC_ClockConfig+0x1fc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe ff6b 	bl	8000b54 <HAL_InitTick>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c82:	7afb      	ldrb	r3, [r7, #11]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	080031f4 	.word	0x080031f4
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cae:	4b3e      	ldr	r3, [pc, #248]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d121      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11e      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd4:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce0:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e005      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d18:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e004      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d134      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d003      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0xac>
 8001d44:	e005      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d48:	617b      	str	r3, [r7, #20]
      break;
 8001d4a:	e005      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4e:	617b      	str	r3, [r7, #20]
      break;
 8001d50:	e002      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	617b      	str	r3, [r7, #20]
      break;
 8001d56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	fb03 f202 	mul.w	r2, r3, r2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	0e5b      	lsrs	r3, r3, #25
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d98:	69bb      	ldr	r3, [r7, #24]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08003204 	.word	0x08003204
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200

08001db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd0:	f7ff f9ee 	bl	80011b0 <HAL_PWREx_GetVoltageRange>
 8001dd4:	6178      	str	r0, [r7, #20]
 8001dd6:	e014      	b.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	4a24      	ldr	r2, [pc, #144]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df0:	f7ff f9de 	bl	80011b0 <HAL_PWREx_GetVoltageRange>
 8001df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e08:	d10b      	bne.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b80      	cmp	r3, #128	@ 0x80
 8001e0e:	d919      	bls.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e14:	d902      	bls.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e013      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e010      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b80      	cmp	r3, #128	@ 0x80
 8001e26:	d902      	bls.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e28:	2303      	movs	r3, #3
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e00a      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d102      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e004      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b70      	cmp	r3, #112	@ 0x70
 8001e3e:	d101      	bne.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e40:	2301      	movs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 0207 	bic.w	r2, r3, #7
 8001e4c:	4909      	ldr	r1, [pc, #36]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e54:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40022000 	.word	0x40022000

08001e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e095      	b.n	8001fb6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e9a:	d009      	beq.n	8001eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
 8001ea2:	e005      	b.n	8001eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd4e 	bl	800096c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001ef0:	d902      	bls.n	8001ef8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e002      	b.n	8001efe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001f06:	d007      	beq.n	8001f18 <HAL_SPI_Init+0xa0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f10:	d002      	beq.n	8001f18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5a:	ea42 0103 	orr.w	r1, r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	0c1b      	lsrs	r3, r3, #16
 8001f74:	f003 0204 	and.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b088      	sub	sp, #32
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fce:	f7fe fe11 	bl	8000bf4 <HAL_GetTick>
 8001fd2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d001      	beq.n	8001fe8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e15c      	b.n	80022a2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_SPI_Transmit+0x36>
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e154      	b.n	80022a2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_SPI_Transmit+0x48>
 8002002:	2302      	movs	r3, #2
 8002004:	e14d      	b.n	80022a2 <HAL_SPI_Transmit+0x2e4>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2203      	movs	r2, #3
 8002012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002058:	d10f      	bne.n	800207a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002078:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002084:	2b40      	cmp	r3, #64	@ 0x40
 8002086:	d007      	beq.n	8002098 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020a0:	d952      	bls.n	8002148 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_SPI_Transmit+0xf2>
 80020aa:	8b7b      	ldrh	r3, [r7, #26]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d145      	bne.n	800213c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b4:	881a      	ldrh	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	1c9a      	adds	r2, r3, #2
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020d4:	e032      	b.n	800213c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d112      	bne.n	800210a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e8:	881a      	ldrh	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f4:	1c9a      	adds	r2, r3, #2
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002108:	e018      	b.n	800213c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800210a:	f7fe fd73 	bl	8000bf4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d803      	bhi.n	8002122 <HAL_SPI_Transmit+0x164>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002120:	d102      	bne.n	8002128 <HAL_SPI_Transmit+0x16a>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0b2      	b.n	80022a2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1c7      	bne.n	80020d6 <HAL_SPI_Transmit+0x118>
 8002146:	e083      	b.n	8002250 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_SPI_Transmit+0x198>
 8002150:	8b7b      	ldrh	r3, [r7, #26]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d177      	bne.n	8002246 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d912      	bls.n	8002186 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	881a      	ldrh	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002170:	1c9a      	adds	r2, r3, #2
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b02      	subs	r3, #2
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002184:	e05f      	b.n	8002246 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80021ac:	e04b      	b.n	8002246 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d12b      	bne.n	8002214 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d912      	bls.n	80021ec <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b02      	subs	r3, #2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021ea:	e02c      	b.n	8002246 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	330c      	adds	r3, #12
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002212:	e018      	b.n	8002246 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002214:	f7fe fcee 	bl	8000bf4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d803      	bhi.n	800222c <HAL_SPI_Transmit+0x26e>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800222a:	d102      	bne.n	8002232 <HAL_SPI_Transmit+0x274>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e02d      	b.n	80022a2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ae      	bne.n	80021ae <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fb65 	bl	8002924 <SPI_EndRxTxTransaction>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b08a      	sub	sp, #40	@ 0x28
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022bc:	f7fe fc9a 	bl	8000bf4 <HAL_GetTick>
 80022c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00c      	beq.n	80022f8 <HAL_SPI_TransmitReceive+0x4e>
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022e4:	d106      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x4a>
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d001      	beq.n	80022f8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
 80022f6:	e1f3      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_SPI_TransmitReceive+0x60>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_SPI_TransmitReceive+0x60>
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1e8      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_SPI_TransmitReceive+0x72>
 8002318:	2302      	movs	r3, #2
 800231a:	e1e1      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x436>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b04      	cmp	r3, #4
 800232e:	d003      	beq.n	8002338 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2205      	movs	r2, #5
 8002334:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800237a:	d802      	bhi.n	8002382 <HAL_SPI_TransmitReceive+0xd8>
 800237c:	8abb      	ldrh	r3, [r7, #20]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d908      	bls.n	8002394 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e007      	b.n	80023a4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80023a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ae:	2b40      	cmp	r3, #64	@ 0x40
 80023b0:	d007      	beq.n	80023c2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023ca:	f240 8083 	bls.w	80024d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_SPI_TransmitReceive+0x132>
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d16f      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002400:	e05c      	b.n	80024bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d11b      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x19e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x19e>
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	2b01      	cmp	r3, #1
 800241e:	d113      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	1c9a      	adds	r2, r3, #2
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11c      	bne.n	8002490 <HAL_SPI_TransmitReceive+0x1e6>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	b292      	uxth	r2, r2
 800246e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	1c9a      	adds	r2, r3, #2
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800248c:	2301      	movs	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002490:	f7fe fbb0 	bl	8000bf4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800249c:	429a      	cmp	r2, r3
 800249e:	d80d      	bhi.n	80024bc <HAL_SPI_TransmitReceive+0x212>
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024a6:	d009      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e111      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d19d      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x158>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d197      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x158>
 80024d2:	e0e5      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0x23a>
 80024dc:	8afb      	ldrh	r3, [r7, #22]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	f040 80d1 	bne.w	8002686 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d912      	bls.n	8002514 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f2:	881a      	ldrh	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fe:	1c9a      	adds	r2, r3, #2
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b02      	subs	r3, #2
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002512:	e0b8      	b.n	8002686 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	7812      	ldrb	r2, [r2, #0]
 8002520:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253a:	e0a4      	b.n	8002686 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d134      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x30a>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02f      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x30a>
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	2b01      	cmp	r3, #1
 8002558:	d12c      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d912      	bls.n	800258a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002574:	1c9a      	adds	r2, r3, #2
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b02      	subs	r3, #2
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002588:	e012      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	330c      	adds	r3, #12
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d148      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x3aa>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d042      	beq.n	8002654 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d923      	bls.n	8002622 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	b292      	uxth	r2, r2
 80025e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	1c9a      	adds	r2, r3, #2
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b02      	subs	r3, #2
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d81f      	bhi.n	8002650 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	e016      	b.n	8002650 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f103 020c 	add.w	r2, r3, #12
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002654:	f7fe face 	bl	8000bf4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002660:	429a      	cmp	r2, r3
 8002662:	d803      	bhi.n	800266c <HAL_SPI_TransmitReceive+0x3c2>
 8002664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800266a:	d102      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x3c8>
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e02c      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	f47f af55 	bne.w	800253c <HAL_SPI_TransmitReceive+0x292>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	f47f af4e 	bne.w	800253c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f93d 	bl	8002924 <SPI_EndRxTxTransaction>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00e      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80026de:	2300      	movs	r3, #0
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026f8:	f7fe fa7c 	bl	8000bf4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	4413      	add	r3, r2
 8002706:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002708:	f7fe fa74 	bl	8000bf4 <HAL_GetTick>
 800270c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800270e:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	015b      	lsls	r3, r3, #5
 8002714:	0d1b      	lsrs	r3, r3, #20
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800271e:	e054      	b.n	80027ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002726:	d050      	beq.n	80027ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002728:	f7fe fa64 	bl	8000bf4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	429a      	cmp	r2, r3
 8002736:	d902      	bls.n	800273e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d13d      	bne.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800274c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002756:	d111      	bne.n	800277c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002760:	d004      	beq.n	800276c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800276a:	d107      	bne.n	800277c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800277a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002784:	d10f      	bne.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e017      	b.n	80027ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d19b      	bne.n	8002720 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800280a:	f7fe f9f3 	bl	8000bf4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800281a:	f7fe f9eb 	bl	8000bf4 <HAL_GetTick>
 800281e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	330c      	adds	r3, #12
 8002826:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002828:	4b3d      	ldr	r3, [pc, #244]	@ (8002920 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00da      	lsls	r2, r3, #3
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	0d1b      	lsrs	r3, r3, #20
 8002838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002840:	e060      	b.n	8002904 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002848:	d107      	bne.n	800285a <SPI_WaitFifoStateUntilTimeout+0x62>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002858:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002860:	d050      	beq.n	8002904 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002862:	f7fe f9c7 	bl	8000bf4 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286e:	429a      	cmp	r2, r3
 8002870:	d902      	bls.n	8002878 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d13d      	bne.n	80028f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002886:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002890:	d111      	bne.n	80028b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800289a:	d004      	beq.n	80028a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a4:	d107      	bne.n	80028b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028be:	d10f      	bne.n	80028e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e010      	b.n	8002916 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	3b01      	subs	r3, #1
 8002902:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	d196      	bne.n	8002842 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3728      	adds	r7, #40	@ 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff ff5b 	bl	80027f8 <SPI_WaitFifoStateUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e027      	b.n	80029a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	2180      	movs	r1, #128	@ 0x80
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fec0 	bl	80026e8 <SPI_WaitFlagStateUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002972:	f043 0220 	orr.w	r2, r3, #32
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e014      	b.n	80029a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff ff34 	bl	80027f8 <SPI_WaitFifoStateUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e000      	b.n	80029a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e049      	b.n	8002a56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe f80a 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f000 fa38 	bl	8002e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01b      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0202 	mvn.w	r2, #2
 8002a92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f9bc 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 8002aae:	e005      	b.n	8002abc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f9ae 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f9bf 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01b      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f06f 0204 	mvn.w	r2, #4
 8002ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f996 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 8002afa:	e005      	b.n	8002b08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f988 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f999 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01b      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0208 	mvn.w	r2, #8
 8002b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f970 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 8002b46:	e005      	b.n	8002b54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f962 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f973 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01b      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0210 	mvn.w	r2, #16
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f94a 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f93c 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f94d 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0201 	mvn.w	r2, #1
 8002bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f91a 	bl	8002dfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fab0 	bl	8003158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 faa8 	bl	800316c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00c      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f907 	bl	8002e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0220 	mvn.w	r2, #32
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa70 	bl	8003144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_ConfigClockSource+0x1c>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0b6      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x18a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc4:	d03e      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xd8>
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cca:	f200 8087 	bhi.w	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd2:	f000 8086 	beq.w	8002de2 <HAL_TIM_ConfigClockSource+0x176>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cda:	d87f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002cdc:	2b70      	cmp	r3, #112	@ 0x70
 8002cde:	d01a      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xaa>
 8002ce0:	2b70      	cmp	r3, #112	@ 0x70
 8002ce2:	d87b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002ce4:	2b60      	cmp	r3, #96	@ 0x60
 8002ce6:	d050      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x11e>
 8002ce8:	2b60      	cmp	r3, #96	@ 0x60
 8002cea:	d877      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002cec:	2b50      	cmp	r3, #80	@ 0x50
 8002cee:	d03c      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xfe>
 8002cf0:	2b50      	cmp	r3, #80	@ 0x50
 8002cf2:	d873      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002cf4:	2b40      	cmp	r3, #64	@ 0x40
 8002cf6:	d058      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x13e>
 8002cf8:	2b40      	cmp	r3, #64	@ 0x40
 8002cfa:	d86f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002cfc:	2b30      	cmp	r3, #48	@ 0x30
 8002cfe:	d064      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15e>
 8002d00:	2b30      	cmp	r3, #48	@ 0x30
 8002d02:	d86b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d060      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15e>
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d867      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15e>
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d05a      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15e>
 8002d14:	e062      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d26:	f000 f987 	bl	8003038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]
      break;
 8002d42:	e04f      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d54:	f000 f970 	bl	8003038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d66:	609a      	str	r2, [r3, #8]
      break;
 8002d68:	e03c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 f8e4 	bl	8002f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2150      	movs	r1, #80	@ 0x50
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f93d 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002d88:	e02c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 f903 	bl	8002fa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2160      	movs	r1, #96	@ 0x60
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f92d 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002da8:	e01c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 f8c4 	bl	8002f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2140      	movs	r1, #64	@ 0x40
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f91d 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e00c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 f914 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002dda:	e003      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      break;
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a30      	ldr	r2, [pc, #192]	@ (8002f38 <TIM_Base_SetConfig+0xd4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_Base_SetConfig+0x20>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e82:	d108      	bne.n	8002e96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <TIM_Base_SetConfig+0xd4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <TIM_Base_SetConfig+0x52>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea4:	d007      	beq.n	8002eb6 <TIM_Base_SetConfig+0x52>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a24      	ldr	r2, [pc, #144]	@ (8002f3c <TIM_Base_SetConfig+0xd8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <TIM_Base_SetConfig+0x52>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a23      	ldr	r2, [pc, #140]	@ (8002f40 <TIM_Base_SetConfig+0xdc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d108      	bne.n	8002ec8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <TIM_Base_SetConfig+0xd4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d007      	beq.n	8002f04 <TIM_Base_SetConfig+0xa0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <TIM_Base_SetConfig+0xd8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d003      	beq.n	8002f04 <TIM_Base_SetConfig+0xa0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <TIM_Base_SetConfig+0xdc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40014400 	.word	0x40014400

08002f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0201 	bic.w	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f023 030a 	bic.w	r3, r3, #10
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b087      	sub	sp, #28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 0210 	bic.w	r2, r3, #16
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	031b      	lsls	r3, r3, #12
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	f043 0307 	orr.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	021a      	lsls	r2, r3, #8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	431a      	orrs	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	609a      	str	r2, [r3, #8]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800308c:	2302      	movs	r3, #2
 800308e:	e04f      	b.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a21      	ldr	r2, [pc, #132]	@ (800313c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80030c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f8:	d004      	beq.n	8003104 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a10      	ldr	r2, [pc, #64]	@ (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10c      	bne.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800310a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	4313      	orrs	r3, r2
 8003114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40014000 	.word	0x40014000

08003144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <memset>:
 8003180:	4402      	add	r2, r0
 8003182:	4603      	mov	r3, r0
 8003184:	4293      	cmp	r3, r2
 8003186:	d100      	bne.n	800318a <memset+0xa>
 8003188:	4770      	bx	lr
 800318a:	f803 1b01 	strb.w	r1, [r3], #1
 800318e:	e7f9      	b.n	8003184 <memset+0x4>

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	4d0d      	ldr	r5, [pc, #52]	@ (80031c8 <__libc_init_array+0x38>)
 8003194:	4c0d      	ldr	r4, [pc, #52]	@ (80031cc <__libc_init_array+0x3c>)
 8003196:	1b64      	subs	r4, r4, r5
 8003198:	10a4      	asrs	r4, r4, #2
 800319a:	2600      	movs	r6, #0
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	4d0b      	ldr	r5, [pc, #44]	@ (80031d0 <__libc_init_array+0x40>)
 80031a2:	4c0c      	ldr	r4, [pc, #48]	@ (80031d4 <__libc_init_array+0x44>)
 80031a4:	f000 f818 	bl	80031d8 <_init>
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	2600      	movs	r6, #0
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003234 	.word	0x08003234
 80031cc:	08003234 	.word	0x08003234
 80031d0:	08003234 	.word	0x08003234
 80031d4:	08003238 	.word	0x08003238

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
